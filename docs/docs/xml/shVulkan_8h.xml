<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="shVulkan_8h" kind="file" language="C++">
    <compoundname>shVulkan.h</compoundname>
    <includes local="no">vulkan/vulkan.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdlib.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h</label>
        <link refid="shVulkan_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="2">
        <label>vulkan/vulkan.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structShVkPipeline" prot="public">ShVkPipeline</innerclass>
    <innerclass refid="structShVkPipelinePool" prot="public">ShVkPipelinePool</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="shVulkan_8h_1a3058eadcecb21906098604fd79c65214" prot="public" static="no">
        <name>SH_TRUE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="27" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a4f2eaae3258ecc9d23c25a434fff37f7" prot="public" static="no">
        <name>SH_FALSE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="35" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a120255f73dec43695afdb8cb3dbfc016" prot="public" static="no">
        <name>VK_MAKE_API_VERSION</name>
        <param><defname>variant</defname></param>
        <param><defname>major</defname></param>
        <param><defname>minor</defname></param>
        <param><defname>patch</defname></param>
        <initializer>    ((((uint32_t)(variant)) &lt;&lt; 29U) | (((uint32_t)(major)) &lt;&lt; 22U) | (((uint32_t)(minor)) &lt;&lt; 12U) | ((uint32_t)(patch)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="44" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="44" bodyend="45"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a4df49a295649705c30fe92316487464b" prot="public" static="no">
        <name>shVkError</name>
        <param><defname>condition</defname></param>
        <param><defname>error_msg</defname></param>
        <param><defname>failure_expression</defname></param>
        <initializer>	if ((int)(condition)) {\
		printf(&quot;shvulkan error: %s\n&quot;, (const char*)(error_msg));\
		failure_expression;\
	}</initializer>
        <briefdescription>
<para>Error-checking macro for Vulkan conditions. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro checks a given condition. If the condition evaluates to true, it prints an error message and executes a failure expression (like returning from a function or exiting).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>The condition to check (non-zero for an error). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>A message to be printed if the condition is true. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>failure_expression</parametername>
</parameternamelist>
<parameterdescription>
<para>The expression to execute when the condition is true (e.g., return or exit).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This macro does not return any value but executes the failure_expression if the condition is met. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="62" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="62" bodyend="66"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a7fef53e61a3d62b029fe8746f3628dce" prot="public" static="no">
        <name>shVkResultError</name>
        <param><defname>result</defname></param>
        <param><defname>error_msg</defname></param>
        <param><defname>failure_expression</defname></param>
        <initializer>	if ((VkResult)(result) != VK_SUCCESS) {\
		printf(&quot;shvulkan error: %s, %s\n&quot;, error_msg, <ref refid="shVulkan_8h_1ab10f609829185e735e0612e8c2a23445" kindref="member">shTranslateVkResult</ref>((VkResult)(result)));\
		failure_expression;\
	}</initializer>
        <briefdescription>
<para>Error-checking macro for Vulkan VkResult. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro checks the result of a Vulkan API call. If the result is not VK_SUCCESS, it prints an error message along with the translated Vulkan error code and executes a failure expression (like returning from a function or exiting).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The VkResult from a Vulkan function (VK_SUCCESS or an error code). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>A message to be printed if the result is not VK_SUCCESS. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>failure_expression</parametername>
</parameternamelist>
<parameterdescription>
<para>The expression to execute when the result is an error (e.g., return or exit).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This macro calls <computeroutput><ref refid="shVulkan_8h_1ab10f609829185e735e0612e8c2a23445" kindref="member">shTranslateVkResult()</ref></computeroutput> to convert the VkResult enum into a string representation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="81" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="81" bodyend="85"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a0a9fade4c0cfb2d73ef085d0423c78fd" prot="public" static="no">
        <name>SH_MAX_STACK_VALIDATION_LAYER_COUNT</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="106" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a5be727609c1dd4aa8c921b26565e9d71" prot="public" static="no">
        <name>SH_MAX_STACK_QUEUE_FAMILY_COUNT</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="108" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a35f7035eab91fd6de9da8ed60af612e2" prot="public" static="no">
        <name>SH_MAX_STACK_PHYSICAL_DEVICE_COUNT</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="109" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1ad0ce09fa6507dd577db1ff4d4609d21c" prot="public" static="no">
        <name>SH_MAX_STACK_QUEUE_COUNT</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="110" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1ad78f8180c37d24de5dbaa868aaf45258" prot="public" static="no">
        <name>SH_MAX_STACK_DEVICE_SURFACE_FORMAT_COUNT</name>
        <initializer>256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="111" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a31c43c37127b14c5326878d99876b344" prot="public" static="no">
        <name>SH_MAX_STACK_SURFACE_PRESENT_MODE_COUNT</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="112" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a383c4ece797ce47ba36a2d5242c546e3" prot="public" static="no">
        <name>SH_MAX_STACK_DEVICE_COLOR_FORMATS_QUERIES</name>
        <initializer>44</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="354" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a00e2240a35539bfbf65ca7c69dcb31b0" prot="public" static="no">
        <name>SH_FORMAT_UINT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="355" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1aa92949a61b4a5a9503ca98e8a0e12dda" prot="public" static="no">
        <name>SH_FORMAT_SINT</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="356" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a95c9d9d5c140d5730146622702bc14f9" prot="public" static="no">
        <name>SH_FORMAT_SFLOAT</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="357" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a2386429c07139c95076e828f3e58bdfe" prot="public" static="no">
        <name>SH_FORMAT_UNDEFINED</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="358" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="358" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1af5b3da538ae24e044689f28fe523a42a" prot="public" static="no">
        <name>SH_VEC1_SIGNED_FLOAT</name>
        <initializer>VK_FORMAT_R32_SFLOAT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1202" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="1202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1ae4499e0115203b2c721bfbc53176d35a" prot="public" static="no">
        <name>SH_VEC2_SIGNED_FLOAT</name>
        <initializer>VK_FORMAT_R32G32_SFLOAT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1203" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="1203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a929ba4d5d4ae88889ff14a262d5ac887" prot="public" static="no">
        <name>SH_VEC3_SIGNED_FLOAT</name>
        <initializer>VK_FORMAT_R32G32B32_SFLOAT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1204" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="1204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a46252a0e328f725b1ec724a70d273550" prot="public" static="no">
        <name>SH_VEC4_SIGNED_FLOAT</name>
        <initializer>VK_FORMAT_R32G32B32A32_SFLOAT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1205" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="1205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a1b119c02978356e404ef7b56f735d45e" prot="public" static="no">
        <name>SH_VEC1_SIGNED_DOUBLE</name>
        <initializer>VK_FORMAT_R64_SFLOAT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1207" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="1207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1acc71d2945b9cffcf4ca604d40ab4fb7a" prot="public" static="no">
        <name>SH_VEC2_SIGNED_DOUBLE</name>
        <initializer>VK_FORMAT_R64G64_SFLOAT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1208" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="1208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a71dcc53dda823ce72126717fb19f3de9" prot="public" static="no">
        <name>SH_VEC3_SIGNED_DOUBLE</name>
        <initializer>VK_FORMAT_R64G64B64_SFLOAT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1209" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="1209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1aa4df58eba0840a5b9337779861fb6000" prot="public" static="no">
        <name>SH_VEC4_SIGNED_DOUBLE</name>
        <initializer>VK_FORMAT_R64G64B64A64_SFLOAT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1210" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="1210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a3ece1ee5bc23c10f269f51e18694e8a3" prot="public" static="no">
        <name>SH_VEC1_SIGNED_INT</name>
        <initializer>VK_FORMAT_R32_SINT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1212" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="1212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1aada6c6ed20fea872700b1f4363a734a6" prot="public" static="no">
        <name>SH_VEC2_SIGNED_INT</name>
        <initializer>VK_FORMAT_R32G32_SINT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1213" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="1213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a129e6896cacf696df6178fd16446d712" prot="public" static="no">
        <name>SH_VEC3_SIGNED_INT</name>
        <initializer>VK_FORMAT_R32G32B32_SINT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1214" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="1214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a6ad0039c5e5894ac26a305d703e2d68f" prot="public" static="no">
        <name>SH_VEC4_SIGNED_INT</name>
        <initializer>VK_FORMAT_R32G32B32A32_SINT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1215" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="1215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a8d88110d9c717a0e20e04430248a7e01" prot="public" static="no">
        <name>SH_VEC1_UNSIGNED_INT</name>
        <initializer>VK_FORMAT_R32_UINT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1217" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="1217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a409b9943400664388340a3caec93a312" prot="public" static="no">
        <name>SH_VEC2_UNSIGNED_INT</name>
        <initializer>VK_FORMAT_R32G32_UINT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1218" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="1218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1ae2bc14332982a606ddc247cfe10b022d" prot="public" static="no">
        <name>SH_VEC3_UNSIGNED_INT</name>
        <initializer>VK_FORMAT_R32G32B32_UINT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1219" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="1219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1aa3cc5d5fcfb8f5e437957939b75f2940" prot="public" static="no">
        <name>SH_VEC4_UNSIGNED_INT</name>
        <initializer>VK_FORMAT_R32G32B32A32_UINT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1220" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="1220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a0b14c396b38b2d7c69ecfe8728516203" prot="public" static="no">
        <name>SH_VEC1_UNSIGNED_LONG</name>
        <initializer>VK_FORMAT_R64_UINT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1222" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="1222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1acca44d5469689461dee1111ff1bec388" prot="public" static="no">
        <name>SH_VEC2_UNSIGNED_LONG</name>
        <initializer>VK_FORMAT_R64G64_UINT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1223" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="1223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a3d262f8a5f1f9ac1cba54ca21d86e3d5" prot="public" static="no">
        <name>SH_VEC3_UNSIGNED_LONG</name>
        <initializer>VK_FORMAT_R64G64B64_UINT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1224" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="1224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1aa8f38bc72a2e0f7fd1720cf986bbcf1d" prot="public" static="no">
        <name>SH_VEC4_UNSIGNED_LONG</name>
        <initializer>VK_FORMAT_R64G64B64A64_UINT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1225" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="1225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1ad386ce3d06b9300c9d6cbcb221ec1ee9" prot="public" static="no">
        <name>SH_MAX_STACK_BUFFER_REGION_COUNT</name>
        <initializer>256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1312" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="1312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1af673c20336c080a49187acd6fa18cf84" prot="public" static="no">
        <name>SH_MAX_PIPELINE_VERTEX_BINDING_COUNT</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2082" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="2082" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a091b1cecf2c3862ae534b7c1300282a9" prot="public" static="no">
        <name>SH_MAX_PIPELINE_VERTEX_ATTRIBUTE_COUNT</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2083" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="2083" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1aee56f29993961649cc353e2cfeafe8f8" prot="public" static="no">
        <name>SH_MAX_PIPELINE_SHADER_STAGE_COUNT</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2085" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="2085" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a379e54073774df0b0209554206c0c3e4" prot="public" static="no">
        <name>SH_MAX_PIPELINE_SUBPASS_COLOR_ATTACHMENT_COUNT</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2087" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="2087" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1ae192b45b4a12b020b42e796770fc4f63" prot="public" static="no">
        <name>SH_PIPELINE_POOL_MAX_PIPELINE_COUNT</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2502" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="2502" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a43176634bb725eea98ba3eb733bbcd7d" prot="public" static="no">
        <name>SH_MAX_PIPELINE_POOL_DESCRIPTOR_COUNT</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2503" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="2503" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a9d9930a12e5728bf56b05fcbef6f9a0c" prot="public" static="no">
        <name>shAllocatePipelinePool</name>
        <param></param>
        <initializer>((<ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref>*)calloc(1, sizeof(<ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref>)))</initializer>
        <briefdescription>
<para>Allocates a new <ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> structure. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro allocates heap memory for a new <ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> structure and initializes it to zero.</para>
<para><simplesect kind="return"><para>Pointer to the newly allocated <ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> structure, or NULL if allocation fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2546" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="2546" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shVulkan_8h_1a7dcc542b5415675c48a7196d3ae241f2" prot="public" static="no">
        <name>shFreePipelinePool</name>
        <initializer>free</initializer>
        <briefdescription>
<para>Frees the memory of an <ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> structure. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro frees the memory allocated on the heap for an <ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> structure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> structure to be freed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2555" column="9" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="2555" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1" prot="public" static="no" strong="no">
        <type></type>
        <name>ShImageChannelTypeFlags</name>
        <enumvalue id="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1a86b9e1f5698d22f0c949d5b6c0134721" prot="public">
          <name>SH_IMAGE_CHANNEL_TYPE_UNORM</name>
          <initializer>= 1 &lt;&lt; 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1a85faeb403a26c3901d493710e866e28a" prot="public">
          <name>SH_IMAGE_CHANNEL_TYPE_SNORM</name>
          <initializer>= 1 &lt;&lt; 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1a977bde39d93f048e5437aa3b82e0101e" prot="public">
          <name>SH_IMAGE_CHANNEL_TYPE_UINT</name>
          <initializer>= 1 &lt;&lt; 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1a9d8cf9d654e66965d1c901cfa31c5666" prot="public">
          <name>SH_IMAGE_CHANNEL_TYPE_SINT</name>
          <initializer>= 1 &lt;&lt; 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1a39ca6190179b0a04aa18b99608a33220" prot="public">
          <name>SH_IMAGE_CHANNEL_TYPE_SFLOAT</name>
          <initializer>= 1 &lt;&lt; 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1a979ee9012146f1ca54b23d5df12f903a" prot="public">
          <name>SH_IMAGE_CHANNEL_TYPE_UNDEFINED</name>
          <initializer>= UINT32_MAX</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="360" column="1" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="360" bodyend="367"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="shVulkan_8h_1aaccfb38ea85b91664878d2596ec39da1" prot="public" static="no">
        <type>enum <ref refid="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1" kindref="member">ShImageChannelTypeFlags</ref></type>
        <definition>typedef enum ShImageChannelTypeFlags ShImageChannelTypeFlags</definition>
        <argsstring></argsstring>
        <name>ShImageChannelTypeFlags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="367" column="25"/>
      </memberdef>
      <memberdef kind="typedef" id="shVulkan_8h_1adaa31bc1ed7627ffa2cd0a8415230dfa" prot="public" static="no">
        <type>struct ShVkPipeline</type>
        <definition>typedef struct ShVkPipeline ShVkPipeline</definition>
        <argsstring></argsstring>
        <name>ShVkPipeline</name>
        <briefdescription>
<para>Structure representing a Vulkan pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>This structure holds all the necessary state and configuration for creating and managing a Vulkan pipeline. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2124" column="14"/>
      </memberdef>
      <memberdef kind="typedef" id="shVulkan_8h_1a50e29521dee75adcd4c4007570df5103" prot="public" static="no">
        <type>struct ShVkPipelinePool</type>
        <definition>typedef struct ShVkPipelinePool ShVkPipelinePool</definition>
        <argsstring></argsstring>
        <name>ShVkPipelinePool</name>
        <briefdescription>
<para>Represents a collection of Vulkan pipeline objects and their related resources. </para>
        </briefdescription>
        <detaileddescription>
<para>This structure holds arrays of Vulkan pipelines, descriptor set layouts, descriptor pools, and other related resources required to manage and use Vulkan pipelines in a pipeline pool. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2128" column="31" bodyfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" bodystart="2128" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="shVulkan_8h_1ab10f609829185e735e0612e8c2a23445" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * shTranslateVkResult</definition>
        <argsstring>(VkResult vk_result)</argsstring>
        <name>shTranslateVkResult</name>
        <param>
          <type>VkResult</type>
          <declname>vk_result</declname>
        </param>
        <briefdescription>
<para>Translates a VkResult enum into a literal string. </para>
        </briefdescription>
        <detaileddescription>
<para>This function converts a Vulkan <computeroutput>VkResult</computeroutput> code into a literal string that describes the result, which is helpful for error messages and debugging.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vk_result</parametername>
</parameternamelist>
<parameterdescription>
<para>The Vulkan result code (VkResult).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string representing the Vulkan result literal.</para>
</simplesect>
<simplesect kind="note"><para>This function is often used in error reporting to provide more descriptive information about Vulkan errors, such as converting <computeroutput>VK_ERROR_OUT_OF_HOST_MEMORY</computeroutput> to its string form. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="101" column="19" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="101" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a6268c936f366c9a3a1748c3d1982d95c" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shFindValidationLayer</definition>
        <argsstring>(const char *validation_layer_name)</argsstring>
        <name>shFindValidationLayer</name>
        <param>
          <type>const char *</type>
          <declname>validation_layer_name</declname>
        </param>
        <briefdescription>
<para>Searches for a specific Vulkan validation layer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function searches through the available Vulkan validation layers to find a match with the provided validation layer name.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>validation_layer_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the validation layer to find.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the validation layer is found, 0 otherwise.</para>
</simplesect>
<simplesect kind="note"><para>This function is typically used to check if a specific validation layer (e.g., &quot;VK_LAYER_KHRONOS_validation&quot;) is available for use. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="129" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="129" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1ae0f3ac928ce24f74c536af3964286ce1" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCreateInstance</definition>
        <argsstring>(const char *application_name, const char *engine_name, const uint8_t enable_validation_layers, const uint32_t extension_count, const char **pp_extension_names, uint32_t api_version, VkInstance *p_instance)</argsstring>
        <name>shCreateInstance</name>
        <param>
          <type>const char *</type>
          <declname>application_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>engine_name</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>enable_validation_layers</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>extension_count</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>pp_extension_names</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>api_version</declname>
        </param>
        <param>
          <type>VkInstance *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Creates a Vulkan instance. </para>
        </briefdescription>
        <detaileddescription>
<para>This function initializes a Vulkan instance with the specified application name, engine name, validation layers, and extensions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>application_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the application. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>engine_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the engine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable_validation_layers</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to enable (1) or disable (0) validation layers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extension_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of Vulkan extensions to enable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pp_extension_names</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid array of extension names to enable, if required. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>api_version</parametername>
</parameternamelist>
<parameterdescription>
<para>The Vulkan API version to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the newly created VkInstance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the instance is created successfully, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="149" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="149" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1aa325b8ce04eab87640435bfb6792f20b" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shGetPhysicalDeviceQueueFamilies</definition>
        <argsstring>(VkPhysicalDevice physical_device, VkSurfaceKHR surface, uint32_t *p_queue_family_count, uint32_t *p_graphics_queue_family_count, uint32_t *p_surface_queue_family_count, uint32_t *p_compute_queue_family_count, uint32_t *p_transfer_queue_family_count, uint32_t *p_graphics_queue_family_indices, uint32_t *p_surface_queue_family_indices, uint32_t *p_compute_queue_family_indices, uint32_t *p_transfer_queue_family_indices, VkQueueFamilyProperties *p_queue_families_properties)</argsstring>
        <name>shGetPhysicalDeviceQueueFamilies</name>
        <param>
          <type>VkPhysicalDevice</type>
          <declname>physical_device</declname>
        </param>
        <param>
          <type>VkSurfaceKHR</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_queue_family_count</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_graphics_queue_family_count</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_surface_queue_family_count</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_compute_queue_family_count</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_transfer_queue_family_count</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_graphics_queue_family_indices</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_surface_queue_family_indices</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_compute_queue_family_indices</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_transfer_queue_family_indices</declname>
        </param>
        <param>
          <type>VkQueueFamilyProperties *</type>
          <declname>p_queue_families_properties</declname>
        </param>
        <briefdescription>
<para>Retrieves the queue family indices for a physical device. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves and categorizes the queue families available for a specified physical device and surface, such as graphics, compute, transfer, and presentation (surface support).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>physical_device</parametername>
</parameternamelist>
<parameterdescription>
<para>The current physical device to query for queue families. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>The Vulkan surface (for surface support queries). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_queue_family_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the total number of queue families available. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_graphics_queue_family_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to Number of graphics-capable queue families. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_surface_queue_family_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to Number of surface-capable queue families. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_compute_queue_family_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to Number of compute-capable queue families. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_transfer_queue_family_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to Number of transfer-capable queue families. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_graphics_queue_family_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the indices of the graphics-capable queue families. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_surface_queue_family_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the indices of the surface-capable queue families. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_compute_queue_family_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the indices of the compute-capable queue families. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_transfer_queue_family_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the indices of the transfer-capable queue families. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_queue_families_properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to a <computeroutput>VkQueueFamilyProperties</computeroutput> structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="180" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="180" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a014a677f98233893f4fcf7633d564e8a" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shGetQueueFamilySurfaceSupport</definition>
        <argsstring>(VkPhysicalDevice physical_device, uint32_t queue_family_index, VkSurfaceKHR surface, uint8_t *p_support)</argsstring>
        <name>shGetQueueFamilySurfaceSupport</name>
        <param>
          <type>VkPhysicalDevice</type>
          <declname>physical_device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>queue_family_index</declname>
        </param>
        <param>
          <type>VkSurfaceKHR</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>p_support</declname>
        </param>
        <briefdescription>
<para>Checks if a queue family supports presenting to a surface. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks whether a queue family of a physical device supports presentation to a surface.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>physical_device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid physical device to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>queue_family_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the queue family to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid surface to check for support. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_support</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to Flag indicating support (1 if supported, 0 otherwise).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="207" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="207" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a3664134ede0952d4a20ba825696072e9" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shSelectPhysicalDevice</definition>
        <argsstring>(VkInstance instance, VkSurfaceKHR surface, VkQueueFlags requirements, VkPhysicalDevice *p_physical_device, VkPhysicalDeviceProperties *p_physical_device_properties, VkPhysicalDeviceFeatures *p_physical_device_features, VkPhysicalDeviceMemoryProperties *p_physical_device_memory_properties)</argsstring>
        <name>shSelectPhysicalDevice</name>
        <param>
          <type>VkInstance</type>
          <declname>instance</declname>
        </param>
        <param>
          <type>VkSurfaceKHR</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>VkQueueFlags</type>
          <declname>requirements</declname>
        </param>
        <param>
          <type>VkPhysicalDevice *</type>
          <declname>p_physical_device</declname>
        </param>
        <param>
          <type>VkPhysicalDeviceProperties *</type>
          <declname>p_physical_device_properties</declname>
        </param>
        <param>
          <type>VkPhysicalDeviceFeatures *</type>
          <declname>p_physical_device_features</declname>
        </param>
        <param>
          <type>VkPhysicalDeviceMemoryProperties *</type>
          <declname>p_physical_device_memory_properties</declname>
        </param>
        <briefdescription>
<para>Selects a physical device that meets specified requirements. </para>
        </briefdescription>
        <detaileddescription>
<para>This function selects a Vulkan physical device based on specified requirements such as queue support, surface capabilities, and required device features. Then it retrieves vital information about the GPU.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid surface if presentation support is required, otherwise it can be set as <computeroutput>VK_NULL_HANDLE</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requirements</parametername>
</parameternamelist>
<parameterdescription>
<para>Queue family requirements (VkQueueFlags). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_physical_device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the selected Vulkan physical device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_physical_device_properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the properties of the selected physical device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_physical_device_features</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the features of the selected physical device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_physical_device_memory_properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the memory properties of the selected physical device.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if a suitable device is found, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="230" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="230" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a32980fffc92087836a90e945025add26" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shGetPhysicalDeviceSurfaceSupport</definition>
        <argsstring>(VkPhysicalDevice physical_device, uint32_t queue_family_index, VkSurfaceKHR surface, uint8_t *p_supported)</argsstring>
        <name>shGetPhysicalDeviceSurfaceSupport</name>
        <param>
          <type>VkPhysicalDevice</type>
          <declname>physical_device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>queue_family_index</declname>
        </param>
        <param>
          <type>VkSurfaceKHR</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>p_supported</declname>
        </param>
        <briefdescription>
<para>Queries if a queue family supports presenting to a surface. </para>
        </briefdescription>
        <detaileddescription>
<para>This function queries whether a specific queue family of a physical device supports presenting to a Vulkan surface.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>physical_device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid physical device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>queue_family_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the queue family to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid surface to check for support. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_supported</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to Flag indicating support (1 if supported, 0 otherwise).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="253" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="253" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a2a8aab0d5301eac3a95bd60385dcb141" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shGetPhysicalDeviceSurfaceCapabilities</definition>
        <argsstring>(VkPhysicalDevice physical_device, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR *p_surface_capabilities, uint32_t clamp_current_extent_width_value, uint32_t clamp_current_extent_height_value)</argsstring>
        <name>shGetPhysicalDeviceSurfaceCapabilities</name>
        <param>
          <type>VkPhysicalDevice</type>
          <declname>physical_device</declname>
        </param>
        <param>
          <type>VkSurfaceKHR</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>VkSurfaceCapabilitiesKHR *</type>
          <declname>p_surface_capabilities</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>clamp_current_extent_width_value</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>clamp_current_extent_height_value</declname>
        </param>
        <briefdescription>
<para>Retrieves the surface capabilities of a physical device. </para>
        </briefdescription>
        <detaileddescription>
<para>This function queries the surface capabilities (such as min/max image count and extent) for a physical device and surface combination.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>physical_device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid physical device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan surface to query capabilities for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_surface_capabilities</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to a structure where the surface capabilities will be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clamp_current_extent_width_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Fixed current extent width value when vkGetPhysicalDeviceSurfaceCapabilitiesKHR writes UINT32_MAX (this might happen when using Wayland) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clamp_current_extent_height_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Fixed current extent height value when vkGetPhysicalDeviceSurfaceCapabilitiesKHR writes UINT32_MAX (this might happen when using Wayland)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="274" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="274" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a614467100219d688afecfac1bf5a8522" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shQueryForDeviceQueueInfo</definition>
        <argsstring>(uint32_t queue_family_index, uint32_t queue_count, float *p_queue_priorities, uint8_t protected, VkDeviceQueueCreateInfo *p_device_queue_info)</argsstring>
        <name>shQueryForDeviceQueueInfo</name>
        <param>
          <type>uint32_t</type>
          <declname>queue_family_index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>queue_count</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>p_queue_priorities</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>protected</declname>
        </param>
        <param>
          <type>VkDeviceQueueCreateInfo *</type>
          <declname>p_device_queue_info</declname>
        </param>
        <briefdescription>
<para>Queries information for device queue creation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets up the necessary information for creating device queues, including the queue family index, queue count, priorities, and queue protection settings.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue_family_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the queue family. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>queue_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of queues to create in the specified family. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_queue_priorities</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of queue priorities. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>protected</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether the queue should be protected (1 for protected, 0 for unprotected). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_device_queue_info</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to a VkDeviceQueueCreateInfo structure where the queue info will be stored.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="296" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="296" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1aacba1b9a04a3ecf4cf5041908c6bfd5f" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shSetLogicalDevice</definition>
        <argsstring>(VkPhysicalDevice physical_device, VkDevice *p_device, uint32_t extension_count, char **pp_extension_names, uint32_t device_queue_count, VkDeviceQueueCreateInfo *p_device_queue_infos)</argsstring>
        <name>shSetLogicalDevice</name>
        <param>
          <type>VkPhysicalDevice</type>
          <declname>physical_device</declname>
        </param>
        <param>
          <type>VkDevice *</type>
          <declname>p_device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>extension_count</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>pp_extension_names</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>device_queue_count</declname>
        </param>
        <param>
          <type>VkDeviceQueueCreateInfo *</type>
          <declname>p_device_queue_infos</declname>
        </param>
        <briefdescription>
<para>Sets up a Vulkan logical device. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a Vulkan logical device with specified extensions, queue creation info, and other configurations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>physical_device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan physical device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the newly created VkDevice. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extension_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of Vulkan extensions to enable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pp_extension_names</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to extension names to enable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device_queue_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of device queues to create. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_device_queue_infos</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of VkDeviceQueueCreateInfo structures.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the logical device is created successfully, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="319" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="319" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1ae7c6c9c1c42d68b7a822aa800e0ff2da" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shGetDeviceQueues</definition>
        <argsstring>(VkDevice device, uint32_t queue_count, uint32_t *p_queue_family_indices, VkQueue *p_queues)</argsstring>
        <name>shGetDeviceQueues</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>queue_count</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_queue_family_indices</declname>
        </param>
        <param>
          <type>VkQueue *</type>
          <declname>p_queues</declname>
        </param>
        <briefdescription>
<para>Retrieves the Vulkan queues from a device. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the Vulkan queues from a logical device based on specified queue family indices.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>queue_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of queues to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_queue_family_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of queue family indices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_queues</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to an array of VkQueue handles.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="340" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="340" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1ab93ee8c746906227e234a79e7ed91e44" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCheckSupportedDeviceColorFormat</definition>
        <argsstring>(VkPhysicalDevice physical_device, VkFormat format, uint8_t *p_color_attachment_supported)</argsstring>
        <name>shCheckSupportedDeviceColorFormat</name>
        <param>
          <type>VkPhysicalDevice</type>
          <declname>physical_device</declname>
        </param>
        <param>
          <type>VkFormat</type>
          <declname>format</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>p_color_attachment_supported</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="348" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="348" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a22a002d56c6d4e2093298afec80eaac4" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shFindSupportedDeviceColorFormats</definition>
        <argsstring>(VkPhysicalDevice physical_device, uint32_t min_channel_count, uint32_t max_channel_count, uint32_t min_channel_size, uint32_t max_channel_size, ShImageChannelTypeFlags channel_types, uint32_t *p_supported_format_count, VkFormat *p_supported_formats, uint32_t *p_channels_count, uint32_t *p_single_channels_sizes, uint32_t *p_channels_types)</argsstring>
        <name>shFindSupportedDeviceColorFormats</name>
        <param>
          <type>VkPhysicalDevice</type>
          <declname>physical_device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>min_channel_count</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_channel_count</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>min_channel_size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_channel_size</declname>
        </param>
        <param>
          <type><ref refid="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1" kindref="member">ShImageChannelTypeFlags</ref></type>
          <declname>channel_types</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_supported_format_count</declname>
        </param>
        <param>
          <type>VkFormat *</type>
          <declname>p_supported_formats</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_channels_count</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_single_channels_sizes</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_channels_types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="369" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="369" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1ab5ebb51aaf4d84d3636c3e858e2cbc81" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCreateSwapchain</definition>
        <argsstring>(VkDevice device, VkPhysicalDevice physical_device, VkSurfaceCapabilitiesKHR surface_capabilities, VkSurfaceKHR surface, VkFormat image_format, VkFormat *p_image_format, uint32_t swapchain_image_count, VkSharingMode image_sharing_mode, uint8_t vsync, uint32_t *p_swapchain_image_count, VkSwapchainKHR *p_swapchain)</argsstring>
        <name>shCreateSwapchain</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkPhysicalDevice</type>
          <declname>physical_device</declname>
        </param>
        <param>
          <type>VkSurfaceCapabilitiesKHR</type>
          <declname>surface_capabilities</declname>
        </param>
        <param>
          <type>VkSurfaceKHR</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>VkFormat</type>
          <declname>image_format</declname>
        </param>
        <param>
          <type>VkFormat *</type>
          <declname>p_image_format</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>swapchain_image_count</declname>
        </param>
        <param>
          <type>VkSharingMode</type>
          <declname>image_sharing_mode</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>vsync</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_swapchain_image_count</declname>
        </param>
        <param>
          <type>VkSwapchainKHR *</type>
          <declname>p_swapchain</declname>
        </param>
        <briefdescription>
<para>Creates a Vulkan swapchain. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets up a Vulkan swapchain with the specified surface, image format, and other parameters.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>physical_device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan physical device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>surface_capabilities</parametername>
</parameternamelist>
<parameterdescription>
<para>Surface capabilities struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan surface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image_format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format of the images in the swapchain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_image_format</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the format of the swapchain images. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>swapchain_image_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of images in the swapchain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image_sharing_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Sharing mode for the swapchain images. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vsync</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to enable (1) or disable (0) V-Sync. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_swapchain_image_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the number of swapchain images. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_swapchain</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the newly created VkSwapchainKHR.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>p_swapchain_image_count might be different from swapchain_image_count when swapchain_image_count is not supported! Please take this in consideration for your API implementations.</para>
</simplesect>
<simplesect kind="return"><para>1 if the swapchain is created successfully, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="404" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="404" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a1bc1c3ad7fc0f2a7ad52bfc283edf57d" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCombineMaxSamples</definition>
        <argsstring>(VkPhysicalDeviceProperties physical_device_properties, uint32_t sample_count, uint8_t combine_color_sample, uint8_t combine_depth_sample, uint32_t *p_sample_count)</argsstring>
        <name>shCombineMaxSamples</name>
        <param>
          <type>VkPhysicalDeviceProperties</type>
          <declname>physical_device_properties</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sample_count</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>combine_color_sample</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>combine_depth_sample</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_sample_count</declname>
        </param>
        <briefdescription>
<para>Combines sample counts based on physical device properties. </para>
        </briefdescription>
        <detaileddescription>
<para>This function determines the maximum number of samples that can be used for color and depth attachments, considering the physical device properties.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>physical_device_properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Properties of the physical device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sample_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample count to combine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>combine_color_sample</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to combine color samples. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>combine_depth_sample</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to combine depth samples. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_sample_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination pointer to the resulting maximum supported sample count for the current hardware.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="432" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="432" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a4e5e210ebde2ee1a8695d27af5d030ae" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shGetSwapchainImages</definition>
        <argsstring>(VkDevice device, VkSwapchainKHR swapchain, uint32_t *p_swapchain_image_count, VkImage *p_swapchain_images)</argsstring>
        <name>shGetSwapchainImages</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkSwapchainKHR</type>
          <declname>swapchain</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_swapchain_image_count</declname>
        </param>
        <param>
          <type>VkImage *</type>
          <declname>p_swapchain_images</declname>
        </param>
        <briefdescription>
<para>Retrieves the images in a swapchain. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the Vulkan images present in a swapchain.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>swapchain</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan swapchain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_swapchain_image_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the number of swapchain images. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_swapchain_images</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to an array of VkImage handles.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="452" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="452" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1ab26128a90f271e61dd3da44c60002972" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCreateImageView</definition>
        <argsstring>(VkDevice device, VkImage image, VkImageViewType view_type, VkImageAspectFlagBits image_aspect, uint32_t mip_levels, VkFormat format, VkImageView *p_image_view)</argsstring>
        <name>shCreateImageView</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkImage</type>
          <declname>image</declname>
        </param>
        <param>
          <type>VkImageViewType</type>
          <declname>view_type</declname>
        </param>
        <param>
          <type>VkImageAspectFlagBits</type>
          <declname>image_aspect</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mip_levels</declname>
        </param>
        <param>
          <type>VkFormat</type>
          <declname>format</declname>
        </param>
        <param>
          <type>VkImageView *</type>
          <declname>p_image_view</declname>
        </param>
        <briefdescription>
<para>Creates a Vulkan image view. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a Vulkan image view for a specified image, view type, format, and aspect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>view_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the image view. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image_aspect</parametername>
</parameternamelist>
<parameterdescription>
<para>Aspect flags of the image (e.g., color, depth). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mip_levels</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of mipmap levels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format of the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_image_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the newly created VkImageView.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="474" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="474" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a29319ccf723bb92c0b25612c65f4e914" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCreateSwapchainImageViews</definition>
        <argsstring>(VkDevice device, VkFormat format, uint32_t swapchain_image_count, VkImage *p_swapchain_images, VkImageView *p_swapchain_image_views)</argsstring>
        <name>shCreateSwapchainImageViews</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkFormat</type>
          <declname>format</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>swapchain_image_count</declname>
        </param>
        <param>
          <type>VkImage *</type>
          <declname>p_swapchain_images</declname>
        </param>
        <param>
          <type>VkImageView *</type>
          <declname>p_swapchain_image_views</declname>
        </param>
        <briefdescription>
<para>Creates image views for swapchain images. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates Vulkan image views for all images in a swapchain.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format of the image views. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>swapchain_image_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of swapchain images. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_swapchain_images</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array of VkImage handles. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_swapchain_image_views</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to an array of VkImageView handles.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="497" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="497" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1abb14c0eb648a4fc8dd6ad54a664c8a66" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCreateCommandPool</definition>
        <argsstring>(VkDevice device, uint32_t queue_family_index, VkCommandPool *p_cmd_pool)</argsstring>
        <name>shCreateCommandPool</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>queue_family_index</declname>
        </param>
        <param>
          <type>VkCommandPool *</type>
          <declname>p_cmd_pool</declname>
        </param>
        <briefdescription>
<para>Creates a Vulkan command pool. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a command pool for a specified queue family.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>queue_family_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Queue family index for the command pool. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_cmd_pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the newly created VkCommandPool.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="516" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="516" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1ad66c57365878b51eb09068509ed13207" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shAllocateCommandBuffers</definition>
        <argsstring>(VkDevice device, VkCommandPool cmd_pool, uint32_t cmd_buffer_count, VkCommandBuffer *p_cmd_buffer)</argsstring>
        <name>shAllocateCommandBuffers</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkCommandPool</type>
          <declname>cmd_pool</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cmd_buffer_count</declname>
        </param>
        <param>
          <type>VkCommandBuffer *</type>
          <declname>p_cmd_buffer</declname>
        </param>
        <briefdescription>
<para>Allocates command buffers from a command pool. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allocates a specified number of command buffers from a command pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd_pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to the command pool from which to allocate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd_buffer_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of command buffers to allocate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_cmd_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to an array of newly created VkCommandBuffer handles.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="534" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="534" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1ad2559948a94ebe5e470544324802f4a8" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCreateRenderpassAttachment</definition>
        <argsstring>(VkFormat format, uint32_t sample_count, VkAttachmentLoadOp load_treatment, VkAttachmentStoreOp store_treatment, VkAttachmentLoadOp stencil_load_treatment, VkAttachmentStoreOp stencil_store_treatment, VkImageLayout initial_layout, VkImageLayout final_layout, VkAttachmentDescription *p_attachment_description)</argsstring>
        <name>shCreateRenderpassAttachment</name>
        <param>
          <type>VkFormat</type>
          <declname>format</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sample_count</declname>
        </param>
        <param>
          <type>VkAttachmentLoadOp</type>
          <declname>load_treatment</declname>
        </param>
        <param>
          <type>VkAttachmentStoreOp</type>
          <declname>store_treatment</declname>
        </param>
        <param>
          <type>VkAttachmentLoadOp</type>
          <declname>stencil_load_treatment</declname>
        </param>
        <param>
          <type>VkAttachmentStoreOp</type>
          <declname>stencil_store_treatment</declname>
        </param>
        <param>
          <type>VkImageLayout</type>
          <declname>initial_layout</declname>
        </param>
        <param>
          <type>VkImageLayout</type>
          <declname>final_layout</declname>
        </param>
        <param>
          <type>VkAttachmentDescription *</type>
          <declname>p_attachment_description</declname>
        </param>
        <briefdescription>
<para>Creates a Vulkan render pass attachment description. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates an attachment description to use in a render pass.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format of the attachment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sample_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample count for the attachment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>load_treatment</parametername>
</parameternamelist>
<parameterdescription>
<para>Load operation for the attachment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_treatment</parametername>
</parameternamelist>
<parameterdescription>
<para>Store operation for the attachment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stencil_load_treatment</parametername>
</parameternamelist>
<parameterdescription>
<para>Load operation for stencil attachment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stencil_store_treatment</parametername>
</parameternamelist>
<parameterdescription>
<para>Store operation for stencil attachment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initial_layout</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial layout of the attachment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>final_layout</parametername>
</parameternamelist>
<parameterdescription>
<para>Final layout of the attachment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_attachment_description</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the newly created VkAttachmentDescription.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="558" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="558" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a19028144387eb3a72335bb7e3a884ce1" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCreateRenderpassAttachmentReference</definition>
        <argsstring>(uint32_t attachment_idx, VkImageLayout layout, VkAttachmentReference *p_attachment_reference)</argsstring>
        <name>shCreateRenderpassAttachmentReference</name>
        <param>
          <type>uint32_t</type>
          <declname>attachment_idx</declname>
        </param>
        <param>
          <type>VkImageLayout</type>
          <declname>layout</declname>
        </param>
        <param>
          <type>VkAttachmentReference *</type>
          <declname>p_attachment_reference</declname>
        </param>
        <briefdescription>
<para>Creates a Vulkan render pass attachment reference. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates an attachment reference for use in a subpass of a render pass.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attachment_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the attachment in the render pass. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layout</parametername>
</parameternamelist>
<parameterdescription>
<para>Layout of the attachment within the subpass. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_attachment_reference</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the newly created VkAttachmentReference.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="581" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="581" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a57487fd38b85621eef744f36e2287516" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCreateSubpass</definition>
        <argsstring>(VkPipelineBindPoint bind_point, uint32_t input_attachment_count, VkAttachmentReference *p_input_attachments_reference, uint32_t color_attachment_count, VkAttachmentReference *p_color_attachments_reference, VkAttachmentReference *p_depth_stencil_attachment_reference, VkAttachmentReference *p_resolve_attachment_reference, uint32_t preserve_attachment_count, uint32_t *p_preserve_attachments, VkSubpassDescription *p_subpass)</argsstring>
        <name>shCreateSubpass</name>
        <param>
          <type>VkPipelineBindPoint</type>
          <declname>bind_point</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>input_attachment_count</declname>
        </param>
        <param>
          <type>VkAttachmentReference *</type>
          <declname>p_input_attachments_reference</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>color_attachment_count</declname>
        </param>
        <param>
          <type>VkAttachmentReference *</type>
          <declname>p_color_attachments_reference</declname>
        </param>
        <param>
          <type>VkAttachmentReference *</type>
          <declname>p_depth_stencil_attachment_reference</declname>
        </param>
        <param>
          <type>VkAttachmentReference *</type>
          <declname>p_resolve_attachment_reference</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>preserve_attachment_count</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_preserve_attachments</declname>
        </param>
        <param>
          <type>VkSubpassDescription *</type>
          <declname>p_subpass</declname>
        </param>
        <briefdescription>
<para>Creates a Vulkan subpass description. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a subpass description including input, color, depth/stencil, and resolve attachments.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bind_point</parametername>
</parameternamelist>
<parameterdescription>
<para>Pipeline bind point for the subpass. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input_attachment_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of input attachments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_input_attachments_reference</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of input attachment references. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color_attachment_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of color attachments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_color_attachments_reference</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of color attachment references. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_depth_stencil_attachment_reference</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to the depth/stencil attachment reference. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_resolve_attachment_reference</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to the resolve attachment reference. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>preserve_attachment_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of attachments to preserve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_preserve_attachments</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of indices of attachments to preserve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_subpass</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the newly created VkSubpassDescription.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="605" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="605" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a258c1642c763d6f157d4a1fdaa49a82e" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCreateRenderpass</definition>
        <argsstring>(VkDevice device, uint32_t attachment_count, VkAttachmentDescription *p_attachments_descriptions, uint32_t subpass_count, VkSubpassDescription *p_subpasses, VkRenderPass *p_renderpass)</argsstring>
        <name>shCreateRenderpass</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>attachment_count</declname>
        </param>
        <param>
          <type>VkAttachmentDescription *</type>
          <declname>p_attachments_descriptions</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>subpass_count</declname>
        </param>
        <param>
          <type>VkSubpassDescription *</type>
          <declname>p_subpasses</declname>
        </param>
        <param>
          <type>VkRenderPass *</type>
          <declname>p_renderpass</declname>
        </param>
        <briefdescription>
<para>Creates a Vulkan render pass. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a render pass with specified attachments and subpasses.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attachment_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of attachments in the render pass. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_attachments_descriptions</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of VkAttachmentDescription structures. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subpass_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of subpasses in the render pass. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_subpasses</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of VkSubpassDescription structures. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_renderpass</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the newly created VkRenderPass.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="632" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="632" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a291f5b0f8e182a85026f963afa2271f4" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCreateFramebuffer</definition>
        <argsstring>(VkDevice device, VkRenderPass renderpass, uint32_t image_view_count, VkImageView *p_image_views, uint32_t x, uint32_t y, uint32_t z, VkFramebuffer *p_framebuffer)</argsstring>
        <name>shCreateFramebuffer</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkRenderPass</type>
          <declname>renderpass</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>image_view_count</declname>
        </param>
        <param>
          <type>VkImageView *</type>
          <declname>p_image_views</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>z</declname>
        </param>
        <param>
          <type>VkFramebuffer *</type>
          <declname>p_framebuffer</declname>
        </param>
        <briefdescription>
<para>Creates a Vulkan framebuffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a framebuffer with specified image views and dimensions for use with a render pass.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>renderpass</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan render pass. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image_view_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of image views in the framebuffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_image_views</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of VkImageView handles. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the framebuffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of the framebuffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Depth of the framebuffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_framebuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the newly created VkFramebuffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="657" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="657" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a221d955d6c62b516c8b2b8fadd912275" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shWaitDeviceIdle</definition>
        <argsstring>(VkDevice device)</argsstring>
        <name>shWaitDeviceIdle</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Waits for a Vulkan device to become idle. </para>
        </briefdescription>
        <detaileddescription>
<para>This function waits until the Vulkan device has finished all its operations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="677" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="677" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1aeb246f0e807addb550fff82f8d26223a" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shDestroySwapchain</definition>
        <argsstring>(VkDevice device, VkSwapchainKHR swapchain)</argsstring>
        <name>shDestroySwapchain</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkSwapchainKHR</type>
          <declname>swapchain</declname>
        </param>
        <briefdescription>
<para>Destroys a Vulkan swapchain. </para>
        </briefdescription>
        <detaileddescription>
<para>This function destroys the specified Vulkan swapchain.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>swapchain</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid VkSwapchainKHR to destroy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="691" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="691" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1abfb12ee8df4b8599f6f01fe31ed65f6b" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shDestroyFramebuffers</definition>
        <argsstring>(VkDevice device, uint32_t framebuffer_count, VkFramebuffer *p_framebuffers)</argsstring>
        <name>shDestroyFramebuffers</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>framebuffer_count</declname>
        </param>
        <param>
          <type>VkFramebuffer *</type>
          <declname>p_framebuffers</declname>
        </param>
        <briefdescription>
<para>Destroys Vulkan framebuffers. </para>
        </briefdescription>
        <detaileddescription>
<para>This function destroys an array of Vulkan framebuffers.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>framebuffer_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of framebuffers to destroy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_framebuffers</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of VkFramebuffer handles.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="707" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="707" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a8ad928e11f2e7c5dad11b1a284c2755c" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shDestroyImageViews</definition>
        <argsstring>(VkDevice device, uint32_t image_view_count, VkImageView *p_image_views)</argsstring>
        <name>shDestroyImageViews</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>image_view_count</declname>
        </param>
        <param>
          <type>VkImageView *</type>
          <declname>p_image_views</declname>
        </param>
        <briefdescription>
<para>Destroys Vulkan image views. </para>
        </briefdescription>
        <detaileddescription>
<para>This function destroys an array of Vulkan image views.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image_view_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of image views to destroy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_image_views</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of VkImageView handles.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="724" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="724" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a8d467c1ac1ad2ffbe2adda1c47370ed7" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shDestroySurface</definition>
        <argsstring>(VkInstance instance, VkSurfaceKHR surface)</argsstring>
        <name>shDestroySurface</name>
        <param>
          <type>VkInstance</type>
          <declname>instance</declname>
        </param>
        <param>
          <type>VkSurfaceKHR</type>
          <declname>surface</declname>
        </param>
        <briefdescription>
<para>Destroys a Vulkan surface. </para>
        </briefdescription>
        <detaileddescription>
<para>This function destroys a Vulkan surface associated with an instance.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid VkSurfaceKHR to destroy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="740" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="740" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a3d4ea1b86540f76b65e6a8c5f2c4c026" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shDestroyCommandBuffers</definition>
        <argsstring>(VkDevice device, VkCommandPool cmd_pool, uint32_t cmd_buffer_count, VkCommandBuffer *p_cmd_buffers)</argsstring>
        <name>shDestroyCommandBuffers</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkCommandPool</type>
          <declname>cmd_pool</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cmd_buffer_count</declname>
        </param>
        <param>
          <type>VkCommandBuffer *</type>
          <declname>p_cmd_buffers</declname>
        </param>
        <briefdescription>
<para>Destroys Vulkan command buffers. </para>
        </briefdescription>
        <detaileddescription>
<para>This function destroys an array of Vulkan command buffers from a command pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd_pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan command pool. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd_buffer_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of command buffers to destroy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_cmd_buffers</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of VkCommandBuffer handles.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="757" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="757" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1ab0d0697b43c84db7e1d9cb136ff91b6f" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shDestroyCommandPool</definition>
        <argsstring>(VkDevice device, VkCommandPool cmd_pool)</argsstring>
        <name>shDestroyCommandPool</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkCommandPool</type>
          <declname>cmd_pool</declname>
        </param>
        <briefdescription>
<para>Destroys a Vulkan command pool. </para>
        </briefdescription>
        <detaileddescription>
<para>This function destroys a Vulkan command pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd_pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan command pool to destroy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="774" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="774" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a19fb63823338c43b4ee7d6daf5737b9b" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shDestroyRenderpass</definition>
        <argsstring>(VkDevice device, VkRenderPass render_pass)</argsstring>
        <name>shDestroyRenderpass</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkRenderPass</type>
          <declname>render_pass</declname>
        </param>
        <briefdescription>
<para>Destroys a Vulkan render pass. </para>
        </briefdescription>
        <detaileddescription>
<para>This function destroys a Vulkan render pass.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>render_pass</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan render pass to destroy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="789" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="789" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a64cfc5776d06bf298077c4a31277d4f0" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shDestroyDevice</definition>
        <argsstring>(VkDevice device)</argsstring>
        <name>shDestroyDevice</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Destroys a Vulkan device. </para>
        </briefdescription>
        <detaileddescription>
<para>This function destroys a Vulkan device.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device to destroy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="803" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="803" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a397935deaec415b4a18e1e67cd639ac0" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shDestroyInstance</definition>
        <argsstring>(VkInstance instance)</argsstring>
        <name>shDestroyInstance</name>
        <param>
          <type>VkInstance</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Destroys a Vulkan instance. </para>
        </briefdescription>
        <detaileddescription>
<para>This function destroys a Vulkan instance.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan instance to destroy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="816" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="816" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1ace9dee2233a899d9d8b2aefe486cd0ab" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shResetCommandBuffer</definition>
        <argsstring>(VkCommandBuffer cmd_buffer)</argsstring>
        <name>shResetCommandBuffer</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>cmd_buffer</declname>
        </param>
        <briefdescription>
<para>Resets a Vulkan command buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function resets a command buffer to the initial state.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan command buffer to reset.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="829" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="829" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1af3ffeb76f326f881c2df916234f30977" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shBeginCommandBuffer</definition>
        <argsstring>(VkCommandBuffer cmd_buffer)</argsstring>
        <name>shBeginCommandBuffer</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>cmd_buffer</declname>
        </param>
        <briefdescription>
<para>Begins recording commands into a Vulkan command buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function begins recording commands into the specified command buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan command buffer to begin recording.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="842" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="842" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a3f8daf6ad33feb4fd115203fe4030949" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shEndCommandBuffer</definition>
        <argsstring>(VkCommandBuffer cmd_buffer)</argsstring>
        <name>shEndCommandBuffer</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>cmd_buffer</declname>
        </param>
        <briefdescription>
<para>Ends recording commands into a Vulkan command buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function ends the recording of commands into the specified command buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan command buffer to end recording.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="855" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="855" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a82bed9cc5fef0693730d125c51b806fb" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCmdDispatch</definition>
        <argsstring>(VkCommandBuffer cmd_buffer, uint32_t group_count_x, uint32_t group_count_y, uint32_t group_count_z)</argsstring>
        <name>shCmdDispatch</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>cmd_buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>group_count_x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>group_count_y</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>group_count_z</declname>
        </param>
        <briefdescription>
<para>Dispatches compute work from a Vulkan command buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function dispatches a compute workload with specified group counts.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan command buffer from which to dispatch. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group_count_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of groups in the x dimension. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group_count_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of groups in the y dimension. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group_count_z</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of groups in the z dimension.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="871" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="871" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a6cd1a448b2b9710567e2f12d35459109" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shQueueSubmit</definition>
        <argsstring>(uint32_t cmd_buffer_count, VkCommandBuffer *p_cmd_buffers, VkQueue queue, VkFence fence, uint32_t semaphores_to_wait_for_count, VkSemaphore *p_semaphores_to_wait_for, VkPipelineStageFlags wait_stage, uint32_t signal_semaphore_count, VkSemaphore *p_signal_semaphores)</argsstring>
        <name>shQueueSubmit</name>
        <param>
          <type>uint32_t</type>
          <declname>cmd_buffer_count</declname>
        </param>
        <param>
          <type>VkCommandBuffer *</type>
          <declname>p_cmd_buffers</declname>
        </param>
        <param>
          <type>VkQueue</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>VkFence</type>
          <declname>fence</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>semaphores_to_wait_for_count</declname>
        </param>
        <param>
          <type>VkSemaphore *</type>
          <declname>p_semaphores_to_wait_for</declname>
        </param>
        <param>
          <type>VkPipelineStageFlags</type>
          <declname>wait_stage</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>signal_semaphore_count</declname>
        </param>
        <param>
          <type>VkSemaphore *</type>
          <declname>p_signal_semaphores</declname>
        </param>
        <briefdescription>
<para>Submits command buffers to a Vulkan queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This function submits command buffers to a Vulkan queue and optionally waits for a fence and signals semaphores.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd_buffer_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of command buffers to submit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_cmd_buffers</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of Vulkan command buffers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan queue to which to submit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fence</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan fence to signal upon completion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semaphores_to_wait_for_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of semaphores to wait for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_semaphores_to_wait_for</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of Vulkan semaphores to wait for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wait_stage</parametername>
</parameternamelist>
<parameterdescription>
<para>Pipeline stage flags to wait for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signal_semaphore_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of semaphores to signal. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_signal_semaphores</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of Vulkan semaphores to signal.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="895" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="895" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1af404871916d00d12ff9244341000f0e4" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shWaitForQueue</definition>
        <argsstring>(VkQueue queue)</argsstring>
        <name>shWaitForQueue</name>
        <param>
          <type>VkQueue</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
<para>Waits for a Vulkan queue to become idle. </para>
        </briefdescription>
        <detaileddescription>
<para>This function waits until the Vulkan queue has finished all its operations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan queue to wait for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="916" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="916" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a60a84381f852cc747db662c564c3f5e5" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCreateFences</definition>
        <argsstring>(VkDevice device, uint32_t fence_count, uint8_t signaled, VkFence *p_fences)</argsstring>
        <name>shCreateFences</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>fence_count</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>signaled</declname>
        </param>
        <param>
          <type>VkFence *</type>
          <declname>p_fences</declname>
        </param>
        <briefdescription>
<para>Creates Vulkan fences. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a specified number of Vulkan fences.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fence_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of fences to create. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signaled</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to initialize fences as signaled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_fences</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to an array of newly created Vulkan fences.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="932" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="932" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a82904fc4fffa81dfe9b466b4e93c63ef" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCreateSemaphores</definition>
        <argsstring>(VkDevice device, uint32_t semaphore_count, VkSemaphore *p_semaphores)</argsstring>
        <name>shCreateSemaphores</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>semaphore_count</declname>
        </param>
        <param>
          <type>VkSemaphore *</type>
          <declname>p_semaphores</declname>
        </param>
        <briefdescription>
<para>Creates Vulkan semaphores. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a specified number of Vulkan semaphores.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semaphore_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of semaphores to create. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_semaphores</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to an array of newly created Vulkan semaphores.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="950" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="950" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a025ccfbc53b3f2bf00a1d2f5290e115d" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shDestroyFences</definition>
        <argsstring>(VkDevice device, uint32_t fence_count, VkFence *p_fences)</argsstring>
        <name>shDestroyFences</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>fence_count</declname>
        </param>
        <param>
          <type>VkFence *</type>
          <declname>p_fences</declname>
        </param>
        <briefdescription>
<para>Destroys Vulkan fences. </para>
        </briefdescription>
        <detaileddescription>
<para>This function destroys a specified number of Vulkan fences.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fence_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of fences to destroy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_fences</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of Vulkan fences to destroy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="967" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="967" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a3785756a9434af94314db3ef872155ec" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shDestroySemaphores</definition>
        <argsstring>(VkDevice device, uint32_t semaphore_count, VkSemaphore *p_semaphores)</argsstring>
        <name>shDestroySemaphores</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>semaphore_count</declname>
        </param>
        <param>
          <type>VkSemaphore *</type>
          <declname>p_semaphores</declname>
        </param>
        <briefdescription>
<para>Destroys Vulkan semaphores. </para>
        </briefdescription>
        <detaileddescription>
<para>This function destroys a specified number of Vulkan semaphores.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semaphore_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of semaphores to destroy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_semaphores</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of Vulkan semaphores to destroy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="984" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="984" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a9e3b777a9bded7b6d683ab4d334dc120" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shResetFences</definition>
        <argsstring>(VkDevice device, uint32_t fence_count, VkFence *p_fences)</argsstring>
        <name>shResetFences</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>fence_count</declname>
        </param>
        <param>
          <type>VkFence *</type>
          <declname>p_fences</declname>
        </param>
        <briefdescription>
<para>Resets Vulkan fences. </para>
        </briefdescription>
        <detaileddescription>
<para>This function resets a specified number of Vulkan fences to their initial state.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fence_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of fences to reset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_fences</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of Vulkan fences to reset.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1001" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1001" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1aa961040591408bda2df704229f53b10c" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shResetSemaphores</definition>
        <argsstring>(VkDevice device, uint32_t semaphore_count, VkSemaphore *p_semaphores)</argsstring>
        <name>shResetSemaphores</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>semaphore_count</declname>
        </param>
        <param>
          <type>VkSemaphore *</type>
          <declname>p_semaphores</declname>
        </param>
        <briefdescription>
<para>Resets Vulkan semaphores. </para>
        </briefdescription>
        <detaileddescription>
<para>This function resets a specified number of Vulkan semaphores to their initial state.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semaphore_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of semaphores to reset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_semaphores</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of Vulkan semaphores to reset.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1018" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1018" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1ac7b90bc8d4b8f2781770c3c3ac05019f" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shWaitForFences</definition>
        <argsstring>(VkDevice device, uint32_t fence_count, VkFence *p_fences, uint8_t wait_for_all, uint64_t timeout_ns)</argsstring>
        <name>shWaitForFences</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>fence_count</declname>
        </param>
        <param>
          <type>VkFence *</type>
          <declname>p_fences</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>wait_for_all</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>timeout_ns</declname>
        </param>
        <briefdescription>
<para>Waits for Vulkan fences to become signaled. </para>
        </briefdescription>
        <detaileddescription>
<para>This function waits for a specified number of Vulkan fences to become signaled.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fence_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of fences to wait for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_fences</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of Vulkan fences to wait for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wait_for_all</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to wait for all fences to be signaled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_ns</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout in nanoseconds to wait for the fences.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1037" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1037" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1aaebc8f285804dcc9a4f74910abc2db73" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shWaitForSemaphores</definition>
        <argsstring>(VkDevice device, uint32_t semaphore_count, VkSemaphore *p_semaphores, uint8_t wait_for_all, uint64_t timeout_ns, uint64_t *p_semaphores_values)</argsstring>
        <name>shWaitForSemaphores</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>semaphore_count</declname>
        </param>
        <param>
          <type>VkSemaphore *</type>
          <declname>p_semaphores</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>wait_for_all</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>timeout_ns</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>p_semaphores_values</declname>
        </param>
        <briefdescription>
<para>Waits for Vulkan semaphores to become signaled. </para>
        </briefdescription>
        <detaileddescription>
<para>This function waits for a specified number of Vulkan semaphores to become signaled.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semaphore_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of semaphores to wait for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_semaphores</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of Vulkan semaphores to wait for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wait_for_all</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to wait for all semaphores to be signaled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_ns</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout in nanoseconds to wait for the semaphores. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_semaphores_values</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to an array of values for each semaphore.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1059" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1059" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a3d82b550f662b158986c904a1c6da096" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shAcquireSwapchainImage</definition>
        <argsstring>(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout_ns, VkSemaphore acquired_signal_semaphore, VkFence acquired_signal_fence, uint32_t *p_swapchain_image_index, uint8_t *p_swapchain_suboptimal)</argsstring>
        <name>shAcquireSwapchainImage</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkSwapchainKHR</type>
          <declname>swapchain</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>timeout_ns</declname>
        </param>
        <param>
          <type>VkSemaphore</type>
          <declname>acquired_signal_semaphore</declname>
        </param>
        <param>
          <type>VkFence</type>
          <declname>acquired_signal_fence</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_swapchain_image_index</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>p_swapchain_suboptimal</declname>
        </param>
        <briefdescription>
<para>Acquires an image from the Vulkan swapchain. </para>
        </briefdescription>
        <detaileddescription>
<para>This function acquires an image from the specified swapchain and optionally signals a semaphore or fence.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>swapchain</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan swapchain from which to acquire an image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_ns</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout in nanoseconds to wait for the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acquired_signal_semaphore</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan semaphore to signal upon acquisition. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acquired_signal_fence</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan fence to signal upon acquisition. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_swapchain_image_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the index of the acquired swapchain image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_swapchain_suboptimal</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to a flag indicating if the swapchain is suboptimal.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1083" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1083" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a5889c0098b69fbc2c3fe5df27c4fddc9" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shBeginRenderpass</definition>
        <argsstring>(VkCommandBuffer graphics_cmd_buffer, VkRenderPass renderpass, int32_t render_offset_x, int32_t render_offset_y, uint32_t render_size_x, uint32_t render_size_y, uint32_t clear_value_count, VkClearValue *p_clear_values, VkFramebuffer framebuffer)</argsstring>
        <name>shBeginRenderpass</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>graphics_cmd_buffer</declname>
        </param>
        <param>
          <type>VkRenderPass</type>
          <declname>renderpass</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>render_offset_x</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>render_offset_y</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>render_size_x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>render_size_y</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>clear_value_count</declname>
        </param>
        <param>
          <type>VkClearValue *</type>
          <declname>p_clear_values</declname>
        </param>
        <param>
          <type>VkFramebuffer</type>
          <declname>framebuffer</declname>
        </param>
        <briefdescription>
<para>Begins a Vulkan render pass. </para>
        </briefdescription>
        <detaileddescription>
<para>This function begins recording commands for a render pass in the specified command buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graphics_cmd_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan command buffer to begin the render pass. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>renderpass</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan render pass to begin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>render_offset_x</parametername>
</parameternamelist>
<parameterdescription>
<para>X offset for the render area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>render_offset_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Y offset for the render area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>render_size_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the render area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>render_size_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of the render area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clear_value_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of clear values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_clear_values</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of Vulkan clear values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>framebuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan framebuffer to use for the render pass.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1110" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1110" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a14f8d9475ccb027ba58437108db87fa4" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shEndRenderpass</definition>
        <argsstring>(VkCommandBuffer graphics_cmd_buffer)</argsstring>
        <name>shEndRenderpass</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>graphics_cmd_buffer</declname>
        </param>
        <briefdescription>
<para>Ends a Vulkan render pass. </para>
        </briefdescription>
        <detaileddescription>
<para>This function ends the recording of commands for a render pass in the specified command buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graphics_cmd_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan command buffer to end the render pass.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1131" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1131" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a24a57e0a73cc90e2a1c099f8042b4ef1" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shDraw</definition>
        <argsstring>(VkCommandBuffer graphics_cmd_buffer, uint32_t vertex_count, uint32_t first_vertex, uint32_t instance_count, uint32_t first_instance)</argsstring>
        <name>shDraw</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>graphics_cmd_buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>vertex_count</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>first_vertex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>instance_count</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>first_instance</declname>
        </param>
        <briefdescription>
<para>Records a draw command into a Vulkan command buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function records a draw command into the specified command buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graphics_cmd_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan command buffer to record the draw command. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of vertices to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first_vertex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the first vertex to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>instance_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of instances to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the first instance to draw.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1148" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1148" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a0b30f274286f7d3f9feeb898a22d9320" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shDrawIndexed</definition>
        <argsstring>(VkCommandBuffer graphics_cmd_buffer, uint32_t index_count, uint32_t instance_count, uint32_t first_index, int32_t vertex_offset, uint32_t first_instance)</argsstring>
        <name>shDrawIndexed</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>graphics_cmd_buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index_count</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>instance_count</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>first_index</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>vertex_offset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>first_instance</declname>
        </param>
        <briefdescription>
<para>Records an indexed draw command into a Vulkan command buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function records an indexed draw command into the specified command buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graphics_cmd_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan command buffer to record the draw command. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of indices to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>instance_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of instances to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the first index to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset added to each index to obtain the vertex index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the first instance to draw.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1170" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1170" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a1ebf776806cb2ee99ab0a86b075da8ac" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shQueuePresentSwapchainImage</definition>
        <argsstring>(VkQueue present_queue, uint32_t semaphores_to_wait_for_count, VkSemaphore *p_semaphores_to_wait_for, VkSwapchainKHR swapchain, uint32_t swapchain_image_idx)</argsstring>
        <name>shQueuePresentSwapchainImage</name>
        <param>
          <type>VkQueue</type>
          <declname>present_queue</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>semaphores_to_wait_for_count</declname>
        </param>
        <param>
          <type>VkSemaphore *</type>
          <declname>p_semaphores_to_wait_for</declname>
        </param>
        <param>
          <type>VkSwapchainKHR</type>
          <declname>swapchain</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>swapchain_image_idx</declname>
        </param>
        <briefdescription>
<para>Presents an image from a Vulkan swapchain to the screen. </para>
        </briefdescription>
        <detaileddescription>
<para>This function presents an image from the specified swapchain using the provided queue.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>present_queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan queue to present the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semaphores_to_wait_for_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of semaphores to wait for before presenting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_semaphores_to_wait_for</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of Vulkan semaphores to wait for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>swapchain</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan swapchain containing the image to present. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>swapchain_image_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the swapchain image to present.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1192" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1192" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a8f8a64418cda82169cdd2978899e1f98" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCreateBuffer</definition>
        <argsstring>(VkDevice device, uint32_t size, VkBufferUsageFlags usage, VkSharingMode sharing_mode, VkBuffer *p_buffer)</argsstring>
        <name>shCreateBuffer</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>VkBufferUsageFlags</type>
          <declname>usage</declname>
        </param>
        <param>
          <type>VkSharingMode</type>
          <declname>sharing_mode</declname>
        </param>
        <param>
          <type>VkBuffer *</type>
          <declname>p_buffer</declname>
        </param>
        <briefdescription>
<para>Creates a Vulkan buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a Vulkan buffer with the specified size and usage.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>usage</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan buffer usage flags indicating how the buffer will be used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sharing_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan sharing mode specifying how the buffer is shared between queues. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the newly created Vulkan buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1241" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1241" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a2a807a098afaf45caff7964250e912f5" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shGetMemoryType</definition>
        <argsstring>(VkDevice device, VkPhysicalDevice physical_device, VkMemoryPropertyFlags property_flags, uint32_t *p_memory_type_index)</argsstring>
        <name>shGetMemoryType</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkPhysicalDevice</type>
          <declname>physical_device</declname>
        </param>
        <param>
          <type>VkMemoryPropertyFlags</type>
          <declname>property_flags</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_memory_type_index</declname>
        </param>
        <briefdescription>
<para>Retrieves the memory type index that supports the specified memory properties. </para>
        </briefdescription>
        <detaileddescription>
<para>This function finds the index of a memory type that matches the specified memory property flags.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>physical_device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan physical device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>property_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan memory property flags to match. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_memory_type_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the index of the memory type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1261" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1261" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1ab059596a5bf5ae02d5063cf821b506e5" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shAllocateBufferMemory</definition>
        <argsstring>(VkDevice device, VkPhysicalDevice physical_device, VkBuffer buffer, VkMemoryPropertyFlags property_flags, VkDeviceMemory *p_memory)</argsstring>
        <name>shAllocateBufferMemory</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkPhysicalDevice</type>
          <declname>physical_device</declname>
        </param>
        <param>
          <type>VkBuffer</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>VkMemoryPropertyFlags</type>
          <declname>property_flags</declname>
        </param>
        <param>
          <type>VkDeviceMemory *</type>
          <declname>p_memory</declname>
        </param>
        <briefdescription>
<para>Allocates memory for a Vulkan buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allocates memory for a specified Vulkan buffer with the desired memory properties.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>physical_device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan physical device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan buffer for which memory is to be allocated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>property_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan memory property flags for the allocated memory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_memory</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the newly allocated Vulkan device memory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1281" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1281" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a88908f30187bab0ff08d3afbc84458cc" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCopyBuffer</definition>
        <argsstring>(VkCommandBuffer transfer_cmd_buffer, VkBuffer src_buffer, uint32_t src_offset, uint32_t dst_offset, uint64_t size, VkBuffer dst_buffer)</argsstring>
        <name>shCopyBuffer</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>transfer_cmd_buffer</declname>
        </param>
        <param>
          <type>VkBuffer</type>
          <declname>src_buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>src_offset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dst_offset</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>VkBuffer</type>
          <declname>dst_buffer</declname>
        </param>
        <briefdescription>
<para>Copies data from one Vulkan buffer to another. </para>
        </briefdescription>
        <detaileddescription>
<para>This function copies data from a source buffer to a destination buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transfer_cmd_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan command buffer for the copy operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan source buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset in the source buffer to start copying from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset in the destination buffer to start copying to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to copy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan destination buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1303" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1303" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a1758a4d7503f4ea20d470d189edb8e3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCopyBufferRegions</definition>
        <argsstring>(VkCommandBuffer transfer_cmd_buffer, VkBuffer src_buffer, uint32_t region_count, uint32_t *p_src_offsets, uint32_t *p_dst_offsets, uint32_t *p_sizes, VkBuffer dst_buffer)</argsstring>
        <name>shCopyBufferRegions</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>transfer_cmd_buffer</declname>
        </param>
        <param>
          <type>VkBuffer</type>
          <declname>src_buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>region_count</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_src_offsets</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_dst_offsets</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_sizes</declname>
        </param>
        <param>
          <type>VkBuffer</type>
          <declname>dst_buffer</declname>
        </param>
        <briefdescription>
<para>Copies multiple regions of data from one Vulkan buffer to another. </para>
        </briefdescription>
        <detaileddescription>
<para>This function copies multiple regions of data from a source buffer to a destination buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transfer_cmd_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan command buffer for the copy operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan source buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>region_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of regions to copy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_src_offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of offsets in the source buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_dst_offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of offsets in the destination buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of sizes for each region to copy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan destination buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1329" column="9" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1329" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1ac3bf1d2ca1b1ce2cf8673df951fb2bf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCopyImage</definition>
        <argsstring>(VkCommandBuffer transfer_cmd_buffer, uint32_t width, uint32_t height, VkImageAspectFlags src_image_aspect, VkImageAspectFlags dst_image_aspect, VkImage src_image, VkImage dst_image)</argsstring>
        <name>shCopyImage</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>transfer_cmd_buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>VkImageAspectFlags</type>
          <declname>src_image_aspect</declname>
        </param>
        <param>
          <type>VkImageAspectFlags</type>
          <declname>dst_image_aspect</declname>
        </param>
        <param>
          <type>VkImage</type>
          <declname>src_image</declname>
        </param>
        <param>
          <type>VkImage</type>
          <declname>dst_image</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1340" column="9" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1340" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1af810507ba72a2201519c71fc1a1f2125" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shBindBufferMemory</definition>
        <argsstring>(VkDevice device, VkBuffer buffer, uint32_t offset, VkDeviceMemory buffer_memory)</argsstring>
        <name>shBindBufferMemory</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkBuffer</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>VkDeviceMemory</type>
          <declname>buffer_memory</declname>
        </param>
        <briefdescription>
<para>Binds a Vulkan buffer to a specified memory offset. </para>
        </briefdescription>
        <detaileddescription>
<para>This function binds a Vulkan buffer to a specific memory offset.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan buffer to bind. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset in the memory where the buffer will be bound. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_memory</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device memory to bind to the buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1362" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1362" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1aa823fb95bcc1b79a23394046e2566d41" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shReadMemory</definition>
        <argsstring>(VkDevice device, VkDeviceMemory memory, uint32_t offset, uint64_t data_size, void **pp_map_data, void *p_dst_data)</argsstring>
        <name>shReadMemory</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkDeviceMemory</type>
          <declname>memory</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>data_size</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>pp_map_data</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_dst_data</declname>
        </param>
        <briefdescription>
<para>Reads data from a Vulkan memory object. </para>
        </briefdescription>
        <detaileddescription>
<para>This function reads data from a specified offset in a Vulkan memory object into a user-provided buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device memory to read from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset in the memory to start reading from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to a buffer to store the read data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1384" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1384" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a1907762caa24a7af9c85a0a511b004f2" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shUnmapMemory</definition>
        <argsstring>(VkDevice device, VkDeviceMemory memory)</argsstring>
        <name>shUnmapMemory</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkDeviceMemory</type>
          <declname>memory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1394" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1394" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a2e99eee8a784324373dac95ff82580bc" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shWriteMemory</definition>
        <argsstring>(VkDevice device, VkDeviceMemory memory, uint32_t offset, uint32_t data_size, void *p_data)</argsstring>
        <name>shWriteMemory</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkDeviceMemory</type>
          <declname>memory</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>data_size</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_data</declname>
        </param>
        <briefdescription>
<para>Writes data to a Vulkan memory object. </para>
        </briefdescription>
        <detaileddescription>
<para>This function writes data from a user-provided buffer to a specified offset in a Vulkan memory object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device memory to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset in the memory to start writing to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to a buffer containing the data to write.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1412" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1412" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1aed51494291a04145494c15eb5531f09d" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shClearBufferMemory</definition>
        <argsstring>(VkDevice device, VkBuffer buffer, VkDeviceMemory memory)</argsstring>
        <name>shClearBufferMemory</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkBuffer</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>VkDeviceMemory</type>
          <declname>memory</declname>
        </param>
        <briefdescription>
<para>Clears memory associated with a Vulkan buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function clears the memory bound to a Vulkan buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device memory bound to the buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1431" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1431" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a94fdd493b11aa6605d0e7d138facf2dd" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCreateImage</definition>
        <argsstring>(VkDevice device, VkImageType type, uint32_t x, uint32_t y, uint32_t z, VkFormat format, uint32_t mip_levels, VkSampleCountFlagBits sample_count, VkImageTiling image_tiling, VkImageUsageFlags usage, VkSharingMode sharing_mode, VkImage *p_image)</argsstring>
        <name>shCreateImage</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkImageType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>z</declname>
        </param>
        <param>
          <type>VkFormat</type>
          <declname>format</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mip_levels</declname>
        </param>
        <param>
          <type>VkSampleCountFlagBits</type>
          <declname>sample_count</declname>
        </param>
        <param>
          <type>VkImageTiling</type>
          <declname>image_tiling</declname>
        </param>
        <param>
          <type>VkImageUsageFlags</type>
          <declname>usage</declname>
        </param>
        <param>
          <type>VkSharingMode</type>
          <declname>sharing_mode</declname>
        </param>
        <param>
          <type>VkImage *</type>
          <declname>p_image</declname>
        </param>
        <briefdescription>
<para>Creates a Vulkan image. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a Vulkan image with the specified parameters.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan image type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Depth of the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan image format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mip_levels</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of mipmap levels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sample_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan sample count flag bits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image_tiling</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan image tiling mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>usage</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan image usage flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sharing_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan sharing mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_image</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the newly created Vulkan image.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1457" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1457" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1ac05cd94a0e91ce7b4cfc81f596b45795" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shAllocateImageMemory</definition>
        <argsstring>(VkDevice device, VkPhysicalDevice physical_device, VkImage image, VkMemoryPropertyFlags memory_property_flags, VkDeviceMemory *p_image_memory)</argsstring>
        <name>shAllocateImageMemory</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkPhysicalDevice</type>
          <declname>physical_device</declname>
        </param>
        <param>
          <type>VkImage</type>
          <declname>image</declname>
        </param>
        <param>
          <type>VkMemoryPropertyFlags</type>
          <declname>memory_property_flags</declname>
        </param>
        <param>
          <type>VkDeviceMemory *</type>
          <declname>p_image_memory</declname>
        </param>
        <briefdescription>
<para>Allocates memory for a Vulkan image. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allocates memory for a specified Vulkan image with the desired memory properties.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>physical_device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan physical device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan image for which memory is to be allocated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_property_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan memory property flags for the allocated memory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_image_memory</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the newly allocated Vulkan device memory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1485" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1485" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a915b19160bec4ae84922a6faad52f53c" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shBindImageMemory</definition>
        <argsstring>(VkDevice device, VkImage image, uint32_t offset, VkDeviceMemory image_memory)</argsstring>
        <name>shBindImageMemory</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkImage</type>
          <declname>image</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>VkDeviceMemory</type>
          <declname>image_memory</declname>
        </param>
        <briefdescription>
<para>Binds a Vulkan image to a specified memory offset. </para>
        </briefdescription>
        <detaileddescription>
<para>This function binds a Vulkan image to a specific memory offset.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan image to bind. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset in the memory where the image will be bound. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image_memory</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device memory to bind to the image.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1505" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1505" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1ad4fdc1d058c2e8566b99c570a8eb8915" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shClearImageMemory</definition>
        <argsstring>(VkDevice device, VkImage image, VkDeviceMemory image_memory)</argsstring>
        <name>shClearImageMemory</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkImage</type>
          <declname>image</declname>
        </param>
        <param>
          <type>VkDeviceMemory</type>
          <declname>image_memory</declname>
        </param>
        <briefdescription>
<para>Clears memory associated with a Vulkan image. </para>
        </briefdescription>
        <detaileddescription>
<para>This function clears the memory bound to a Vulkan image.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image_memory</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device memory bound to the image.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1523" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1523" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a49de1107c7467d37458ba5c127a6d479" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shGetImageSubresourceLayout</definition>
        <argsstring>(VkDevice device, VkImage image, VkImageAspectFlags image_aspect_mask, VkSubresourceLayout *p_subresource_layout)</argsstring>
        <name>shGetImageSubresourceLayout</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkImage</type>
          <declname>image</declname>
        </param>
        <param>
          <type>VkImageAspectFlags</type>
          <declname>image_aspect_mask</declname>
        </param>
        <param>
          <type>VkSubresourceLayout *</type>
          <declname>p_subresource_layout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1530" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1530" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a7526501d7f3603d2cb7b091903e4ef9c" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shSetBufferMemoryBarrier</definition>
        <argsstring>(VkDevice device, VkCommandBuffer cmd_buffer, VkBuffer buffer, VkAccessFlags access_before_barrier, VkAccessFlags access_after_barrier, uint32_t performing_queue_family_index_before_barrier, uint32_t performing_queue_family_index_after_barrier, VkPipelineStageFlags pipeline_stage_before_barrier, VkPipelineStageFlags pipeline_stage_after_barrier)</argsstring>
        <name>shSetBufferMemoryBarrier</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkCommandBuffer</type>
          <declname>cmd_buffer</declname>
        </param>
        <param>
          <type>VkBuffer</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>VkAccessFlags</type>
          <declname>access_before_barrier</declname>
        </param>
        <param>
          <type>VkAccessFlags</type>
          <declname>access_after_barrier</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>performing_queue_family_index_before_barrier</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>performing_queue_family_index_after_barrier</declname>
        </param>
        <param>
          <type>VkPipelineStageFlags</type>
          <declname>pipeline_stage_before_barrier</declname>
        </param>
        <param>
          <type>VkPipelineStageFlags</type>
          <declname>pipeline_stage_after_barrier</declname>
        </param>
        <briefdescription>
<para>Creates a buffer memory barrier. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a buffer memory barrier to synchronize buffer memory access (e.g. read, write, transfer).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan command buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan buffer (target of the barrier). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access_before_barrier</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory access flag before the barrier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access_after_barrier</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory access flag sfter the barrier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>performing_queue_family_index_before_barrier</parametername>
</parameternamelist>
<parameterdescription>
<para>Performing queue family index before the barrier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>performing_queue_family_index_after_barrier</parametername>
</parameternamelist>
<parameterdescription>
<para>Performing queue family index before the barrier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pipeline_stage_before_barrier</parametername>
</parameternamelist>
<parameterdescription>
<para>Pipeline stage flag before the barrier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pipeline_stage_after_barrier</parametername>
</parameternamelist>
<parameterdescription>
<para>Pipeline stage flag after the barrier.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1554" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1554" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a7fd95337f254d38f196f61644502efb4" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shSetImageMemoryBarrier</definition>
        <argsstring>(VkDevice device, VkCommandBuffer cmd_buffer, VkImage image, VkImageAspectFlags image_aspect_mask, VkAccessFlags access_before_barrier, VkAccessFlags access_after_barrier, VkImageLayout image_layout_before_barrier, VkImageLayout image_layout_after_barrier, uint32_t performing_queue_family_index_before_barrier, uint32_t performing_queue_family_index_after_barrier, VkPipelineStageFlags pipeline_stage_before_barrier, VkPipelineStageFlags pipeline_stage_after_barrier)</argsstring>
        <name>shSetImageMemoryBarrier</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkCommandBuffer</type>
          <declname>cmd_buffer</declname>
        </param>
        <param>
          <type>VkImage</type>
          <declname>image</declname>
        </param>
        <param>
          <type>VkImageAspectFlags</type>
          <declname>image_aspect_mask</declname>
        </param>
        <param>
          <type>VkAccessFlags</type>
          <declname>access_before_barrier</declname>
        </param>
        <param>
          <type>VkAccessFlags</type>
          <declname>access_after_barrier</declname>
        </param>
        <param>
          <type>VkImageLayout</type>
          <declname>image_layout_before_barrier</declname>
        </param>
        <param>
          <type>VkImageLayout</type>
          <declname>image_layout_after_barrier</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>performing_queue_family_index_before_barrier</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>performing_queue_family_index_after_barrier</declname>
        </param>
        <param>
          <type>VkPipelineStageFlags</type>
          <declname>pipeline_stage_before_barrier</declname>
        </param>
        <param>
          <type>VkPipelineStageFlags</type>
          <declname>pipeline_stage_after_barrier</declname>
        </param>
        <briefdescription>
<para>Creates an image memory barrier. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates an image memory barrier to synchronize image memory access (e.g. read, write, transfer).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan command buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan image (target of the barrier). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image_aspect_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Target image aspect mask. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access_before_barrier</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory access flag before the barrier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access_after_barrier</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory access flag sfter the barrier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image_layout_before_barrier</parametername>
</parameternamelist>
<parameterdescription>
<para>Image layout before the barrier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image_layout_after_barrier</parametername>
</parameternamelist>
<parameterdescription>
<para>Image layout before the barrier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>performing_queue_family_index_before_barrier</parametername>
</parameternamelist>
<parameterdescription>
<para>Performing queue family index before the barrier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>performing_queue_family_index_after_barrier</parametername>
</parameternamelist>
<parameterdescription>
<para>Performing queue family index before the barrier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pipeline_stage_before_barrier</parametername>
</parameternamelist>
<parameterdescription>
<para>Pipeline stage flag before the barrier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pipeline_stage_after_barrier</parametername>
</parameternamelist>
<parameterdescription>
<para>Pipeline stage flag after the barrier.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1586" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1586" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a7a7a14e234bf694e7c36e180f87bef56" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shGetMemoryBudgetProperties</definition>
        <argsstring>(VkPhysicalDevice physical_device, VkPhysicalDeviceMemoryBudgetPropertiesEXT *p_memory_budget_properties)</argsstring>
        <name>shGetMemoryBudgetProperties</name>
        <param>
          <type>VkPhysicalDevice</type>
          <declname>physical_device</declname>
        </param>
        <param>
          <type>VkPhysicalDeviceMemoryBudgetPropertiesEXT *</type>
          <declname>p_memory_budget_properties</declname>
        </param>
        <briefdescription>
<para>Retrieves memory budget properties for a Vulkan physical device. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves memory budget properties for a Vulkan physical device.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>physical_device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan physical device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_memory_budget_properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to Vulkan memory budget properties.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1611" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1611" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a745c59da40b16dd65f5758131b0f9c93" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shBindVertexBuffers</definition>
        <argsstring>(VkCommandBuffer graphics_cmd_buffer, uint32_t first_binding, uint32_t binding_count, VkBuffer *p_vertex_buffers, VkDeviceSize *p_vertex_offsets)</argsstring>
        <name>shBindVertexBuffers</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>graphics_cmd_buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>first_binding</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>binding_count</declname>
        </param>
        <param>
          <type>VkBuffer *</type>
          <declname>p_vertex_buffers</declname>
        </param>
        <param>
          <type>VkDeviceSize *</type>
          <declname>p_vertex_offsets</declname>
        </param>
        <briefdescription>
<para>Binds vertex buffers to a Vulkan command buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function binds one or more vertex buffers to a Vulkan command buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graphics_cmd_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan command buffer to bind vertex buffers to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first_binding</parametername>
</parameternamelist>
<parameterdescription>
<para>Binding index to start from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>binding_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of vertex buffers to bind. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_vertex_buffers</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of Vulkan vertex buffers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_vertex_offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of offsets for each vertex buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1629" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1629" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a3165c83fc15953d791d54657e409ecbe" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shBindIndexBuffer</definition>
        <argsstring>(VkCommandBuffer graphics_cmd_buffer, uint32_t index_offset, VkBuffer index_buffer)</argsstring>
        <name>shBindIndexBuffer</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>graphics_cmd_buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index_offset</declname>
        </param>
        <param>
          <type>VkBuffer</type>
          <declname>index_buffer</declname>
        </param>
        <briefdescription>
<para>Binds an index buffer to a Vulkan command buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function binds an index buffer to a Vulkan command buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graphics_cmd_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan command buffer to bind the index buffer to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset in the index buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan index buffer to bind.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1648" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1648" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a8dea157965ef7c15756861378f365a32" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shSetVertexBinding</definition>
        <argsstring>(uint32_t binding, uint32_t size, VkVertexInputRate input_rate, VkVertexInputBindingDescription *p_vertex_input_binding)</argsstring>
        <name>shSetVertexBinding</name>
        <param>
          <type>uint32_t</type>
          <declname>binding</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>VkVertexInputRate</type>
          <declname>input_rate</declname>
        </param>
        <param>
          <type>VkVertexInputBindingDescription *</type>
          <declname>p_vertex_input_binding</declname>
        </param>
        <briefdescription>
<para>Sets the vertex input binding description. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the vertex input binding description with the specified parameters.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>binding</parametername>
</parameternamelist>
<parameterdescription>
<para>Binding index for the vertex input binding. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the vertex buffer in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Vertex input rate (e.g., per vertex or per instance). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_vertex_input_binding</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the Vulkan vertex input binding description.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1666" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1666" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a0e42de138dec02dde8a7d4ed461f1ddd" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shSetVertexAttribute</definition>
        <argsstring>(uint32_t location, uint32_t binding, VkFormat format, uint32_t offset, VkVertexInputAttributeDescription *p_vertex_input_attribute)</argsstring>
        <name>shSetVertexAttribute</name>
        <param>
          <type>uint32_t</type>
          <declname>location</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>binding</declname>
        </param>
        <param>
          <type>VkFormat</type>
          <declname>format</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>VkVertexInputAttributeDescription *</type>
          <declname>p_vertex_input_attribute</declname>
        </param>
        <briefdescription>
<para>Sets the vertex attribute description. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the vertex attribute description with the specified parameters.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>location</parametername>
</parameternamelist>
<parameterdescription>
<para>Location of the vertex attribute. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>binding</parametername>
</parameternamelist>
<parameterdescription>
<para>Binding index of the vertex attribute. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan format of the vertex attribute. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset in the vertex buffer where the attribute starts. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_vertex_input_attribute</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the Vulkan vertex input attribute description.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1686" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1686" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1afd3c6410a22fbd6e6d4f70cc6e26cc88" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shSetVertexInputState</definition>
        <argsstring>(uint32_t vertex_binding_count, VkVertexInputBindingDescription *p_vertex_bindings, uint32_t vertex_attribute_count, VkVertexInputAttributeDescription *p_vertex_attributes, VkPipelineVertexInputStateCreateInfo *p_vertex_input_state)</argsstring>
        <name>shSetVertexInputState</name>
        <param>
          <type>uint32_t</type>
          <declname>vertex_binding_count</declname>
        </param>
        <param>
          <type>VkVertexInputBindingDescription *</type>
          <declname>p_vertex_bindings</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>vertex_attribute_count</declname>
        </param>
        <param>
          <type>VkVertexInputAttributeDescription *</type>
          <declname>p_vertex_attributes</declname>
        </param>
        <param>
          <type>VkPipelineVertexInputStateCreateInfo *</type>
          <declname>p_vertex_input_state</declname>
        </param>
        <briefdescription>
<para>Sets the vertex input state for a pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the vertex input state, including bindings and attributes, for a Vulkan pipeline.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vertex_binding_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of vertex input bindings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_vertex_bindings</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of Vulkan vertex input binding descriptions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_attribute_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of vertex input attributes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_vertex_attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of Vulkan vertex input attribute descriptions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_vertex_input_state</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the Vulkan pipeline vertex input state create info.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1707" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1707" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1abc592ad965aba075719deba78df655f2" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCreateInputAssembly</definition>
        <argsstring>(VkPrimitiveTopology primitive_topology, VkBool32 primitive_restart_enable, VkPipelineInputAssemblyStateCreateInfo *p_input_assembly)</argsstring>
        <name>shCreateInputAssembly</name>
        <param>
          <type>VkPrimitiveTopology</type>
          <declname>primitive_topology</declname>
        </param>
        <param>
          <type>VkBool32</type>
          <declname>primitive_restart_enable</declname>
        </param>
        <param>
          <type>VkPipelineInputAssemblyStateCreateInfo *</type>
          <declname>p_input_assembly</declname>
        </param>
        <briefdescription>
<para>Creates the input assembly state for a pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates the input assembly state with the specified topology and restart enable flag.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>primitive_topology</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan primitive topology type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primitive_restart_enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag to enable or disable primitive restart. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_input_assembly</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the Vulkan pipeline input assembly state create info.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1726" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1726" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a4a26ddd78725c18aa6ebe67e499dae93" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCreateRasterizer</definition>
        <argsstring>(VkPolygonMode polygon_mode, VkCullModeFlagBits cull_mode, VkPipelineRasterizationStateCreateInfo *p_rasterizer)</argsstring>
        <name>shCreateRasterizer</name>
        <param>
          <type>VkPolygonMode</type>
          <declname>polygon_mode</declname>
        </param>
        <param>
          <type>VkCullModeFlagBits</type>
          <declname>cull_mode</declname>
        </param>
        <param>
          <type>VkPipelineRasterizationStateCreateInfo *</type>
          <declname>p_rasterizer</declname>
        </param>
        <briefdescription>
<para>Creates the rasterization state for a pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates the rasterization state with the specified polygon mode and cull mode.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan polygon mode for rasterization. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cull_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan cull mode flag bits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rasterizer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the Vulkan pipeline rasterization state create info.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1743" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1743" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a8a64121d076fb62d995e3c5255490a0c" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shSetMultisampleState</definition>
        <argsstring>(VkSampleCountFlagBits sample_count, float min_sample_shading_size, VkPipelineMultisampleStateCreateInfo *p_multisample_state)</argsstring>
        <name>shSetMultisampleState</name>
        <param>
          <type>VkSampleCountFlagBits</type>
          <declname>sample_count</declname>
        </param>
        <param>
          <type>float</type>
          <declname>min_sample_shading_size</declname>
        </param>
        <param>
          <type>VkPipelineMultisampleStateCreateInfo *</type>
          <declname>p_multisample_state</declname>
        </param>
        <briefdescription>
<para>Sets the multisample state for a pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the multisample state, including sample count and minimum sample shading, for a Vulkan pipeline.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sample_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan sample count flag bits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_sample_shading_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum sample shading size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_multisample_state</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the Vulkan pipeline multisample state create info.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1760" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1760" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a81ecc375fe999c39151dcf33c7e08bc5" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shSetViewport</definition>
        <argsstring>(uint32_t viewport_pos_x, uint32_t viewport_pos_y, uint32_t viewport_width, uint32_t viewport_height, VkViewport *p_viewport, uint32_t scissors_pos_x, uint32_t scissors_pos_y, uint32_t scissors_width, uint32_t scissors_height, VkRect2D *p_scissors, VkPipelineViewportStateCreateInfo *p_viewport_state)</argsstring>
        <name>shSetViewport</name>
        <param>
          <type>uint32_t</type>
          <declname>viewport_pos_x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>viewport_pos_y</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>viewport_width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>viewport_height</declname>
        </param>
        <param>
          <type>VkViewport *</type>
          <declname>p_viewport</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>scissors_pos_x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>scissors_pos_y</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>scissors_width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>scissors_height</declname>
        </param>
        <param>
          <type>VkRect2D *</type>
          <declname>p_scissors</declname>
        </param>
        <param>
          <type>VkPipelineViewportStateCreateInfo *</type>
          <declname>p_viewport_state</declname>
        </param>
        <briefdescription>
<para>Sets the viewport and scissor state for a pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the viewport and scissor parameters for a Vulkan pipeline.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>viewport_pos_x</parametername>
</parameternamelist>
<parameterdescription>
<para>X position of the viewport. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viewport_pos_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Y position of the viewport. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viewport_width</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the viewport. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viewport_height</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of the viewport. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_viewport</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the Vulkan viewport. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scissors_pos_x</parametername>
</parameternamelist>
<parameterdescription>
<para>X position of the scissor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scissors_pos_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Y position of the scissor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scissors_width</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the scissor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scissors_height</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of the scissor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_scissors</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the Vulkan scissor rectangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_viewport_state</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the Vulkan pipeline viewport state create info.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1785" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1785" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1add573bacc9913a1f3f3ec051847be17f" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shColorBlendSettings</definition>
        <argsstring>(uint8_t enable_color_blending, uint8_t enable_alpha_blending, uint32_t subpass_color_attachment_count, VkPipelineColorBlendAttachmentState *p_color_blend_attachment_states, VkPipelineColorBlendStateCreateInfo *p_color_blend_state)</argsstring>
        <name>shColorBlendSettings</name>
        <param>
          <type>uint8_t</type>
          <declname>enable_color_blending</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>enable_alpha_blending</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>subpass_color_attachment_count</declname>
        </param>
        <param>
          <type>VkPipelineColorBlendAttachmentState *</type>
          <declname>p_color_blend_attachment_states</declname>
        </param>
        <param>
          <type>VkPipelineColorBlendStateCreateInfo *</type>
          <declname>p_color_blend_state</declname>
        </param>
        <briefdescription>
<para>Configures color blending and alpha blending states. </para>
        </briefdescription>
        <detaileddescription>
<para>This function configures the color blending and alpha blending states for a Vulkan pipeline.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable_color_blending</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag to enable or disable color blending. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable_alpha_blending</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag to enable or disable alpha blending. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subpass_color_attachment_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of color attachments in the subpass. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_color_blend_attachment_states</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of Vulkan color blend attachment states. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_color_blend_state</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the Vulkan pipeline color blend state create info.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1812" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1812" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1ab476e60d13e9dc556c9f3731e08b0f2b" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCreateShaderModule</definition>
        <argsstring>(VkDevice device, uint32_t size, char *code, VkShaderModule *p_shader_module)</argsstring>
        <name>shCreateShaderModule</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>code</declname>
        </param>
        <param>
          <type>VkShaderModule *</type>
          <declname>p_shader_module</declname>
        </param>
        <briefdescription>
<para>Creates a Vulkan shader module. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a shader module from the provided shader code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the shader code in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shader code. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_shader_module</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the newly created Vulkan shader module.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1832" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1832" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a8b60f182c3ba1ef5aebfc5bb94e6b092" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCreateShaderStage</definition>
        <argsstring>(VkShaderModule shader_module, VkShaderStageFlags shader_stage_flag, VkPipelineShaderStageCreateInfo *p_shader_stage)</argsstring>
        <name>shCreateShaderStage</name>
        <param>
          <type>VkShaderModule</type>
          <declname>shader_module</declname>
        </param>
        <param>
          <type>VkShaderStageFlags</type>
          <declname>shader_stage_flag</declname>
        </param>
        <param>
          <type>VkPipelineShaderStageCreateInfo *</type>
          <declname>p_shader_stage</declname>
        </param>
        <briefdescription>
<para>Creates a Vulkan shader stage. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a shader stage using the provided shader module and stage flag.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shader_module</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan shader module. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shader_stage_flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan shader stage flag (e.g., vertex, fragment). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_shader_stage</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the Vulkan pipeline shader stage create info.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1850" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1850" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a37c2f43e5d40ef599a5191b41731c1fe" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shSetPushConstants</definition>
        <argsstring>(VkShaderStageFlags shader_stage, uint32_t offset, uint32_t size, VkPushConstantRange *p_push_constant_range)</argsstring>
        <name>shSetPushConstants</name>
        <param>
          <type>VkShaderStageFlags</type>
          <declname>shader_stage</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>VkPushConstantRange *</type>
          <declname>p_push_constant_range</declname>
        </param>
        <briefdescription>
<para>Sets push constants for a shader stage. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets push constants for a specified shader stage.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shader_stage</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan shader stage flags (e.g., vertex, fragment). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset in bytes from the start of the push constant range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the push constants in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_push_constant_range</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the Vulkan push constant range.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1868" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1868" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a2db25bc95c340c14063103bd71c831e5" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCreateDescriptorSetLayoutBinding</definition>
        <argsstring>(uint32_t binding, VkDescriptorType descriptor_type, uint32_t descriptor_set_count, VkShaderStageFlags shader_stage, VkDescriptorSetLayoutBinding *p_binding)</argsstring>
        <name>shCreateDescriptorSetLayoutBinding</name>
        <param>
          <type>uint32_t</type>
          <declname>binding</declname>
        </param>
        <param>
          <type>VkDescriptorType</type>
          <declname>descriptor_type</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>descriptor_set_count</declname>
        </param>
        <param>
          <type>VkShaderStageFlags</type>
          <declname>shader_stage</declname>
        </param>
        <param>
          <type>VkDescriptorSetLayoutBinding *</type>
          <declname>p_binding</declname>
        </param>
        <briefdescription>
<para>Creates a descriptor set layout binding. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a descriptor set layout binding with the specified parameters.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>binding</parametername>
</parameternamelist>
<parameterdescription>
<para>Binding index for the descriptor set layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptor_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan descriptor type (e.g., uniform buffer, sampled image). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptor_set_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of descriptors in the set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shader_stage</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan shader stage flags that use this descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_binding</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the Vulkan descriptor set layout binding.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1888" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1888" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1afb91ea9f9819414ce5f3af63c76e5039" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCreateDescriptorSetLayout</definition>
        <argsstring>(VkDevice device, uint32_t binding_count, VkDescriptorSetLayoutBinding *p_bindings, VkDescriptorSetLayout *p_descriptor_set_layout)</argsstring>
        <name>shCreateDescriptorSetLayout</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>binding_count</declname>
        </param>
        <param>
          <type>VkDescriptorSetLayoutBinding *</type>
          <declname>p_bindings</declname>
        </param>
        <param>
          <type>VkDescriptorSetLayout *</type>
          <declname>p_descriptor_set_layout</declname>
        </param>
        <briefdescription>
<para>Creates a descriptor set layout. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a descriptor set layout with the specified bindings.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>binding_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of descriptor set layout bindings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_bindings</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of Vulkan descriptor set layout bindings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_descriptor_set_layout</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the newly created Vulkan descriptor set layout.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1908" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1908" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a1c2c35ec1695abf9f1269fda64b15f67" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCreateDescriptorPool</definition>
        <argsstring>(VkDevice device, uint32_t pool_size_count, VkDescriptorPoolSize *p_pool_sizes, VkDescriptorPool *p_descriptor_pool)</argsstring>
        <name>shCreateDescriptorPool</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pool_size_count</declname>
        </param>
        <param>
          <type>VkDescriptorPoolSize *</type>
          <declname>p_pool_sizes</declname>
        </param>
        <param>
          <type>VkDescriptorPool *</type>
          <declname>p_descriptor_pool</declname>
        </param>
        <briefdescription>
<para>Creates a descriptor pool. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a descriptor pool with the specified pool sizes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool_size_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of pool sizes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pool_sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of Vulkan descriptor pool sizes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_descriptor_pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the newly created Vulkan descriptor pool.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1927" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1927" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a30575079b2b0f495e5b9723769d5f400" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shSetDescriptorBufferInfo</definition>
        <argsstring>(VkBuffer buffer, uint32_t buffer_offset, uint32_t buffer_size, VkDescriptorBufferInfo *p_buffer_info)</argsstring>
        <name>shSetDescriptorBufferInfo</name>
        <param>
          <type>VkBuffer</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buffer_offset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buffer_size</declname>
        </param>
        <param>
          <type>VkDescriptorBufferInfo *</type>
          <declname>p_buffer_info</declname>
        </param>
        <briefdescription>
<para>Sets buffer information for a descriptor buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets buffer information for a descriptor buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset in the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_buffer_info</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the Vulkan descriptor buffer info.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1946" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1946" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a6473b6e9dbfd903423d3123ecd99a368" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shAllocateDescriptorSetUnits</definition>
        <argsstring>(VkDevice device, VkDescriptorPool descriptor_pool, VkDescriptorType descriptor_type, uint32_t binding, uint32_t descriptor_set_unit_count, VkDescriptorSetLayout *p_descriptor_set_layouts, VkDescriptorSet *p_descriptor_sets, VkDescriptorBufferInfo *p_buffer_infos, VkWriteDescriptorSet *p_write_descriptor_sets)</argsstring>
        <name>shAllocateDescriptorSetUnits</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkDescriptorPool</type>
          <declname>descriptor_pool</declname>
        </param>
        <param>
          <type>VkDescriptorType</type>
          <declname>descriptor_type</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>binding</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>descriptor_set_unit_count</declname>
        </param>
        <param>
          <type>VkDescriptorSetLayout *</type>
          <declname>p_descriptor_set_layouts</declname>
        </param>
        <param>
          <type>VkDescriptorSet *</type>
          <declname>p_descriptor_sets</declname>
        </param>
        <param>
          <type>VkDescriptorBufferInfo *</type>
          <declname>p_buffer_infos</declname>
        </param>
        <param>
          <type>VkWriteDescriptorSet *</type>
          <declname>p_write_descriptor_sets</declname>
        </param>
        <briefdescription>
<para>Allocates descriptor sets from a descriptor pool. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allocates descriptor sets of the specified type from the given descriptor pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptor_pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan descriptor pool from which to allocate descriptor sets. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptor_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan descriptor type (e.g., uniform buffer, sampled image). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>binding</parametername>
</parameternamelist>
<parameterdescription>
<para>Binding index for the descriptor sets. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptor_set_unit_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of descriptor sets to allocate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_descriptor_set_layouts</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of Vulkan descriptor set layouts. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_descriptor_sets</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to an array of Vulkan descriptor sets. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_buffer_infos</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of Vulkan descriptor buffer info structures. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_write_descriptor_sets</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of Vulkan write descriptor set structures.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1970" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1970" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a6ecd476f729741cf79f4717faaf254fd" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shCreatePipelineLayout</definition>
        <argsstring>(VkDevice device, uint32_t push_constant_range_count, VkPushConstantRange *p_push_constants_range, uint32_t src_descriptor_set_layout_count, VkDescriptorSetLayout *p_src_descriptor_set_layouts, VkPipelineLayout *p_pipeline_layout)</argsstring>
        <name>shCreatePipelineLayout</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>push_constant_range_count</declname>
        </param>
        <param>
          <type>VkPushConstantRange *</type>
          <declname>p_push_constants_range</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>src_descriptor_set_layout_count</declname>
        </param>
        <param>
          <type>VkDescriptorSetLayout *</type>
          <declname>p_src_descriptor_set_layouts</declname>
        </param>
        <param>
          <type>VkPipelineLayout *</type>
          <declname>p_pipeline_layout</declname>
        </param>
        <briefdescription>
<para>Creates a pipeline layout. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a Vulkan pipeline layout with the specified push constant ranges and descriptor set layouts.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>push_constant_range_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of push constant ranges. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_push_constants_range</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of Vulkan push constant ranges. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_descriptor_set_layout_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of descriptor set layouts. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_src_descriptor_set_layouts</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to an array of Vulkan descriptor set layouts. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pipeline_layout</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the newly created Vulkan pipeline layout.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="1996" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="1996" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1aacca6c63e8d9eca4f1b614dcddfe1175" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shDestroyDescriptorPool</definition>
        <argsstring>(VkDevice device, VkDescriptorPool descriptor_pool)</argsstring>
        <name>shDestroyDescriptorPool</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkDescriptorPool</type>
          <declname>descriptor_pool</declname>
        </param>
        <briefdescription>
<para>Destroys a Vulkan descriptor pool. </para>
        </briefdescription>
        <detaileddescription>
<para>This function destroys the specified Vulkan descriptor pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptor_pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan descriptor pool to destroy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2015" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2015" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a0daea4207984dc19a6b543434bd7c914" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shDestroyDescriptorSetLayout</definition>
        <argsstring>(VkDevice device, VkDescriptorSetLayout descriptor_set_layout)</argsstring>
        <name>shDestroyDescriptorSetLayout</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkDescriptorSetLayout</type>
          <declname>descriptor_set_layout</declname>
        </param>
        <briefdescription>
<para>Destroys a Vulkan descriptor set layout. </para>
        </briefdescription>
        <detaileddescription>
<para>This function destroys the specified Vulkan descriptor set layout.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptor_set_layout</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan descriptor set layout to destroy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2030" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2030" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1aa06684f677c30ac2cf9ec0b3fdf01141" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shDestroyShaderModule</definition>
        <argsstring>(VkDevice device, VkShaderModule shader_module)</argsstring>
        <name>shDestroyShaderModule</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkShaderModule</type>
          <declname>shader_module</declname>
        </param>
        <briefdescription>
<para>Destroys a Vulkan shader module. </para>
        </briefdescription>
        <detaileddescription>
<para>This function destroys the specified Vulkan shader module.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shader_module</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan shader module to destroy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2045" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2045" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a9cafdf7d71914ed332e3f924fa8859dd" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shDestroyPipelineLayout</definition>
        <argsstring>(VkDevice device, VkPipelineLayout pipeline_layout)</argsstring>
        <name>shDestroyPipelineLayout</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkPipelineLayout</type>
          <declname>pipeline_layout</declname>
        </param>
        <briefdescription>
<para>Destroys a Vulkan pipeline layout. </para>
        </briefdescription>
        <detaileddescription>
<para>This function destroys the specified Vulkan pipeline layout.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pipeline_layout</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan pipeline layout to destroy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2060" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2060" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1aad21ff1c031b22232fa2c0144c09ec23" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shDestroyPipeline</definition>
        <argsstring>(VkDevice device, VkPipeline pipeline)</argsstring>
        <name>shDestroyPipeline</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkPipeline</type>
          <declname>pipeline</declname>
        </param>
        <briefdescription>
<para>Destroys a Vulkan pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>This function destroys the specified Vulkan pipeline.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan pipeline to destroy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2075" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2075" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1accfddf1bd263be71d7c1443e8fccb46d" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shClearPipeline</definition>
        <argsstring>(ShVkPipeline *p_pipeline)</argsstring>
        <name>shClearPipeline</name>
        <param>
          <type><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> *</type>
          <declname>p_pipeline</declname>
        </param>
        <briefdescription>
<para>Clears the pipeline structure. </para>
        </briefdescription>
        <detaileddescription>
<para>This function resets all fields of the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure to their default values.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure to be cleared.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2141" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2141" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a03ada39e7867acde1679ce5539217748" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelineSetVertexBinding</definition>
        <argsstring>(uint32_t binding, uint32_t size, VkVertexInputRate input_rate, ShVkPipeline *p_pipeline)</argsstring>
        <name>shPipelineSetVertexBinding</name>
        <param>
          <type>uint32_t</type>
          <declname>binding</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>VkVertexInputRate</type>
          <declname>input_rate</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> *</type>
          <declname>p_pipeline</declname>
        </param>
        <briefdescription>
<para>Sets vertex binding information in the pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the vertex binding description for a specific binding index in the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>binding</parametername>
</parameternamelist>
<parameterdescription>
<para>Binding index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the vertex binding. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Vertex input rate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure to update.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2157" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2157" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1ae90245e6e6ff5b8b4863823baa989669" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelineSetVertexAttribute</definition>
        <argsstring>(uint32_t location, uint32_t binding, VkFormat format, uint32_t offset, ShVkPipeline *p_pipeline)</argsstring>
        <name>shPipelineSetVertexAttribute</name>
        <param>
          <type>uint32_t</type>
          <declname>location</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>binding</declname>
        </param>
        <param>
          <type>VkFormat</type>
          <declname>format</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> *</type>
          <declname>p_pipeline</declname>
        </param>
        <briefdescription>
<para>Sets vertex attribute information in the pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the vertex attribute description for a specific location in the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>location</parametername>
</parameternamelist>
<parameterdescription>
<para>Location index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>binding</parametername>
</parameternamelist>
<parameterdescription>
<para>Binding index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Vertex attribute format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset of the vertex attribute. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure to update.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2177" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2177" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a969ece0688800efffd597ff7516d3c7b" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelineSetVertexInputState</definition>
        <argsstring>(ShVkPipeline *p_pipeline)</argsstring>
        <name>shPipelineSetVertexInputState</name>
        <param>
          <type><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> *</type>
          <declname>p_pipeline</declname>
        </param>
        <briefdescription>
<para>Sets vertex input state information in the pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the vertex input state information in the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure to update.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2194" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2194" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a2dced04d99a306fb094c16394fdb3681" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelineCreateInputAssembly</definition>
        <argsstring>(VkPrimitiveTopology primitive_topology, VkBool32 primitive_restart_enable, ShVkPipeline *p_pipeline)</argsstring>
        <name>shPipelineCreateInputAssembly</name>
        <param>
          <type>VkPrimitiveTopology</type>
          <declname>primitive_topology</declname>
        </param>
        <param>
          <type>VkBool32</type>
          <declname>primitive_restart_enable</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> *</type>
          <declname>p_pipeline</declname>
        </param>
        <briefdescription>
<para>Creates input assembly state information for the pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the input assembly state information in the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>primitive_topology</parametername>
</parameternamelist>
<parameterdescription>
<para>Primitive topology used in the input assembly. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primitive_restart_enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating if primitive restart is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure to update.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2209" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2209" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1ab10ea59844b6c8721f338d08ee00d904" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelineCreateRasterizer</definition>
        <argsstring>(VkPolygonMode polygon_mode, VkCullModeFlagBits cull_mode, ShVkPipeline *p_pipeline)</argsstring>
        <name>shPipelineCreateRasterizer</name>
        <param>
          <type>VkPolygonMode</type>
          <declname>polygon_mode</declname>
        </param>
        <param>
          <type>VkCullModeFlagBits</type>
          <declname>cull_mode</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> *</type>
          <declname>p_pipeline</declname>
        </param>
        <briefdescription>
<para>Creates rasterizer state information for the pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the rasterizer state information in the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Polygon mode used in rasterization. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cull_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Culling mode used in rasterization. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure to update.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2226" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2226" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1ad434628a85b50f5d67dfafec0d396716" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelineSetMultisampleState</definition>
        <argsstring>(VkSampleCountFlagBits sample_count, float min_sample_shading_size, ShVkPipeline *p_pipeline)</argsstring>
        <name>shPipelineSetMultisampleState</name>
        <param>
          <type>VkSampleCountFlagBits</type>
          <declname>sample_count</declname>
        </param>
        <param>
          <type>float</type>
          <declname>min_sample_shading_size</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> *</type>
          <declname>p_pipeline</declname>
        </param>
        <briefdescription>
<para>Sets multisample state information in the pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the multisample state information in the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sample_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of samples used in multisampling. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_sample_shading_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum sample shading size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure to update.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2243" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2243" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a26da8e1e1cf3811793e575adfb6d4c65" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelineSetViewport</definition>
        <argsstring>(uint32_t viewport_pos_x, uint32_t viewport_pos_y, uint32_t viewport_width, uint32_t viewport_height, uint32_t scissors_pos_x, uint32_t scissors_pos_y, uint32_t scissors_width, uint32_t scissors_height, ShVkPipeline *p_pipeline)</argsstring>
        <name>shPipelineSetViewport</name>
        <param>
          <type>uint32_t</type>
          <declname>viewport_pos_x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>viewport_pos_y</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>viewport_width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>viewport_height</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>scissors_pos_x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>scissors_pos_y</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>scissors_width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>scissors_height</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> *</type>
          <declname>p_pipeline</declname>
        </param>
        <briefdescription>
<para>Sets viewport and scissor information in the pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the viewport and scissor information in the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>viewport_pos_x</parametername>
</parameternamelist>
<parameterdescription>
<para>X position of the viewport. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viewport_pos_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Y position of the viewport. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viewport_width</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the viewport. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viewport_height</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of the viewport. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scissors_pos_x</parametername>
</parameternamelist>
<parameterdescription>
<para>X position of the scissors rectangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scissors_pos_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Y position of the scissors rectangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scissors_width</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the scissors rectangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scissors_height</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of the scissors rectangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure to update.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2266" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2266" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a2a91f52a5861799e19e633b407c595de" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelineColorBlendSettings</definition>
        <argsstring>(uint8_t enable_color_blending, uint8_t enable_alpha_blending, uint32_t subpass_color_attachment_count, ShVkPipeline *p_pipeline)</argsstring>
        <name>shPipelineColorBlendSettings</name>
        <param>
          <type>uint8_t</type>
          <declname>enable_color_blending</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>enable_alpha_blending</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>subpass_color_attachment_count</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> *</type>
          <declname>p_pipeline</declname>
        </param>
        <briefdescription>
<para>Configures color blending settings in the pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets color blending and alpha blending settings in the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable_color_blending</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating if color blending is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable_alpha_blending</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating if alpha blending is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subpass_color_attachment_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of color attachments for the subpass. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure to update.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2290" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2290" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a40c30c864957c9a6db42cdf33a8c713d" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelineCreateShaderModule</definition>
        <argsstring>(VkDevice device, uint32_t size, char *code, ShVkPipeline *p_pipeline)</argsstring>
        <name>shPipelineCreateShaderModule</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>code</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> *</type>
          <declname>p_pipeline</declname>
        </param>
        <briefdescription>
<para>Creates a shader module and adds it to the pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a Vulkan shader module and updates the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the shader code. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shader code. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure to update.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2309" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2309" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a16517098e1929c8c9aed82a32215e59f" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelineCreateShaderStage</definition>
        <argsstring>(VkShaderStageFlags shader_stage, ShVkPipeline *p_pipeline)</argsstring>
        <name>shPipelineCreateShaderStage</name>
        <param>
          <type>VkShaderStageFlags</type>
          <declname>shader_stage</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> *</type>
          <declname>p_pipeline</declname>
        </param>
        <briefdescription>
<para>Creates a shader stage and adds it to the pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a Vulkan shader stage and updates the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shader_stage</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan shader stage flags (e.g., vertex, fragment). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure to update.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2326" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2326" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a2d54f31a8d660c249ad8aaf6dc9387a9" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelineSetPushConstants</definition>
        <argsstring>(VkShaderStageFlags shader_stage, uint32_t offset, uint32_t size, ShVkPipeline *p_pipeline)</argsstring>
        <name>shPipelineSetPushConstants</name>
        <param>
          <type>VkShaderStageFlags</type>
          <declname>shader_stage</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> *</type>
          <declname>p_pipeline</declname>
        </param>
        <briefdescription>
<para>Sets push constants in the pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the push constant range for a specific shader stage in the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shader_stage</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan shader stage flags (e.g., vertex, fragment). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset of the push constants. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the push constants. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure to update.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2343" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2343" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a58630d16e24d088a665b11dafb24b580" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelineCreateLayout</definition>
        <argsstring>(VkDevice device, uint32_t first_descriptor_set_layout, uint32_t descriptor_set_layout_count, ShVkPipelinePool *p_pipeline_pool, ShVkPipeline *p_pipeline)</argsstring>
        <name>shPipelineCreateLayout</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>first_descriptor_set_layout</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>descriptor_set_layout_count</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> *</type>
          <declname>p_pipeline_pool</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> *</type>
          <declname>p_pipeline</declname>
        </param>
        <briefdescription>
<para>Creates a pipeline layout and updates the pipeline structure. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a Vulkan pipeline layout using the specified descriptor set layouts and updates the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first_descriptor_set_layout</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the first descriptor set layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptor_set_layout_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of descriptor set layouts. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pipeline_pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to the <ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure to update.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2363" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2363" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a2def89aedf1649c0101e6e0bd222cc9f" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shSetupComputePipeline</definition>
        <argsstring>(VkDevice device, ShVkPipeline *p_pipeline)</argsstring>
        <name>shSetupComputePipeline</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> *</type>
          <declname>p_pipeline</declname>
        </param>
        <briefdescription>
<para>Sets up a compute pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets up a Vulkan compute pipeline using the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure to setup.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2381" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2381" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a06203a29c7b28da913af4c6fc007135a" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shSetupGraphicsPipeline</definition>
        <argsstring>(VkDevice device, VkRenderPass render_pass, ShVkPipeline *p_pipeline)</argsstring>
        <name>shSetupGraphicsPipeline</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkRenderPass</type>
          <declname>render_pass</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> *</type>
          <declname>p_pipeline</declname>
        </param>
        <briefdescription>
<para>Sets up a graphics pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets up a Vulkan graphics pipeline using the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure and the specified render pass.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>render_pass</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan render pass. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure to setup.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2397" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2397" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a25a42e29b5ccc4c171f14ea43686c06c" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelinePushConstants</definition>
        <argsstring>(VkCommandBuffer cmd_buffer, void *p_data, ShVkPipeline *p_pipeline)</argsstring>
        <name>shPipelinePushConstants</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>cmd_buffer</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> *</type>
          <declname>p_pipeline</declname>
        </param>
        <briefdescription>
<para>Pushes constants to a pipeline using the command buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function updates the push constants for a pipeline within a command buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan command buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be pushed to the constants. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure containing push constants information.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2414" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2414" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1ab50dff5db70f602423d2f2ac4f3b69f6" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shBindPipeline</definition>
        <argsstring>(VkCommandBuffer cmd_buffer, VkPipelineBindPoint bind_point, ShVkPipeline *p_pipeline)</argsstring>
        <name>shBindPipeline</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>cmd_buffer</declname>
        </param>
        <param>
          <type>VkPipelineBindPoint</type>
          <declname>bind_point</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> *</type>
          <declname>p_pipeline</declname>
        </param>
        <briefdescription>
<para>Binds a pipeline to a command buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function binds a pipeline (graphics or compute) to the command buffer for subsequent commands.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan command buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bind_point</parametername>
</parameternamelist>
<parameterdescription>
<para>Pipeline bind point (e.g., VK_PIPELINE_BIND_POINT_GRAPHICS). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure to be bound.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2431" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2431" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1ae521fee6b7010640e7b4cc2f9be8670b" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelineBindDescriptorSetUnits</definition>
        <argsstring>(VkCommandBuffer cmd_buffer, uint32_t first_descriptor_set, uint32_t first_descriptor_set_unit_idx, uint32_t descriptor_set_unit_count, VkPipelineBindPoint bind_point, uint32_t dynamic_descriptors_count, uint32_t *p_dynamic_offsets, ShVkPipelinePool *p_pipeline_pool, ShVkPipeline *p_pipeline)</argsstring>
        <name>shPipelineBindDescriptorSetUnits</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>cmd_buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>first_descriptor_set</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>first_descriptor_set_unit_idx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>descriptor_set_unit_count</declname>
        </param>
        <param>
          <type>VkPipelineBindPoint</type>
          <declname>bind_point</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dynamic_descriptors_count</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_dynamic_offsets</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> *</type>
          <declname>p_pipeline_pool</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> *</type>
          <declname>p_pipeline</declname>
        </param>
        <briefdescription>
<para>Binds descriptor set units to a pipeline within a command buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function binds descriptor set units to a pipeline and command buffer, specifying dynamic offsets if needed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan command buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first_descriptor_set</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the first descriptor set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first_descriptor_set_unit_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the first descriptor set unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptor_set_unit_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of descriptor set units to bind. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bind_point</parametername>
</parameternamelist>
<parameterdescription>
<para>Pipeline bind point (e.g., VK_PIPELINE_BIND_POINT_GRAPHICS). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dynamic_descriptors_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dynamic descriptors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_dynamic_offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of dynamic offsets for the descriptors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pipeline_pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to the <ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2454" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2454" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a5a2d1666d635e1fedbc6a2f39b26fe21" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelineDestroyShaderModules</definition>
        <argsstring>(VkDevice device, uint32_t first_module, uint32_t module_count, ShVkPipeline *p_pipeline)</argsstring>
        <name>shPipelineDestroyShaderModules</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>first_module</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>module_count</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> *</type>
          <declname>p_pipeline</declname>
        </param>
        <briefdescription>
<para>Destroys shader modules associated with the pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>This function destroys a range of shader modules that are part of the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first_module</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the first shader module to destroy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>module_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of shader modules to destroy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2478" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2478" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a910f2e68388bb2620f5173aef5f470f1" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelineDestroyLayout</definition>
        <argsstring>(VkDevice device, ShVkPipeline *p_pipeline)</argsstring>
        <name>shPipelineDestroyLayout</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> *</type>
          <declname>p_pipeline</declname>
        </param>
        <briefdescription>
<para>Destroys the pipeline layout associated with the pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>This function destroys the pipeline layout used by the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid destination pointer to the <ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref> structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2495" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2495" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a69bc1e4c6dd7f51afee92a76983b52f6" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelinePoolCreateDescriptorSetLayoutBinding</definition>
        <argsstring>(uint32_t binding, VkDescriptorType descriptor_type, uint32_t descriptor_set_count, VkShaderStageFlags shader_stage, ShVkPipelinePool *p_pipeline_pool)</argsstring>
        <name>shPipelinePoolCreateDescriptorSetLayoutBinding</name>
        <param>
          <type>uint32_t</type>
          <declname>binding</declname>
        </param>
        <param>
          <type>VkDescriptorType</type>
          <declname>descriptor_type</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>descriptor_set_count</declname>
        </param>
        <param>
          <type>VkShaderStageFlags</type>
          <declname>shader_stage</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> *</type>
          <declname>p_pipeline_pool</declname>
        </param>
        <briefdescription>
<para>Creates a descriptor set layout binding for the pipeline pool. </para>
        </briefdescription>
        <detaileddescription>
<para>This function initializes a descriptor set layout binding in the pipeline pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>binding</parametername>
</parameternamelist>
<parameterdescription>
<para>Binding index in the descriptor set layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptor_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the descriptor (e.g., VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptor_set_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of descriptor sets. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shader_stage</parametername>
</parameternamelist>
<parameterdescription>
<para>Shader stages that use this descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">p_pipeline_pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to the <ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2571" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2571" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a2cff372c4f8726b124bb4c70706af07d" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelinePoolCreateDescriptorSetLayout</definition>
        <argsstring>(VkDevice device, uint32_t first_binding_idx, uint32_t binding_count, uint32_t set_layout_idx, ShVkPipelinePool *p_pipeline_pool)</argsstring>
        <name>shPipelinePoolCreateDescriptorSetLayout</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>first_binding_idx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>binding_count</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>set_layout_idx</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> *</type>
          <declname>p_pipeline_pool</declname>
        </param>
        <briefdescription>
<para>Creates descriptor set layouts in the pipeline pool. </para>
        </briefdescription>
        <detaileddescription>
<para>This function initializes descriptor set layouts in the pipeline pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first_binding_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the first binding in the layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>binding_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bindings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set_layout_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the set layout to initialize. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">p_pipeline_pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to the <ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2592" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2592" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1ad50f750a6e479f1188d3d27d82163f4e" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelinePoolCopyDescriptorSetLayout</definition>
        <argsstring>(uint32_t src_set_layout_idx, uint32_t first_dst_set_layout_idx, uint32_t dst_set_layout_count, ShVkPipelinePool *p_pipeline_pool)</argsstring>
        <name>shPipelinePoolCopyDescriptorSetLayout</name>
        <param>
          <type>uint32_t</type>
          <declname>src_set_layout_idx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>first_dst_set_layout_idx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dst_set_layout_count</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> *</type>
          <declname>p_pipeline_pool</declname>
        </param>
        <briefdescription>
<para>Copies descriptor set layouts within the pipeline pool. </para>
        </briefdescription>
        <detaileddescription>
<para>This function copies descriptor set layouts from source indices to destination indices in the pipeline pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src_set_layout_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the source descriptor set layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first_dst_set_layout_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the first destination descriptor set layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_set_layout_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of destination descriptor set layouts. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">p_pipeline_pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to the <ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2612" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2612" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1ab5045b342ed0bcad88c9e95ff87df6c5" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelinePoolCreateDescriptorPool</definition>
        <argsstring>(VkDevice device, uint32_t pool_idx, VkDescriptorType descriptor_type, uint32_t descriptor_count, ShVkPipelinePool *p_pipeline_pool)</argsstring>
        <name>shPipelinePoolCreateDescriptorPool</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pool_idx</declname>
        </param>
        <param>
          <type>VkDescriptorType</type>
          <declname>descriptor_type</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>descriptor_count</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> *</type>
          <declname>p_pipeline_pool</declname>
        </param>
        <briefdescription>
<para>Creates a descriptor pool in the pipeline pool. </para>
        </briefdescription>
        <detaileddescription>
<para>This function initializes a descriptor pool in the pipeline pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the pool to initialize. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptor_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the descriptor (e.g., VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptor_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of descriptors in the pool. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">p_pipeline_pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to the <ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2632" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2632" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a47b7854828dcf2d0a8cfdbabe1e1d1c8" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelinePoolAllocateDescriptorSetUnits</definition>
        <argsstring>(VkDevice device, uint32_t binding, uint32_t pool_idx, VkDescriptorType descriptor_type, uint32_t first_descriptor_set_unit, uint32_t descriptor_set_unit_count, ShVkPipelinePool *p_pipeline_pool)</argsstring>
        <name>shPipelinePoolAllocateDescriptorSetUnits</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>binding</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pool_idx</declname>
        </param>
        <param>
          <type>VkDescriptorType</type>
          <declname>descriptor_type</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>first_descriptor_set_unit</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>descriptor_set_unit_count</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> *</type>
          <declname>p_pipeline_pool</declname>
        </param>
        <briefdescription>
<para>Allocates descriptor set units in the pipeline pool. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allocates descriptor set units for the pipeline pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>binding</parametername>
</parameternamelist>
<parameterdescription>
<para>Binding index in the descriptor set layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the descriptor pool. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptor_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the descriptor (e.g., VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first_descriptor_set_unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the first descriptor set unit to allocate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptor_set_unit_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of descriptor set units to allocate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">p_pipeline_pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to the <ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2655" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2655" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a5487bb274e93182c0a8b4452479fe0d6" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelinePoolSetDescriptorBufferInfos</definition>
        <argsstring>(uint32_t first_descriptor, uint32_t descriptor_count, VkBuffer buffer, uint32_t buffer_offset, uint32_t buffer_size, ShVkPipelinePool *p_pipeline_pool)</argsstring>
        <name>shPipelinePoolSetDescriptorBufferInfos</name>
        <param>
          <type>uint32_t</type>
          <declname>first_descriptor</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>descriptor_count</declname>
        </param>
        <param>
          <type>VkBuffer</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buffer_offset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buffer_size</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> *</type>
          <declname>p_pipeline_pool</declname>
        </param>
        <briefdescription>
<para>Sets descriptor buffer infos in the pipeline pool. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the buffer information for descriptors in the pipeline pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first_descriptor</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the first descriptor to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptor_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of descriptors to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan buffer to associate with the descriptors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset into the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">p_pipeline_pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to the <ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2679" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2679" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a3a5f03c10a589c5cef2e0eeaa8a785d0" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelinePoolDestroyDescriptorSetLayouts</definition>
        <argsstring>(VkDevice device, uint32_t first_set_layout, uint32_t set_layout_count, ShVkPipelinePool *p_pipeline_pool)</argsstring>
        <name>shPipelinePoolDestroyDescriptorSetLayouts</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>first_set_layout</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>set_layout_count</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> *</type>
          <declname>p_pipeline_pool</declname>
        </param>
        <briefdescription>
<para>Destroys descriptor set layouts in the pipeline pool. </para>
        </briefdescription>
        <detaileddescription>
<para>This function destroys a range of descriptor set layouts in the pipeline pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first_set_layout</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the first descriptor set layout to destroy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set_layout_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of descriptor set layouts to destroy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">p_pipeline_pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to the <ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2700" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2700" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1a93419ab7fff4fbc0b26a471fa384a563" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelinePoolDestroyDescriptorPools</definition>
        <argsstring>(VkDevice device, uint32_t first_pool, uint32_t pool_count, ShVkPipelinePool *p_pipeline_pool)</argsstring>
        <name>shPipelinePoolDestroyDescriptorPools</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>first_pool</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pool_count</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> *</type>
          <declname>p_pipeline_pool</declname>
        </param>
        <briefdescription>
<para>Destroys descriptor pools in the pipeline pool. </para>
        </briefdescription>
        <detaileddescription>
<para>This function destroys a range of descriptor pools in the pipeline pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first_pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the first descriptor pool to destroy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of descriptor pools to destroy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">p_pipeline_pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to the <ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2719" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2719" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="shVulkan_8h_1aa9fb1a7b0e06ac4543f75298c0ca4fdb" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t shPipelinePoolUpdateDescriptorSetUnits</definition>
        <argsstring>(VkDevice device, uint32_t first_descriptor_set_unit, uint32_t descriptor_set_unit_count, ShVkPipelinePool *p_pipeline_pool)</argsstring>
        <name>shPipelinePoolUpdateDescriptorSetUnits</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>first_descriptor_set_unit</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>descriptor_set_unit_count</declname>
        </param>
        <param>
          <type><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> *</type>
          <declname>p_pipeline_pool</declname>
        </param>
        <briefdescription>
<para>Updates descriptor set units in the pipeline pool. </para>
        </briefdescription>
        <detaileddescription>
<para>This function updates the descriptor set units within the pipeline pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid Vulkan device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first_descriptor_set_unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the first descriptor set unit to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptor_set_unit_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of descriptor set units to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">p_pipeline_pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to the <ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref> structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" line="2738" column="16" declfile="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h" declline="2738" declcolumn="16"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>SH_VULKAN_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_VULKAN_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>@file<sp/>my_vulkan_wrapper.h</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>@brief<sp/>This<sp/>file<sp/>contains<sp/>Vulkan<sp/>wrapper<sp/>functions<sp/>for<sp/>handling<sp/>device<sp/>creation<sp/>and<sp/>resource<sp/>management.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="comment">//__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vulkan/vulkan.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SH_TRUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="shVulkan_8h_1a3058eadcecb21906098604fd79c65214" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_TRUE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_TRUE<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="comment">//__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="comment">//SH_TRUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SH_FALSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="shVulkan_8h_1a4f2eaae3258ecc9d23c25a434fff37f7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_FALSE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_FALSE<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="comment">//__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="comment">//SH_FALSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VK_MAKE_API_VERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="shVulkan_8h_1a120255f73dec43695afdb8cb3dbfc016" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VK_MAKE_API_VERSION(variant,<sp/>major,<sp/>minor,<sp/>patch)\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((((uint32_t)(variant))<sp/>&lt;&lt;<sp/>29U)<sp/>|<sp/>(((uint32_t)(major))<sp/>&lt;&lt;<sp/>22U)<sp/>|<sp/>(((uint32_t)(minor))<sp/>&lt;&lt;<sp/>12U)<sp/>|<sp/>((uint32_t)(patch)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="comment">//VK_MAKE_API_VERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="50"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Error-checking<sp/>macro<sp/>for<sp/>Vulkan<sp/>conditions.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>This<sp/>macro<sp/>checks<sp/>a<sp/>given<sp/>condition.<sp/>If<sp/>the<sp/>condition<sp/>evaluates<sp/>to<sp/>true,<sp/>it<sp/>prints<sp/>an<sp/>error<sp/>message</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>and<sp/>executes<sp/>a<sp/>failure<sp/>expression<sp/>(like<sp/>returning<sp/>from<sp/>a<sp/>function<sp/>or<sp/>exiting).</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>@param<sp/>condition<sp/>The<sp/>condition<sp/>to<sp/>check<sp/>(non-zero<sp/>for<sp/>an<sp/>error).</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>@param<sp/>error_msg<sp/>A<sp/>message<sp/>to<sp/>be<sp/>printed<sp/>if<sp/>the<sp/>condition<sp/>is<sp/>true.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>@param<sp/>failure_expression<sp/>The<sp/>expression<sp/>to<sp/>execute<sp/>when<sp/>the<sp/>condition<sp/>is<sp/>true<sp/>(e.g.,<sp/>return<sp/>or<sp/>exit).</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>macro<sp/>does<sp/>not<sp/>return<sp/>any<sp/>value<sp/>but<sp/>executes<sp/>the<sp/>failure_expression<sp/>if<sp/>the<sp/>condition<sp/>is<sp/>met.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="shVulkan_8h_1a4df49a295649705c30fe92316487464b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>shVkError(condition,<sp/>error_msg,<sp/>failure_expression)\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>((int)(condition))<sp/>{\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;shvulkan<sp/>error:<sp/>%s\n&quot;,<sp/>(const<sp/>char*)(error_msg));\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failure_expression;\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="68"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Error-checking<sp/>macro<sp/>for<sp/>Vulkan<sp/>VkResult.</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>This<sp/>macro<sp/>checks<sp/>the<sp/>result<sp/>of<sp/>a<sp/>Vulkan<sp/>API<sp/>call.<sp/>If<sp/>the<sp/>result<sp/>is<sp/>not<sp/>VK_SUCCESS,<sp/></highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>it<sp/>prints<sp/>an<sp/>error<sp/>message<sp/>along<sp/>with<sp/>the<sp/>translated<sp/>Vulkan<sp/>error<sp/>code<sp/>and<sp/>executes<sp/></highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>a<sp/>failure<sp/>expression<sp/>(like<sp/>returning<sp/>from<sp/>a<sp/>function<sp/>or<sp/>exiting).</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>@param<sp/>result<sp/>The<sp/>VkResult<sp/>from<sp/>a<sp/>Vulkan<sp/>function<sp/>(VK_SUCCESS<sp/>or<sp/>an<sp/>error<sp/>code).</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>@param<sp/>error_msg<sp/>A<sp/>message<sp/>to<sp/>be<sp/>printed<sp/>if<sp/>the<sp/>result<sp/>is<sp/>not<sp/>VK_SUCCESS.</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>@param<sp/>failure_expression<sp/>The<sp/>expression<sp/>to<sp/>execute<sp/>when<sp/>the<sp/>result<sp/>is<sp/>an<sp/>error<sp/>(e.g.,<sp/>return<sp/>or<sp/>exit).</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>macro<sp/>calls<sp/>`shTranslateVkResult()`<sp/>to<sp/>convert<sp/>the<sp/>VkResult<sp/>enum<sp/>into<sp/>a<sp/>string<sp/>representation.</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="shVulkan_8h_1a7fef53e61a3d62b029fe8746f3628dce" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>shVkResultError(result,<sp/>error_msg,<sp/>failure_expression)\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>((VkResult)(result)<sp/>!=<sp/>VK_SUCCESS)<sp/>{\</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;shvulkan<sp/>error:<sp/>%s,<sp/>%s\n&quot;,<sp/>error_msg,<sp/>shTranslateVkResult((VkResult)(result)));\</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failure_expression;\</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="87"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Translates<sp/>a<sp/>VkResult<sp/>enum<sp/>into<sp/>a<sp/>literal<sp/>string.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>converts<sp/>a<sp/>Vulkan<sp/>`VkResult`<sp/>code<sp/>into<sp/>a<sp/>literal<sp/>string<sp/>that<sp/>describes</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/>the<sp/>result,<sp/>which<sp/>is<sp/>helpful<sp/>for<sp/>error<sp/>messages<sp/>and<sp/>debugging.</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>@param<sp/>vk_result<sp/>The<sp/>Vulkan<sp/>result<sp/>code<sp/>(VkResult).</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>@return<sp/>A<sp/>string<sp/>representing<sp/>the<sp/>Vulkan<sp/>result<sp/>literal.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>is<sp/>often<sp/>used<sp/>in<sp/>error<sp/>reporting<sp/>to<sp/>provide<sp/>more<sp/>descriptive</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/>information<sp/>about<sp/>Vulkan<sp/>errors,<sp/>such<sp/>as<sp/>converting<sp/>`VK_ERROR_OUT_OF_HOST_MEMORY`</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/>to<sp/>its<sp/>string<sp/>form.</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="shVulkan_8h_1ab10f609829185e735e0612e8c2a23445" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="shVulkan_8h_1ab10f609829185e735e0612e8c2a23445" kindref="member">shTranslateVkResult</ref>(</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>vk_result</highlight></codeline>
<codeline lineno="103"><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="shVulkan_8h_1a0a9fade4c0cfb2d73ef085d0423c78fd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_MAX_STACK_VALIDATION_LAYER_COUNT<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="shVulkan_8h_1a5be727609c1dd4aa8c921b26565e9d71" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_MAX_STACK_QUEUE_FAMILY_COUNT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="shVulkan_8h_1a35f7035eab91fd6de9da8ed60af612e2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_MAX_STACK_PHYSICAL_DEVICE_COUNT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="shVulkan_8h_1ad0ce09fa6507dd577db1ff4d4609d21c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_MAX_STACK_QUEUE_COUNT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="shVulkan_8h_1ad78f8180c37d24de5dbaa868aaf45258" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_MAX_STACK_DEVICE_SURFACE_FORMAT_COUNT<sp/>256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="shVulkan_8h_1a31c43c37127b14c5326878d99876b344" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_MAX_STACK_SURFACE_PRESENT_MODE_COUNT<sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="116"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Searches<sp/>for<sp/>a<sp/>specific<sp/>Vulkan<sp/>validation<sp/>layer.</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>searches<sp/>through<sp/>the<sp/>available<sp/>Vulkan<sp/>validation<sp/>layers<sp/></highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/>to<sp/>find<sp/>a<sp/>match<sp/>with<sp/>the<sp/>provided<sp/>validation<sp/>layer<sp/>name.</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/>@param<sp/>validation_layer_name<sp/>The<sp/>name<sp/>of<sp/>the<sp/>validation<sp/>layer<sp/>to<sp/>find.</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>the<sp/>validation<sp/>layer<sp/>is<sp/>found,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>is<sp/>typically<sp/>used<sp/>to<sp/>check<sp/>if<sp/>a<sp/>specific<sp/>validation<sp/>layer<sp/></highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/>(e.g.,<sp/>&quot;VK_LAYER_KHRONOS_validation&quot;)<sp/>is<sp/>available<sp/>for<sp/>use.</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="shVulkan_8h_1a6268c936f366c9a3a1748c3d1982d95c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a6268c936f366c9a3a1748c3d1982d95c" kindref="member">shFindValidationLayer</ref>(</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>validation_layer_name</highlight></codeline>
<codeline lineno="131"><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="133"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>Vulkan<sp/>instance.</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>initializes<sp/>a<sp/>Vulkan<sp/>instance<sp/>with<sp/>the<sp/>specified<sp/>application<sp/>name,<sp/>engine<sp/>name,<sp/></highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/>validation<sp/>layers,<sp/>and<sp/>extensions.</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>@param<sp/>application_name<sp/>The<sp/>name<sp/>of<sp/>the<sp/>application.</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>@param<sp/>engine_name<sp/>The<sp/>name<sp/>of<sp/>the<sp/>engine.</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>@param<sp/>enable_validation_layers<sp/>Flag<sp/>to<sp/>enable<sp/>(1)<sp/>or<sp/>disable<sp/>(0)<sp/>validation<sp/>layers.</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>@param<sp/>extension_count<sp/>Number<sp/>of<sp/>Vulkan<sp/>extensions<sp/>to<sp/>enable.</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>@param<sp/>pp_extension_names<sp/>Valid<sp/>array<sp/>of<sp/>extension<sp/>names<sp/>to<sp/>enable,<sp/>if<sp/>required.</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/>@param<sp/>api_version<sp/>The<sp/>Vulkan<sp/>API<sp/>version<sp/>to<sp/>use.</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_instance<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>newly<sp/>created<sp/>VkInstance.</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>the<sp/>instance<sp/>is<sp/>created<sp/>successfully,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="shVulkan_8h_1ae0f3ac928ce24f74c536af3964286ce1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1ae0f3ac928ce24f74c536af3964286ce1" kindref="member">shCreateInstance</ref>(</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/>application_name,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/>engine_name,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><sp/>enable_validation_layers,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>extension_count,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><sp/><sp/>pp_extension_names,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>api_version,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>VkInstance*<sp/><sp/><sp/><sp/>p_instance</highlight></codeline>
<codeline lineno="157"><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="159"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Retrieves<sp/>the<sp/>queue<sp/>family<sp/>indices<sp/>for<sp/>a<sp/>physical<sp/>device.</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>retrieves<sp/>and<sp/>categorizes<sp/>the<sp/>queue<sp/>families<sp/>available<sp/>for<sp/>a<sp/>specified<sp/>physical<sp/>device<sp/></highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/>and<sp/>surface,<sp/>such<sp/>as<sp/>graphics,<sp/>compute,<sp/>transfer,<sp/>and<sp/>presentation<sp/>(surface<sp/>support).</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/>@param<sp/>physical_device<sp/>The<sp/>current<sp/>physical<sp/>device<sp/>to<sp/>query<sp/>for<sp/>queue<sp/>families.</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/>@param<sp/>surface<sp/>The<sp/>Vulkan<sp/>surface<sp/>(for<sp/>surface<sp/>support<sp/>queries).</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_queue_family_count<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>total<sp/>number<sp/>of<sp/>queue<sp/>families<sp/>available.</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_graphics_queue_family_count<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>Number<sp/>of<sp/>graphics-capable<sp/>queue<sp/>families.</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_surface_queue_family_count<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>Number<sp/>of<sp/>surface-capable<sp/>queue<sp/>families.</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_compute_queue_family_count<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>Number<sp/>of<sp/>compute-capable<sp/>queue<sp/>families.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_transfer_queue_family_count<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>Number<sp/>of<sp/>transfer-capable<sp/>queue<sp/>families.</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_graphics_queue_family_indices<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>indices<sp/>of<sp/>the<sp/>graphics-capable<sp/>queue<sp/>families.</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_surface_queue_family_indices<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>indices<sp/>of<sp/>the<sp/>surface-capable<sp/>queue<sp/>families.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_compute_queue_family_indices<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>indices<sp/>of<sp/>the<sp/>compute-capable<sp/>queue<sp/>families.</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_transfer_queue_family_indices<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>indices<sp/>of<sp/>the<sp/>transfer-capable<sp/>queue<sp/>families.</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_queue_families_properties<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>a<sp/>`VkQueueFamilyProperties`<sp/>structure.</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="shVulkan_8h_1aa325b8ce04eab87640435bfb6792f20b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1aa325b8ce04eab87640435bfb6792f20b" kindref="member">shGetPhysicalDeviceQueueFamilies</ref>(</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPhysicalDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>physical_device,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSurfaceKHR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_queue_family_count,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_graphics_queue_family_count,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_surface_queue_family_count,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_compute_queue_family_count,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_transfer_queue_family_count,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_graphics_queue_family_indices,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_surface_queue_family_indices,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_compute_queue_family_indices,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_transfer_queue_family_indices,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>VkQueueFamilyProperties*<sp/>p_queue_families_properties</highlight></codeline>
<codeline lineno="193"><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="195"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Checks<sp/>if<sp/>a<sp/>queue<sp/>family<sp/>supports<sp/>presenting<sp/>to<sp/>a<sp/>surface.</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>checks<sp/>whether<sp/>a<sp/>queue<sp/>family<sp/>of<sp/>a<sp/>physical<sp/>device<sp/>supports<sp/>presentation<sp/>to<sp/>a<sp/>surface.</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/>@param<sp/>physical_device<sp/>Valid<sp/>physical<sp/>device<sp/>to<sp/>query.</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/>@param<sp/>queue_family_index<sp/>Index<sp/>of<sp/>the<sp/>queue<sp/>family<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*<sp/>@param<sp/>surface<sp/>Valid<sp/>surface<sp/>to<sp/>check<sp/>for<sp/>support.</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_support<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>Flag<sp/>indicating<sp/>support<sp/>(1<sp/>if<sp/>supported,<sp/>0<sp/>otherwise).</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="shVulkan_8h_1a014a677f98233893f4fcf7633d564e8a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a014a677f98233893f4fcf7633d564e8a" kindref="member">shGetQueueFamilySurfaceSupport</ref>(</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPhysicalDevice<sp/>physical_device,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue_family_index,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSurfaceKHR<sp/><sp/><sp/><sp/><sp/>surface,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_support</highlight></codeline>
<codeline lineno="212"><highlight class="normal">);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="214"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Selects<sp/>a<sp/>physical<sp/>device<sp/>that<sp/>meets<sp/>specified<sp/>requirements.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>selects<sp/>a<sp/>Vulkan<sp/>physical<sp/>device<sp/>based<sp/>on<sp/>specified<sp/>requirements<sp/>such<sp/>as<sp/>queue<sp/>support,<sp/></highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>surface<sp/>capabilities,<sp/>and<sp/>required<sp/>device<sp/>features.<sp/>Then<sp/>it<sp/>retrieves<sp/>vital<sp/>information<sp/>about<sp/>the<sp/>GPU.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/>@param<sp/>instance<sp/>Valid<sp/>Vulkan<sp/>instance.</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>@param<sp/>surface<sp/>Valid<sp/>surface<sp/>if<sp/>presentation<sp/>support<sp/>is<sp/>required,<sp/>otherwise<sp/>it<sp/>can<sp/>be<sp/>set<sp/>as<sp/>`VK_NULL_HANDLE`.</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/>@param<sp/>requirements<sp/>Queue<sp/>family<sp/>requirements<sp/>(VkQueueFlags).</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_physical_device<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>selected<sp/>Vulkan<sp/>physical<sp/>device.</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_physical_device_properties<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>properties<sp/>of<sp/>the<sp/>selected<sp/>physical<sp/>device.</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_physical_device_features<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>features<sp/>of<sp/>the<sp/>selected<sp/>physical<sp/>device.</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_physical_device_memory_properties<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>memory<sp/>properties<sp/>of<sp/>the<sp/>selected<sp/>physical<sp/>device.</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>a<sp/>suitable<sp/>device<sp/>is<sp/>found,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="shVulkan_8h_1a3664134ede0952d4a20ba825696072e9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a3664134ede0952d4a20ba825696072e9" kindref="member">shSelectPhysicalDevice</ref>(</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>VkInstance<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSurfaceKHR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>VkQueueFlags<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>requirements,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPhysicalDevice*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_physical_device,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPhysicalDeviceProperties*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_physical_device_properties,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPhysicalDeviceFeatures*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_physical_device_features,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPhysicalDeviceMemoryProperties*<sp/>p_physical_device_memory_properties</highlight></codeline>
<codeline lineno="238"><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="240"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Queries<sp/>if<sp/>a<sp/>queue<sp/>family<sp/>supports<sp/>presenting<sp/>to<sp/>a<sp/>surface.</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>queries<sp/>whether<sp/>a<sp/>specific<sp/>queue<sp/>family<sp/>of<sp/>a<sp/>physical<sp/>device<sp/>supports<sp/>presenting<sp/></highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/>to<sp/>a<sp/>Vulkan<sp/>surface.</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*<sp/>@param<sp/>physical_device<sp/>Valid<sp/>physical<sp/>device.</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/>@param<sp/>queue_family_index<sp/>Index<sp/>of<sp/>the<sp/>queue<sp/>family<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/>@param<sp/>surface<sp/>Valid<sp/>surface<sp/>to<sp/>check<sp/>for<sp/>support.</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_supported<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>Flag<sp/>indicating<sp/>support<sp/>(1<sp/>if<sp/>supported,<sp/>0<sp/>otherwise).</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="shVulkan_8h_1a32980fffc92087836a90e945025add26" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a32980fffc92087836a90e945025add26" kindref="member">shGetPhysicalDeviceSurfaceSupport</ref>(</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPhysicalDevice<sp/>physical_device,</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue_family_index,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSurfaceKHR<sp/><sp/><sp/><sp/><sp/>surface,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_supported</highlight></codeline>
<codeline lineno="258"><highlight class="normal">);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="260"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Retrieves<sp/>the<sp/>surface<sp/>capabilities<sp/>of<sp/>a<sp/>physical<sp/>device.</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>queries<sp/>the<sp/>surface<sp/>capabilities<sp/>(such<sp/>as<sp/>min/max<sp/>image<sp/>count<sp/>and<sp/>extent)<sp/>for<sp/>a<sp/></highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/>physical<sp/>device<sp/>and<sp/>surface<sp/>combination.</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/>@param<sp/>physical_device<sp/>Valid<sp/>physical<sp/>device.</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/>@param<sp/>surface<sp/>Valid<sp/>Vulkan<sp/>surface<sp/>to<sp/>query<sp/>capabilities<sp/>for.</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_surface_capabilities<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>a<sp/>structure<sp/>where<sp/>the<sp/>surface<sp/>capabilities<sp/>will<sp/>be<sp/>stored.</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/>@param<sp/>clamp_current_extent_width_value<sp/>Fixed<sp/>current<sp/>extent<sp/>width<sp/>value<sp/>when<sp/>vkGetPhysicalDeviceSurfaceCapabilitiesKHR<sp/>writes<sp/>UINT32_MAX<sp/>(this<sp/>might<sp/>happen<sp/>when<sp/>using<sp/>Wayland)</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/>@param<sp/>clamp_current_extent_height_value<sp/>Fixed<sp/>current<sp/>extent<sp/>height<sp/>value<sp/>when<sp/>vkGetPhysicalDeviceSurfaceCapabilitiesKHR<sp/>writes<sp/>UINT32_MAX<sp/>(this<sp/>might<sp/>happen<sp/>when<sp/>using<sp/>Wayland)</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="shVulkan_8h_1a2a8aab0d5301eac3a95bd60385dcb141" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a2a8aab0d5301eac3a95bd60385dcb141" kindref="member">shGetPhysicalDeviceSurfaceCapabilities</ref>(</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPhysicalDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>physical_device,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSurfaceKHR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSurfaceCapabilitiesKHR*<sp/>p_surface_capabilities,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clamp_current_extent_width_value,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clamp_current_extent_height_value</highlight></codeline>
<codeline lineno="280"><highlight class="normal">);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="282"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Queries<sp/>information<sp/>for<sp/>device<sp/>queue<sp/>creation.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>sets<sp/>up<sp/>the<sp/>necessary<sp/>information<sp/>for<sp/>creating<sp/>device<sp/>queues,<sp/>including<sp/>the<sp/></highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/>queue<sp/>family<sp/>index,<sp/>queue<sp/>count,<sp/>priorities,<sp/>and<sp/>queue<sp/>protection<sp/>settings.</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/>@param<sp/>queue_family_index<sp/>Index<sp/>of<sp/>the<sp/>queue<sp/>family.</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/>@param<sp/>queue_count<sp/>Number<sp/>of<sp/>queues<sp/>to<sp/>create<sp/>in<sp/>the<sp/>specified<sp/>family.</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_queue_priorities<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>queue<sp/>priorities.</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/>@param<sp/>protected<sp/>Flag<sp/>indicating<sp/>whether<sp/>the<sp/>queue<sp/>should<sp/>be<sp/>protected<sp/>(1<sp/>for<sp/>protected,<sp/>0<sp/>for<sp/>unprotected).</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_device_queue_info<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>a<sp/>VkDeviceQueueCreateInfo<sp/>structure<sp/>where<sp/>the<sp/>queue<sp/>info<sp/>will<sp/>be<sp/>stored.</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296" refid="shVulkan_8h_1a614467100219d688afecfac1bf5a8522" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a614467100219d688afecfac1bf5a8522" kindref="member">shQueryForDeviceQueueInfo</ref>(</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue_family_index,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue_count,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_queue_priorities,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceQueueCreateInfo*<sp/>p_device_queue_info</highlight></codeline>
<codeline lineno="302"><highlight class="normal">);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="304"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Sets<sp/>up<sp/>a<sp/>Vulkan<sp/>logical<sp/>device.</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>a<sp/>Vulkan<sp/>logical<sp/>device<sp/>with<sp/>specified<sp/>extensions,<sp/>queue<sp/>creation<sp/>info,<sp/>and<sp/></highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*<sp/>other<sp/>configurations.</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/>@param<sp/>physical_device<sp/>Valid<sp/>Vulkan<sp/>physical<sp/>device.</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_device<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>newly<sp/>created<sp/>VkDevice.</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*<sp/>@param<sp/>extension_count<sp/>Number<sp/>of<sp/>Vulkan<sp/>extensions<sp/>to<sp/>enable.</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*<sp/>@param<sp/>pp_extension_names<sp/>Valid<sp/>pointer<sp/>to<sp/>extension<sp/>names<sp/>to<sp/>enable.</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/>@param<sp/>device_queue_count<sp/>Number<sp/>of<sp/>device<sp/>queues<sp/>to<sp/>create.</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_device_queue_infos<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>VkDeviceQueueCreateInfo<sp/>structures.</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>the<sp/>logical<sp/>device<sp/>is<sp/>created<sp/>successfully,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319" refid="shVulkan_8h_1aacba1b9a04a3ecf4cf5041908c6bfd5f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1aacba1b9a04a3ecf4cf5041908c6bfd5f" kindref="member">shSetLogicalDevice</ref>(</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPhysicalDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>physical_device,</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_device,</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extension_count,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp_extension_names,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device_queue_count,</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceQueueCreateInfo*<sp/>p_device_queue_infos</highlight></codeline>
<codeline lineno="326"><highlight class="normal">);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="328"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Retrieves<sp/>the<sp/>Vulkan<sp/>queues<sp/>from<sp/>a<sp/>device.</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>retrieves<sp/>the<sp/>Vulkan<sp/>queues<sp/>from<sp/>a<sp/>logical<sp/>device<sp/>based<sp/>on<sp/>specified<sp/>queue<sp/>family<sp/>indices.</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/>@param<sp/>queue_count<sp/>Number<sp/>of<sp/>queues<sp/>to<sp/>retrieve.</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_queue_family_indices<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>queue<sp/>family<sp/>indices.</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_queues<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>VkQueue<sp/>handles.</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="shVulkan_8h_1ae7c6c9c1c42d68b7a822aa800e0ff2da" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1ae7c6c9c1c42d68b7a822aa800e0ff2da" kindref="member">shGetDeviceQueues</ref>(</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/>device,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/>queue_count,</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/>p_queue_family_indices,</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>VkQueue*<sp/><sp/>p_queues</highlight></codeline>
<codeline lineno="345"><highlight class="normal">);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348" refid="shVulkan_8h_1ab93ee8c746906227e234a79e7ed91e44" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1ab93ee8c746906227e234a79e7ed91e44" kindref="member">shCheckSupportedDeviceColorFormat</ref>(</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPhysicalDevice<sp/>physical_device,</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFormat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_color_attachment_supported</highlight></codeline>
<codeline lineno="352"><highlight class="normal">);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="shVulkan_8h_1a383c4ece797ce47ba36a2d5242c546e3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_MAX_STACK_DEVICE_COLOR_FORMATS_QUERIES<sp/>44</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355" refid="shVulkan_8h_1a00e2240a35539bfbf65ca7c69dcb31b0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_FORMAT_UINT<sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="shVulkan_8h_1aa92949a61b4a5a9503ca98e8a0e12dda" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_FORMAT_SINT<sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357" refid="shVulkan_8h_1a95c9d9d5c140d5730146622702bc14f9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_FORMAT_SFLOAT<sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358" refid="shVulkan_8h_1a2386429c07139c95076e828f3e58bdfe" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_FORMAT_UNDEFINED<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1" kindref="member">ShImageChannelTypeFlags</ref><sp/>{</highlight></codeline>
<codeline lineno="361" refid="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1a86b9e1f5698d22f0c949d5b6c0134721" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1a86b9e1f5698d22f0c949d5b6c0134721" kindref="member">SH_IMAGE_CHANNEL_TYPE_UNORM</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>1<sp/>&lt;&lt;<sp/>0,</highlight></codeline>
<codeline lineno="362" refid="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1a85faeb403a26c3901d493710e866e28a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1a85faeb403a26c3901d493710e866e28a" kindref="member">SH_IMAGE_CHANNEL_TYPE_SNORM</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>1<sp/>&lt;&lt;<sp/>1,</highlight></codeline>
<codeline lineno="363" refid="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1a977bde39d93f048e5437aa3b82e0101e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1a977bde39d93f048e5437aa3b82e0101e" kindref="member">SH_IMAGE_CHANNEL_TYPE_UINT</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1<sp/>&lt;&lt;<sp/>2,</highlight></codeline>
<codeline lineno="364" refid="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1a9d8cf9d654e66965d1c901cfa31c5666" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1a9d8cf9d654e66965d1c901cfa31c5666" kindref="member">SH_IMAGE_CHANNEL_TYPE_SINT</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1<sp/>&lt;&lt;<sp/>3,</highlight></codeline>
<codeline lineno="365" refid="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1a39ca6190179b0a04aa18b99608a33220" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1a39ca6190179b0a04aa18b99608a33220" kindref="member">SH_IMAGE_CHANNEL_TYPE_SFLOAT</ref><sp/><sp/><sp/><sp/>=<sp/>1<sp/>&lt;&lt;<sp/>4,</highlight></codeline>
<codeline lineno="366" refid="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1a979ee9012146f1ca54b23d5df12f903a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1a979ee9012146f1ca54b23d5df12f903a" kindref="member">SH_IMAGE_CHANNEL_TYPE_UNDEFINED</ref><sp/>=<sp/>UINT32_MAX,</highlight></codeline>
<codeline lineno="367" refid="shVulkan_8h_1aaccfb38ea85b91664878d2596ec39da1" refkind="member"><highlight class="normal">}<sp/><ref refid="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1" kindref="member">ShImageChannelTypeFlags</ref>;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369" refid="shVulkan_8h_1a22a002d56c6d4e2093298afec80eaac4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a22a002d56c6d4e2093298afec80eaac4" kindref="member">shFindSupportedDeviceColorFormats</ref>(</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPhysicalDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>physical_device,</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_channel_count,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_channel_count,</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_channel_size,</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_channel_size,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shVulkan_8h_1a9d7f7eadebd45156134f5a2742d6e6e1" kindref="member">ShImageChannelTypeFlags</ref><sp/>channel_types,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_supported_format_count,</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFormat*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_supported_formats,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_channels_count,</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_single_channels_sizes,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_channels_types</highlight></codeline>
<codeline lineno="381"><highlight class="normal">);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="383"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>Vulkan<sp/>swapchain.</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>sets<sp/>up<sp/>a<sp/>Vulkan<sp/>swapchain<sp/>with<sp/>the<sp/>specified<sp/>surface,<sp/>image<sp/>format,<sp/>and<sp/>other<sp/>parameters.</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*<sp/>@param<sp/>physical_device<sp/>Valid<sp/>Vulkan<sp/>physical<sp/>device.</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/>*<sp/>@param<sp/>surface_capabilities<sp/>Surface<sp/>capabilities<sp/>struct.</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/>*<sp/>@param<sp/>surface<sp/>Valid<sp/>Vulkan<sp/>surface.</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*<sp/>@param<sp/>image_format<sp/>Format<sp/>of<sp/>the<sp/>images<sp/>in<sp/>the<sp/>swapchain.</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_image_format<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>format<sp/>of<sp/>the<sp/>swapchain<sp/>images.</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/>*<sp/>@param<sp/>swapchain_image_count<sp/>Number<sp/>of<sp/>images<sp/>in<sp/>the<sp/>swapchain.</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>*<sp/>@param<sp/>image_sharing_mode<sp/>Sharing<sp/>mode<sp/>for<sp/>the<sp/>swapchain<sp/>images.</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>*<sp/>@param<sp/>vsync<sp/>Flag<sp/>to<sp/>enable<sp/>(1)<sp/>or<sp/>disable<sp/>(0)<sp/>V-Sync.</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_swapchain_image_count<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>number<sp/>of<sp/>swapchain<sp/>images.</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_swapchain<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>newly<sp/>created<sp/>VkSwapchainKHR.</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/>*<sp/>@note<sp/>@ref<sp/>p_swapchain_image_count<sp/>might<sp/>be<sp/>different<sp/>from<sp/>@ref<sp/>swapchain_image_count<sp/>when<sp/>@ref<sp/>swapchain_image_count<sp/>is<sp/>not<sp/>supported!<sp/>Please<sp/>take<sp/>this<sp/>in<sp/>consideration<sp/>for<sp/>your<sp/>API<sp/>implementations.</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>the<sp/>swapchain<sp/>is<sp/>created<sp/>successfully,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="shVulkan_8h_1ab5ebb51aaf4d84d3636c3e858e2cbc81" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1ab5ebb51aaf4d84d3636c3e858e2cbc81" kindref="member">shCreateSwapchain</ref>(</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPhysicalDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>physical_device,</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSurfaceCapabilitiesKHR<sp/>surface_capabilities,</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSurfaceKHR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface,</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFormat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image_format,</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFormat*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_image_format,</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swapchain_image_count,</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSharingMode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image_sharing_mode,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vsync,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_swapchain_image_count,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSwapchainKHR*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_swapchain</highlight></codeline>
<codeline lineno="416"><highlight class="normal">);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="418"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Combines<sp/>sample<sp/>counts<sp/>based<sp/>on<sp/>physical<sp/>device<sp/>properties.</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>determines<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>samples<sp/>that<sp/>can<sp/>be<sp/>used<sp/>for<sp/>color<sp/>and<sp/>depth<sp/></highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/>*<sp/>attachments,<sp/>considering<sp/>the<sp/>physical<sp/>device<sp/>properties.</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/>*<sp/>@param<sp/>physical_device_properties<sp/>Properties<sp/>of<sp/>the<sp/>physical<sp/>device.</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/>*<sp/>@param<sp/>sample_count<sp/>Sample<sp/>count<sp/>to<sp/>combine.</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/>*<sp/>@param<sp/>combine_color_sample<sp/>Flag<sp/>indicating<sp/>whether<sp/>to<sp/>combine<sp/>color<sp/>samples.</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/>*<sp/>@param<sp/>combine_depth_sample<sp/>Flag<sp/>indicating<sp/>whether<sp/>to<sp/>combine<sp/>depth<sp/>samples.</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_sample_count<sp/>Destination<sp/>pointer<sp/>to<sp/>the<sp/>resulting<sp/>maximum<sp/>supported<sp/>sample<sp/>count<sp/>for<sp/>the<sp/>current<sp/>hardware.</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432" refid="shVulkan_8h_1a1bc1c3ad7fc0f2a7ad52bfc283edf57d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a1bc1c3ad7fc0f2a7ad52bfc283edf57d" kindref="member">shCombineMaxSamples</ref>(</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPhysicalDeviceProperties<sp/>physical_device_properties,</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample_count,</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combine_color_sample,</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combine_depth_sample,</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_sample_count</highlight></codeline>
<codeline lineno="438"><highlight class="normal">);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="440"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Retrieves<sp/>the<sp/>images<sp/>in<sp/>a<sp/>swapchain.</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>retrieves<sp/>the<sp/>Vulkan<sp/>images<sp/>present<sp/>in<sp/>a<sp/>swapchain.</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/>*<sp/>@param<sp/>swapchain<sp/>Valid<sp/>Vulkan<sp/>swapchain.</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_swapchain_image_count<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>number<sp/>of<sp/>swapchain<sp/>images.</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_swapchain_images<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>VkImage<sp/>handles.</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="shVulkan_8h_1a4e5e210ebde2ee1a8695d27af5d030ae" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a4e5e210ebde2ee1a8695d27af5d030ae" kindref="member">shGetSwapchainImages</ref>(</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSwapchainKHR<sp/>swapchain,</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/><sp/><sp/><sp/><sp/><sp/>p_swapchain_image_count,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImage*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_swapchain_images</highlight></codeline>
<codeline lineno="457"><highlight class="normal">);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="459"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>Vulkan<sp/>image<sp/>view.</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>a<sp/>Vulkan<sp/>image<sp/>view<sp/>for<sp/>a<sp/>specified<sp/>image,<sp/>view<sp/>type,<sp/>format,<sp/>and<sp/>aspect.</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/>*<sp/>@param<sp/>image<sp/>Valid<sp/>Vulkan<sp/>image.</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/>*<sp/>@param<sp/>view_type<sp/>Type<sp/>of<sp/>the<sp/>image<sp/>view.</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/>*<sp/>@param<sp/>image_aspect<sp/>Aspect<sp/>flags<sp/>of<sp/>the<sp/>image<sp/>(e.g.,<sp/>color,<sp/>depth).</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/>*<sp/>@param<sp/>mip_levels<sp/>Number<sp/>of<sp/>mipmap<sp/>levels.</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/>*<sp/>@param<sp/>format<sp/>Format<sp/>of<sp/>the<sp/>image.</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_image_view<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>newly<sp/>created<sp/>VkImageView.</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474" refid="shVulkan_8h_1ab26128a90f271e61dd3da44c60002972" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1ab26128a90f271e61dd3da44c60002972" kindref="member">shCreateImageView</ref>(</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image,</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageViewType<sp/><sp/><sp/><sp/><sp/><sp/><sp/>view_type,</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageAspectFlagBits<sp/>image_aspect,</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mip_levels,</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFormat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format,</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageView*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_image_view</highlight></codeline>
<codeline lineno="482"><highlight class="normal">);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="484"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>image<sp/>views<sp/>for<sp/>swapchain<sp/>images.</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>Vulkan<sp/>image<sp/>views<sp/>for<sp/>all<sp/>images<sp/>in<sp/>a<sp/>swapchain.</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/>*<sp/>@param<sp/>format<sp/>Format<sp/>of<sp/>the<sp/>image<sp/>views.</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>*<sp/>@param<sp/>swapchain_image_count<sp/>Number<sp/>of<sp/>swapchain<sp/>images.</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_swapchain_images<sp/>Pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>VkImage<sp/>handles.</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_swapchain_image_views<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>VkImageView<sp/>handles.</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497" refid="shVulkan_8h_1a29319ccf723bb92c0b25612c65f4e914" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a29319ccf723bb92c0b25612c65f4e914" kindref="member">shCreateSwapchainImageViews</ref>(</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFormat<sp/><sp/><sp/><sp/><sp/>format,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/>swapchain_image_count,</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImage*<sp/><sp/><sp/><sp/><sp/>p_swapchain_images,</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageView*<sp/>p_swapchain_image_views</highlight></codeline>
<codeline lineno="503"><highlight class="normal">);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="505"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>Vulkan<sp/>command<sp/>pool.</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>a<sp/>command<sp/>pool<sp/>for<sp/>a<sp/>specified<sp/>queue<sp/>family.</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/>*<sp/>@param<sp/>queue_family_index<sp/>Queue<sp/>family<sp/>index<sp/>for<sp/>the<sp/>command<sp/>pool.</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_cmd_pool<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>newly<sp/>created<sp/>VkCommandPool.</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516" refid="shVulkan_8h_1abb14c0eb648a4fc8dd6ad54a664c8a66" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1abb14c0eb648a4fc8dd6ad54a664c8a66" kindref="member">shCreateCommandPool</ref>(</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue_family_index,</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandPool*<sp/>p_cmd_pool</highlight></codeline>
<codeline lineno="520"><highlight class="normal">);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="522"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Allocates<sp/>command<sp/>buffers<sp/>from<sp/>a<sp/>command<sp/>pool.</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>allocates<sp/>a<sp/>specified<sp/>number<sp/>of<sp/>command<sp/>buffers<sp/>from<sp/>a<sp/>command<sp/>pool.</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/>*<sp/>@param<sp/>cmd_pool<sp/>Valid<sp/>pointer<sp/>to<sp/>the<sp/>command<sp/>pool<sp/>from<sp/>which<sp/>to<sp/>allocate.</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/>*<sp/>@param<sp/>cmd_buffer_count<sp/>Number<sp/>of<sp/>command<sp/>buffers<sp/>to<sp/>allocate.</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_cmd_buffer<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>newly<sp/>created<sp/>VkCommandBuffer<sp/>handles.</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534" refid="shVulkan_8h_1ad66c57365878b51eb09068509ed13207" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1ad66c57365878b51eb09068509ed13207" kindref="member">shAllocateCommandBuffers</ref>(</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandPool<sp/><sp/><sp/><sp/>cmd_pool,</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd_buffer_count,</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer*<sp/>p_cmd_buffer</highlight></codeline>
<codeline lineno="539"><highlight class="normal">);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="541"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>Vulkan<sp/>render<sp/>pass<sp/>attachment<sp/>description.</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>an<sp/>attachment<sp/>description<sp/>to<sp/>use<sp/>in<sp/>a<sp/>render<sp/>pass.</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/>*<sp/>@param<sp/>format<sp/>Format<sp/>of<sp/>the<sp/>attachment.</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/>*<sp/>@param<sp/>sample_count<sp/>Sample<sp/>count<sp/>for<sp/>the<sp/>attachment.</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/>*<sp/>@param<sp/>load_treatment<sp/>Load<sp/>operation<sp/>for<sp/>the<sp/>attachment.</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/>*<sp/>@param<sp/>store_treatment<sp/>Store<sp/>operation<sp/>for<sp/>the<sp/>attachment.</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/>*<sp/>@param<sp/>stencil_load_treatment<sp/>Load<sp/>operation<sp/>for<sp/>stencil<sp/>attachment.</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/>*<sp/>@param<sp/>stencil_store_treatment<sp/>Store<sp/>operation<sp/>for<sp/>stencil<sp/>attachment.</highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/>*<sp/>@param<sp/>initial_layout<sp/>Initial<sp/>layout<sp/>of<sp/>the<sp/>attachment.</highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/>*<sp/>@param<sp/>final_layout<sp/>Final<sp/>layout<sp/>of<sp/>the<sp/>attachment.</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_attachment_description<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>newly<sp/>created<sp/>VkAttachmentDescription.</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558" refid="shVulkan_8h_1ad2559948a94ebe5e470544324802f4a8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1ad2559948a94ebe5e470544324802f4a8" kindref="member">shCreateRenderpassAttachment</ref>(</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFormat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format,</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample_count,</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>VkAttachmentLoadOp<sp/><sp/><sp/><sp/><sp/><sp/><sp/>load_treatment,</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>VkAttachmentStoreOp<sp/><sp/><sp/><sp/><sp/><sp/>store_treatment,</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>VkAttachmentLoadOp<sp/><sp/><sp/><sp/><sp/><sp/><sp/>stencil_load_treatment,</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>VkAttachmentStoreOp<sp/><sp/><sp/><sp/><sp/><sp/>stencil_store_treatment,</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageLayout<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initial_layout,</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageLayout<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>final_layout,</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>VkAttachmentDescription*<sp/>p_attachment_description</highlight></codeline>
<codeline lineno="568"><highlight class="normal">);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="570"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>Vulkan<sp/>render<sp/>pass<sp/>attachment<sp/>reference.</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="573"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>an<sp/>attachment<sp/>reference<sp/>for<sp/>use<sp/>in<sp/>a<sp/>subpass<sp/>of<sp/>a<sp/>render<sp/>pass.</highlight></codeline>
<codeline lineno="574"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="575"><highlight class="comment"><sp/>*<sp/>@param<sp/>attachment_idx<sp/>Index<sp/>of<sp/>the<sp/>attachment<sp/>in<sp/>the<sp/>render<sp/>pass.</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/>*<sp/>@param<sp/>layout<sp/>Layout<sp/>of<sp/>the<sp/>attachment<sp/>within<sp/>the<sp/>subpass.</highlight></codeline>
<codeline lineno="577"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_attachment_reference<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>newly<sp/>created<sp/>VkAttachmentReference.</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581" refid="shVulkan_8h_1a19028144387eb3a72335bb7e3a884ce1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a19028144387eb3a72335bb7e3a884ce1" kindref="member">shCreateRenderpassAttachmentReference</ref>(</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attachment_idx,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageLayout<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>VkAttachmentReference*<sp/>p_attachment_reference</highlight></codeline>
<codeline lineno="585"><highlight class="normal">);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="587"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="588"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>Vulkan<sp/>subpass<sp/>description.</highlight></codeline>
<codeline lineno="589"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>a<sp/>subpass<sp/>description<sp/>including<sp/>input,<sp/>color,<sp/>depth/stencil,<sp/>and<sp/>resolve<sp/>attachments.</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/>*<sp/>@param<sp/>bind_point<sp/>Pipeline<sp/>bind<sp/>point<sp/>for<sp/>the<sp/>subpass.</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/>*<sp/>@param<sp/>input_attachment_count<sp/>Number<sp/>of<sp/>input<sp/>attachments.</highlight></codeline>
<codeline lineno="594"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_input_attachments_reference<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>input<sp/>attachment<sp/>references.</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/>*<sp/>@param<sp/>color_attachment_count<sp/>Number<sp/>of<sp/>color<sp/>attachments.</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_color_attachments_reference<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>color<sp/>attachment<sp/>references.</highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_depth_stencil_attachment_reference<sp/>Valid<sp/>pointer<sp/>to<sp/>the<sp/>depth/stencil<sp/>attachment<sp/>reference.</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_resolve_attachment_reference<sp/>Valid<sp/>pointer<sp/>to<sp/>the<sp/>resolve<sp/>attachment<sp/>reference.</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/>*<sp/>@param<sp/>preserve_attachment_count<sp/>Number<sp/>of<sp/>attachments<sp/>to<sp/>preserve.</highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_preserve_attachments<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>indices<sp/>of<sp/>attachments<sp/>to<sp/>preserve.</highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_subpass<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>newly<sp/>created<sp/>VkSubpassDescription.</highlight></codeline>
<codeline lineno="602"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605" refid="shVulkan_8h_1a57487fd38b85621eef744f36e2287516" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a57487fd38b85621eef744f36e2287516" kindref="member">shCreateSubpass</ref>(</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineBindPoint<sp/><sp/><sp/><sp/>bind_point,</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_attachment_count,</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>VkAttachmentReference*<sp/>p_input_attachments_reference,</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color_attachment_count,</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>VkAttachmentReference*<sp/>p_color_attachments_reference,</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>VkAttachmentReference*<sp/>p_depth_stencil_attachment_reference,</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>VkAttachmentReference*<sp/>p_resolve_attachment_reference,</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>preserve_attachment_count,</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_preserve_attachments,</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSubpassDescription*<sp/><sp/>p_subpass</highlight></codeline>
<codeline lineno="616"><highlight class="normal">);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="618"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="619"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>Vulkan<sp/>render<sp/>pass.</highlight></codeline>
<codeline lineno="620"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="621"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>a<sp/>render<sp/>pass<sp/>with<sp/>specified<sp/>attachments<sp/>and<sp/>subpasses.</highlight></codeline>
<codeline lineno="622"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>pointer<sp/>to<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/>*<sp/>@param<sp/>attachment_count<sp/>Number<sp/>of<sp/>attachments<sp/>in<sp/>the<sp/>render<sp/>pass.</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_attachments_descriptions<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>VkAttachmentDescription<sp/>structures.</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/>*<sp/>@param<sp/>subpass_count<sp/>Number<sp/>of<sp/>subpasses<sp/>in<sp/>the<sp/>render<sp/>pass.</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_subpasses<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>VkSubpassDescription<sp/>structures.</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_renderpass<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>newly<sp/>created<sp/>VkRenderPass.</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632" refid="shVulkan_8h_1a258c1642c763d6f157d4a1fdaa49a82e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a258c1642c763d6f157d4a1fdaa49a82e" kindref="member">shCreateRenderpass</ref>(</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attachment_count,</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>VkAttachmentDescription*<sp/>p_attachments_descriptions,</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subpass_count,</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSubpassDescription*<sp/><sp/><sp/><sp/>p_subpasses,</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>VkRenderPass*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_renderpass</highlight></codeline>
<codeline lineno="639"><highlight class="normal">);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="641"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>Vulkan<sp/>framebuffer.</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="644"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>a<sp/>framebuffer<sp/>with<sp/>specified<sp/>image<sp/>views<sp/>and<sp/>dimensions<sp/>for<sp/>use<sp/>with<sp/>a<sp/>render<sp/>pass.</highlight></codeline>
<codeline lineno="645"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="646"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="647"><highlight class="comment"><sp/>*<sp/>@param<sp/>renderpass<sp/>Valid<sp/>Vulkan<sp/>render<sp/>pass.</highlight></codeline>
<codeline lineno="648"><highlight class="comment"><sp/>*<sp/>@param<sp/>image_view_count<sp/>Number<sp/>of<sp/>image<sp/>views<sp/>in<sp/>the<sp/>framebuffer.</highlight></codeline>
<codeline lineno="649"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_image_views<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>VkImageView<sp/>handles.</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/>*<sp/>@param<sp/>x<sp/>Width<sp/>of<sp/>the<sp/>framebuffer.</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/>*<sp/>@param<sp/>y<sp/>Height<sp/>of<sp/>the<sp/>framebuffer.</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/>*<sp/>@param<sp/>z<sp/>Depth<sp/>of<sp/>the<sp/>framebuffer.</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_framebuffer<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>newly<sp/>created<sp/>VkFramebuffer.</highlight></codeline>
<codeline lineno="654"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657" refid="shVulkan_8h_1a291f5b0f8e182a85026f963afa2271f4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a291f5b0f8e182a85026f963afa2271f4" kindref="member">shCreateFramebuffer</ref>(</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>VkRenderPass<sp/><sp/><sp/>renderpass,</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>image_view_count,</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageView*<sp/><sp/><sp/>p_image_views,</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>x,</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>y,</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>z,</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFramebuffer*<sp/>p_framebuffer</highlight></codeline>
<codeline lineno="666"><highlight class="normal">);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="668"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Waits<sp/>for<sp/>a<sp/>Vulkan<sp/>device<sp/>to<sp/>become<sp/>idle.</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>waits<sp/>until<sp/>the<sp/>Vulkan<sp/>device<sp/>has<sp/>finished<sp/>all<sp/>its<sp/>operations.</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="674"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="675"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677" refid="shVulkan_8h_1a221d955d6c62b516c8b2b8fadd912275" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a221d955d6c62b516c8b2b8fadd912275" kindref="member">shWaitDeviceIdle</ref>(</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/>device</highlight></codeline>
<codeline lineno="679"><highlight class="normal">);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="681"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Destroys<sp/>a<sp/>Vulkan<sp/>swapchain.</highlight></codeline>
<codeline lineno="683"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="684"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>destroys<sp/>the<sp/>specified<sp/>Vulkan<sp/>swapchain.</highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/>*<sp/>@param<sp/>swapchain<sp/>Valid<sp/>VkSwapchainKHR<sp/>to<sp/>destroy.</highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="689"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="690"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691" refid="shVulkan_8h_1aeb246f0e807addb550fff82f8d26223a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1aeb246f0e807addb550fff82f8d26223a" kindref="member">shDestroySwapchain</ref>(</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSwapchainKHR<sp/>swapchain</highlight></codeline>
<codeline lineno="694"><highlight class="normal">);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="696"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Destroys<sp/>Vulkan<sp/>framebuffers.</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>destroys<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>framebuffers.</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="702"><highlight class="comment"><sp/>*<sp/>@param<sp/>framebuffer_count<sp/>Number<sp/>of<sp/>framebuffers<sp/>to<sp/>destroy.</highlight></codeline>
<codeline lineno="703"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_framebuffers<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>VkFramebuffer<sp/>handles.</highlight></codeline>
<codeline lineno="704"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707" refid="shVulkan_8h_1abfb12ee8df4b8599f6f01fe31ed65f6b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1abfb12ee8df4b8599f6f01fe31ed65f6b" kindref="member">shDestroyFramebuffers</ref>(</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>framebuffer_count,</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFramebuffer*<sp/>p_framebuffers</highlight></codeline>
<codeline lineno="711"><highlight class="normal">);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="713"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="714"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Destroys<sp/>Vulkan<sp/>image<sp/>views.</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>destroys<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>image<sp/>views.</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/>*<sp/>@param<sp/>image_view_count<sp/>Number<sp/>of<sp/>image<sp/>views<sp/>to<sp/>destroy.</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_image_views<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>VkImageView<sp/>handles.</highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="723"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724" refid="shVulkan_8h_1a8ad928e11f2e7c5dad11b1a284c2755c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a8ad928e11f2e7c5dad11b1a284c2755c" kindref="member">shDestroyImageViews</ref>(</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/>image_view_count,</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageView*<sp/>p_image_views</highlight></codeline>
<codeline lineno="728"><highlight class="normal">);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="730"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="731"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Destroys<sp/>a<sp/>Vulkan<sp/>surface.</highlight></codeline>
<codeline lineno="732"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="733"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>destroys<sp/>a<sp/>Vulkan<sp/>surface<sp/>associated<sp/>with<sp/>an<sp/>instance.</highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/>*<sp/>@param<sp/>instance<sp/>Valid<sp/>Vulkan<sp/>instance.</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/>*<sp/>@param<sp/>surface<sp/>Valid<sp/>VkSurfaceKHR<sp/>to<sp/>destroy.</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740" refid="shVulkan_8h_1a8d467c1ac1ad2ffbe2adda1c47370ed7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a8d467c1ac1ad2ffbe2adda1c47370ed7" kindref="member">shDestroySurface</ref>(</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>VkInstance<sp/><sp/><sp/>instance,</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSurfaceKHR<sp/>surface</highlight></codeline>
<codeline lineno="743"><highlight class="normal">);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="745"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Destroys<sp/>Vulkan<sp/>command<sp/>buffers.</highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>destroys<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>command<sp/>buffers<sp/>from<sp/>a<sp/>command<sp/>pool.</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/>*<sp/>@param<sp/>cmd_pool<sp/>Valid<sp/>Vulkan<sp/>command<sp/>pool.</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/>*<sp/>@param<sp/>cmd_buffer_count<sp/>Number<sp/>of<sp/>command<sp/>buffers<sp/>to<sp/>destroy.</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_cmd_buffers<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>VkCommandBuffer<sp/>handles.</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757" refid="shVulkan_8h_1a3d4ea1b86540f76b65e6a8c5f2c4c026" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a3d4ea1b86540f76b65e6a8c5f2c4c026" kindref="member">shDestroyCommandBuffers</ref>(</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandPool<sp/><sp/><sp/><sp/>cmd_pool,</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd_buffer_count,</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer*<sp/>p_cmd_buffers</highlight></codeline>
<codeline lineno="762"><highlight class="normal">);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="764"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="765"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Destroys<sp/>a<sp/>Vulkan<sp/>command<sp/>pool.</highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="767"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>destroys<sp/>a<sp/>Vulkan<sp/>command<sp/>pool.</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/>*<sp/>@param<sp/>cmd_pool<sp/>Valid<sp/>Vulkan<sp/>command<sp/>pool<sp/>to<sp/>destroy.</highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="772"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="773"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774" refid="shVulkan_8h_1ab0d0697b43c84db7e1d9cb136ff91b6f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1ab0d0697b43c84db7e1d9cb136ff91b6f" kindref="member">shDestroyCommandPool</ref>(</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandPool<sp/>cmd_pool</highlight></codeline>
<codeline lineno="777"><highlight class="normal">);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="779"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Destroys<sp/>a<sp/>Vulkan<sp/>render<sp/>pass.</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>destroys<sp/>a<sp/>Vulkan<sp/>render<sp/>pass.</highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="784"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="785"><highlight class="comment"><sp/>*<sp/>@param<sp/>render_pass<sp/>Valid<sp/>Vulkan<sp/>render<sp/>pass<sp/>to<sp/>destroy.</highlight></codeline>
<codeline lineno="786"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="787"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="788"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789" refid="shVulkan_8h_1a19fb63823338c43b4ee7d6daf5737b9b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a19fb63823338c43b4ee7d6daf5737b9b" kindref="member">shDestroyRenderpass</ref>(</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>VkRenderPass<sp/>render_pass</highlight></codeline>
<codeline lineno="792"><highlight class="normal">);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="794"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="795"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Destroys<sp/>a<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="796"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="797"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>destroys<sp/>a<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="798"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="799"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device<sp/>to<sp/>destroy.</highlight></codeline>
<codeline lineno="800"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803" refid="shVulkan_8h_1a64cfc5776d06bf298077c4a31277d4f0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a64cfc5776d06bf298077c4a31277d4f0" kindref="member">shDestroyDevice</ref>(</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/>device</highlight></codeline>
<codeline lineno="805"><highlight class="normal">);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="807"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Destroys<sp/>a<sp/>Vulkan<sp/>instance.</highlight></codeline>
<codeline lineno="809"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="810"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>destroys<sp/>a<sp/>Vulkan<sp/>instance.</highlight></codeline>
<codeline lineno="811"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="812"><highlight class="comment"><sp/>*<sp/>@param<sp/>instance<sp/>Valid<sp/>Vulkan<sp/>instance<sp/>to<sp/>destroy.</highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816" refid="shVulkan_8h_1a397935deaec415b4a18e1e67cd639ac0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a397935deaec415b4a18e1e67cd639ac0" kindref="member">shDestroyInstance</ref>(</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>VkInstance<sp/>instance</highlight></codeline>
<codeline lineno="818"><highlight class="normal">);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="820"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="821"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Resets<sp/>a<sp/>Vulkan<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="822"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="823"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>resets<sp/>a<sp/>command<sp/>buffer<sp/>to<sp/>the<sp/>initial<sp/>state.</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/>*<sp/>@param<sp/>cmd_buffer<sp/>Valid<sp/>Vulkan<sp/>command<sp/>buffer<sp/>to<sp/>reset.</highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829" refid="shVulkan_8h_1ace9dee2233a899d9d8b2aefe486cd0ab" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1ace9dee2233a899d9d8b2aefe486cd0ab" kindref="member">shResetCommandBuffer</ref>(</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/>cmd_buffer</highlight></codeline>
<codeline lineno="831"><highlight class="normal">);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="833"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Begins<sp/>recording<sp/>commands<sp/>into<sp/>a<sp/>Vulkan<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>begins<sp/>recording<sp/>commands<sp/>into<sp/>the<sp/>specified<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="838"><highlight class="comment"><sp/>*<sp/>@param<sp/>cmd_buffer<sp/>Valid<sp/>Vulkan<sp/>command<sp/>buffer<sp/>to<sp/>begin<sp/>recording.</highlight></codeline>
<codeline lineno="839"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="840"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="841"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842" refid="shVulkan_8h_1af3ffeb76f326f881c2df916234f30977" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1af3ffeb76f326f881c2df916234f30977" kindref="member">shBeginCommandBuffer</ref>(</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/>cmd_buffer</highlight></codeline>
<codeline lineno="844"><highlight class="normal">);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="846"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Ends<sp/>recording<sp/>commands<sp/>into<sp/>a<sp/>Vulkan<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="848"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="849"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>ends<sp/>the<sp/>recording<sp/>of<sp/>commands<sp/>into<sp/>the<sp/>specified<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="850"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="851"><highlight class="comment"><sp/>*<sp/>@param<sp/>cmd_buffer<sp/>Valid<sp/>Vulkan<sp/>command<sp/>buffer<sp/>to<sp/>end<sp/>recording.</highlight></codeline>
<codeline lineno="852"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="853"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855" refid="shVulkan_8h_1a3f8daf6ad33feb4fd115203fe4030949" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a3f8daf6ad33feb4fd115203fe4030949" kindref="member">shEndCommandBuffer</ref>(</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/>cmd_buffer</highlight></codeline>
<codeline lineno="857"><highlight class="normal">);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="859"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="860"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Dispatches<sp/>compute<sp/>work<sp/>from<sp/>a<sp/>Vulkan<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>dispatches<sp/>a<sp/>compute<sp/>workload<sp/>with<sp/>specified<sp/>group<sp/>counts.</highlight></codeline>
<codeline lineno="863"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/>*<sp/>@param<sp/>cmd_buffer<sp/>Valid<sp/>Vulkan<sp/>command<sp/>buffer<sp/>from<sp/>which<sp/>to<sp/>dispatch.</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/>*<sp/>@param<sp/>group_count_x<sp/>Number<sp/>of<sp/>groups<sp/>in<sp/>the<sp/>x<sp/>dimension.</highlight></codeline>
<codeline lineno="866"><highlight class="comment"><sp/>*<sp/>@param<sp/>group_count_y<sp/>Number<sp/>of<sp/>groups<sp/>in<sp/>the<sp/>y<sp/>dimension.</highlight></codeline>
<codeline lineno="867"><highlight class="comment"><sp/>*<sp/>@param<sp/>group_count_z<sp/>Number<sp/>of<sp/>groups<sp/>in<sp/>the<sp/>z<sp/>dimension.</highlight></codeline>
<codeline lineno="868"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="869"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="870"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871" refid="shVulkan_8h_1a82bed9cc5fef0693730d125c51b806fb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a82bed9cc5fef0693730d125c51b806fb" kindref="member">shCmdDispatch</ref>(</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/>cmd_buffer,</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>group_count_x,</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>group_count_y,</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>group_count_z</highlight></codeline>
<codeline lineno="876"><highlight class="normal">);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="878"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="879"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Submits<sp/>command<sp/>buffers<sp/>to<sp/>a<sp/>Vulkan<sp/>queue.</highlight></codeline>
<codeline lineno="880"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="881"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>submits<sp/>command<sp/>buffers<sp/>to<sp/>a<sp/>Vulkan<sp/>queue<sp/>and<sp/>optionally<sp/>waits<sp/>for<sp/>a<sp/>fence<sp/>and<sp/>signals<sp/>semaphores.</highlight></codeline>
<codeline lineno="882"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="883"><highlight class="comment"><sp/>*<sp/>@param<sp/>cmd_buffer_count<sp/>Number<sp/>of<sp/>command<sp/>buffers<sp/>to<sp/>submit.</highlight></codeline>
<codeline lineno="884"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_cmd_buffers<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>command<sp/>buffers.</highlight></codeline>
<codeline lineno="885"><highlight class="comment"><sp/>*<sp/>@param<sp/>queue<sp/>Valid<sp/>Vulkan<sp/>queue<sp/>to<sp/>which<sp/>to<sp/>submit.</highlight></codeline>
<codeline lineno="886"><highlight class="comment"><sp/>*<sp/>@param<sp/>fence<sp/>Valid<sp/>Vulkan<sp/>fence<sp/>to<sp/>signal<sp/>upon<sp/>completion.</highlight></codeline>
<codeline lineno="887"><highlight class="comment"><sp/>*<sp/>@param<sp/>semaphores_to_wait_for_count<sp/>Number<sp/>of<sp/>semaphores<sp/>to<sp/>wait<sp/>for.</highlight></codeline>
<codeline lineno="888"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_semaphores_to_wait_for<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>semaphores<sp/>to<sp/>wait<sp/>for.</highlight></codeline>
<codeline lineno="889"><highlight class="comment"><sp/>*<sp/>@param<sp/>wait_stage<sp/>Pipeline<sp/>stage<sp/>flags<sp/>to<sp/>wait<sp/>for.</highlight></codeline>
<codeline lineno="890"><highlight class="comment"><sp/>*<sp/>@param<sp/>signal_semaphore_count<sp/>Number<sp/>of<sp/>semaphores<sp/>to<sp/>signal.</highlight></codeline>
<codeline lineno="891"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_signal_semaphores<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>semaphores<sp/>to<sp/>signal.</highlight></codeline>
<codeline lineno="892"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="893"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="894"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895" refid="shVulkan_8h_1a6cd1a448b2b9710567e2f12d35459109" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a6cd1a448b2b9710567e2f12d35459109" kindref="member">shQueueSubmit</ref>(</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd_buffer_count,</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer*<sp/><sp/><sp/><sp/><sp/>p_cmd_buffers,</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>VkQueue<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue,</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFence<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fence,</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>semaphores_to_wait_for_count,</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSemaphore*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_semaphores_to_wait_for,</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineStageFlags<sp/>wait_stage,</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signal_semaphore_count,</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSemaphore*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_signal_semaphores</highlight></codeline>
<codeline lineno="905"><highlight class="normal">);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="907"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="908"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Waits<sp/>for<sp/>a<sp/>Vulkan<sp/>queue<sp/>to<sp/>become<sp/>idle.</highlight></codeline>
<codeline lineno="909"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="910"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>waits<sp/>until<sp/>the<sp/>Vulkan<sp/>queue<sp/>has<sp/>finished<sp/>all<sp/>its<sp/>operations.</highlight></codeline>
<codeline lineno="911"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="912"><highlight class="comment"><sp/>*<sp/>@param<sp/>queue<sp/>Valid<sp/>Vulkan<sp/>queue<sp/>to<sp/>wait<sp/>for.</highlight></codeline>
<codeline lineno="913"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916" refid="shVulkan_8h_1af404871916d00d12ff9244341000f0e4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1af404871916d00d12ff9244341000f0e4" kindref="member">shWaitForQueue</ref>(</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>VkQueue<sp/>queue</highlight></codeline>
<codeline lineno="918"><highlight class="normal">);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="920"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="921"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>Vulkan<sp/>fences.</highlight></codeline>
<codeline lineno="922"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="923"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>a<sp/>specified<sp/>number<sp/>of<sp/>Vulkan<sp/>fences.</highlight></codeline>
<codeline lineno="924"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="925"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="926"><highlight class="comment"><sp/>*<sp/>@param<sp/>fence_count<sp/>Number<sp/>of<sp/>fences<sp/>to<sp/>create.</highlight></codeline>
<codeline lineno="927"><highlight class="comment"><sp/>*<sp/>@param<sp/>signaled<sp/>Whether<sp/>to<sp/>initialize<sp/>fences<sp/>as<sp/>signaled.</highlight></codeline>
<codeline lineno="928"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_fences<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>newly<sp/>created<sp/>Vulkan<sp/>fences.</highlight></codeline>
<codeline lineno="929"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="930"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="931"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932" refid="shVulkan_8h_1a60a84381f852cc747db662c564c3f5e5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a60a84381f852cc747db662c564c3f5e5" kindref="member">shCreateFences</ref>(</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/>device,</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>fence_count,</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/>signaled,</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFence*<sp/>p_fences</highlight></codeline>
<codeline lineno="937"><highlight class="normal">);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="939"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="940"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>Vulkan<sp/>semaphores.</highlight></codeline>
<codeline lineno="941"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="942"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>a<sp/>specified<sp/>number<sp/>of<sp/>Vulkan<sp/>semaphores.</highlight></codeline>
<codeline lineno="943"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="944"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="945"><highlight class="comment"><sp/>*<sp/>@param<sp/>semaphore_count<sp/>Number<sp/>of<sp/>semaphores<sp/>to<sp/>create.</highlight></codeline>
<codeline lineno="946"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_semaphores<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>newly<sp/>created<sp/>Vulkan<sp/>semaphores.</highlight></codeline>
<codeline lineno="947"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="948"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="949"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950" refid="shVulkan_8h_1a82904fc4fffa81dfe9b466b4e93c63ef" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a82904fc4fffa81dfe9b466b4e93c63ef" kindref="member">shCreateSemaphores</ref>(</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/>semaphore_count,</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSemaphore*<sp/>p_semaphores</highlight></codeline>
<codeline lineno="954"><highlight class="normal">);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="956"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="957"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Destroys<sp/>Vulkan<sp/>fences.</highlight></codeline>
<codeline lineno="958"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="959"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>destroys<sp/>a<sp/>specified<sp/>number<sp/>of<sp/>Vulkan<sp/>fences.</highlight></codeline>
<codeline lineno="960"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="961"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="962"><highlight class="comment"><sp/>*<sp/>@param<sp/>fence_count<sp/>Number<sp/>of<sp/>fences<sp/>to<sp/>destroy.</highlight></codeline>
<codeline lineno="963"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_fences<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>fences<sp/>to<sp/>destroy.</highlight></codeline>
<codeline lineno="964"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="965"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="966"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967" refid="shVulkan_8h_1a025ccfbc53b3f2bf00a1d2f5290e115d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a025ccfbc53b3f2bf00a1d2f5290e115d" kindref="member">shDestroyFences</ref>(</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/>device,</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>fence_count,</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFence*<sp/>p_fences</highlight></codeline>
<codeline lineno="971"><highlight class="normal">);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="973"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="974"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Destroys<sp/>Vulkan<sp/>semaphores.</highlight></codeline>
<codeline lineno="975"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="976"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>destroys<sp/>a<sp/>specified<sp/>number<sp/>of<sp/>Vulkan<sp/>semaphores.</highlight></codeline>
<codeline lineno="977"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="978"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="979"><highlight class="comment"><sp/>*<sp/>@param<sp/>semaphore_count<sp/>Number<sp/>of<sp/>semaphores<sp/>to<sp/>destroy.</highlight></codeline>
<codeline lineno="980"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_semaphores<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>semaphores<sp/>to<sp/>destroy.</highlight></codeline>
<codeline lineno="981"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="982"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="983"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984" refid="shVulkan_8h_1a3785756a9434af94314db3ef872155ec" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a3785756a9434af94314db3ef872155ec" kindref="member">shDestroySemaphores</ref>(</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/>semaphore_count,</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSemaphore*<sp/>p_semaphores</highlight></codeline>
<codeline lineno="988"><highlight class="normal">);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="990"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="991"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Resets<sp/>Vulkan<sp/>fences.</highlight></codeline>
<codeline lineno="992"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="993"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>resets<sp/>a<sp/>specified<sp/>number<sp/>of<sp/>Vulkan<sp/>fences<sp/>to<sp/>their<sp/>initial<sp/>state.</highlight></codeline>
<codeline lineno="994"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="995"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="996"><highlight class="comment"><sp/>*<sp/>@param<sp/>fence_count<sp/>Number<sp/>of<sp/>fences<sp/>to<sp/>reset.</highlight></codeline>
<codeline lineno="997"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_fences<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>fences<sp/>to<sp/>reset.</highlight></codeline>
<codeline lineno="998"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="999"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1000"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001" refid="shVulkan_8h_1a9e3b777a9bded7b6d683ab4d334dc120" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a9e3b777a9bded7b6d683ab4d334dc120" kindref="member">shResetFences</ref>(</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/>device,</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>fence_count,</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFence*<sp/>p_fences</highlight></codeline>
<codeline lineno="1005"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1007"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1008"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Resets<sp/>Vulkan<sp/>semaphores.</highlight></codeline>
<codeline lineno="1009"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1010"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>resets<sp/>a<sp/>specified<sp/>number<sp/>of<sp/>Vulkan<sp/>semaphores<sp/>to<sp/>their<sp/>initial<sp/>state.</highlight></codeline>
<codeline lineno="1011"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1012"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="1013"><highlight class="comment"><sp/>*<sp/>@param<sp/>semaphore_count<sp/>Number<sp/>of<sp/>semaphores<sp/>to<sp/>reset.</highlight></codeline>
<codeline lineno="1014"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_semaphores<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>semaphores<sp/>to<sp/>reset.</highlight></codeline>
<codeline lineno="1015"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1016"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1017"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018" refid="shVulkan_8h_1aa961040591408bda2df704229f53b10c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1aa961040591408bda2df704229f53b10c" kindref="member">shResetSemaphores</ref>(</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/>semaphore_count,</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSemaphore*<sp/>p_semaphores</highlight></codeline>
<codeline lineno="1022"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1024"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1025"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Waits<sp/>for<sp/>Vulkan<sp/>fences<sp/>to<sp/>become<sp/>signaled.</highlight></codeline>
<codeline lineno="1026"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1027"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>waits<sp/>for<sp/>a<sp/>specified<sp/>number<sp/>of<sp/>Vulkan<sp/>fences<sp/>to<sp/>become<sp/>signaled.</highlight></codeline>
<codeline lineno="1028"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1029"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="1030"><highlight class="comment"><sp/>*<sp/>@param<sp/>fence_count<sp/>Number<sp/>of<sp/>fences<sp/>to<sp/>wait<sp/>for.</highlight></codeline>
<codeline lineno="1031"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_fences<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>fences<sp/>to<sp/>wait<sp/>for.</highlight></codeline>
<codeline lineno="1032"><highlight class="comment"><sp/>*<sp/>@param<sp/>wait_for_all<sp/>Whether<sp/>to<sp/>wait<sp/>for<sp/>all<sp/>fences<sp/>to<sp/>be<sp/>signaled.</highlight></codeline>
<codeline lineno="1033"><highlight class="comment"><sp/>*<sp/>@param<sp/>timeout_ns<sp/>Timeout<sp/>in<sp/>nanoseconds<sp/>to<sp/>wait<sp/>for<sp/>the<sp/>fences.</highlight></codeline>
<codeline lineno="1034"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1035"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1036"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037" refid="shVulkan_8h_1ac7b90bc8d4b8f2781770c3c3ac05019f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1ac7b90bc8d4b8f2781770c3c3ac05019f" kindref="member">shWaitForFences</ref>(</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/>device,</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>fence_count,</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFence*<sp/>p_fences,</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/>wait_for_all,</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>timeout_ns</highlight></codeline>
<codeline lineno="1043"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1045"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1046"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Waits<sp/>for<sp/>Vulkan<sp/>semaphores<sp/>to<sp/>become<sp/>signaled.</highlight></codeline>
<codeline lineno="1047"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1048"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>waits<sp/>for<sp/>a<sp/>specified<sp/>number<sp/>of<sp/>Vulkan<sp/>semaphores<sp/>to<sp/>become<sp/>signaled.</highlight></codeline>
<codeline lineno="1049"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1050"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="1051"><highlight class="comment"><sp/>*<sp/>@param<sp/>semaphore_count<sp/>Number<sp/>of<sp/>semaphores<sp/>to<sp/>wait<sp/>for.</highlight></codeline>
<codeline lineno="1052"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_semaphores<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>semaphores<sp/>to<sp/>wait<sp/>for.</highlight></codeline>
<codeline lineno="1053"><highlight class="comment"><sp/>*<sp/>@param<sp/>wait_for_all<sp/>Whether<sp/>to<sp/>wait<sp/>for<sp/>all<sp/>semaphores<sp/>to<sp/>be<sp/>signaled.</highlight></codeline>
<codeline lineno="1054"><highlight class="comment"><sp/>*<sp/>@param<sp/>timeout_ns<sp/>Timeout<sp/>in<sp/>nanoseconds<sp/>to<sp/>wait<sp/>for<sp/>the<sp/>semaphores.</highlight></codeline>
<codeline lineno="1055"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_semaphores_values<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>values<sp/>for<sp/>each<sp/>semaphore.</highlight></codeline>
<codeline lineno="1056"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1057"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1058"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059" refid="shVulkan_8h_1aaebc8f285804dcc9a4f74910abc2db73" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1aaebc8f285804dcc9a4f74910abc2db73" kindref="member">shWaitForSemaphores</ref>(</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/>semaphore_count,</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSemaphore*<sp/>p_semaphores,</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/>wait_for_all,</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><sp/><sp/><sp/><sp/>timeout_ns,</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t*<sp/><sp/><sp/><sp/>p_semaphores_values</highlight></codeline>
<codeline lineno="1066"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1068"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1069"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Acquires<sp/>an<sp/>image<sp/>from<sp/>the<sp/>Vulkan<sp/>swapchain.</highlight></codeline>
<codeline lineno="1070"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1071"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>acquires<sp/>an<sp/>image<sp/>from<sp/>the<sp/>specified<sp/>swapchain<sp/>and<sp/>optionally<sp/>signals<sp/>a<sp/>semaphore<sp/>or<sp/>fence.</highlight></codeline>
<codeline lineno="1072"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1073"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="1074"><highlight class="comment"><sp/>*<sp/>@param<sp/>swapchain<sp/>Valid<sp/>Vulkan<sp/>swapchain<sp/>from<sp/>which<sp/>to<sp/>acquire<sp/>an<sp/>image.</highlight></codeline>
<codeline lineno="1075"><highlight class="comment"><sp/>*<sp/>@param<sp/>timeout_ns<sp/>Timeout<sp/>in<sp/>nanoseconds<sp/>to<sp/>wait<sp/>for<sp/>the<sp/>image.</highlight></codeline>
<codeline lineno="1076"><highlight class="comment"><sp/>*<sp/>@param<sp/>acquired_signal_semaphore<sp/>Valid<sp/>Vulkan<sp/>semaphore<sp/>to<sp/>signal<sp/>upon<sp/>acquisition.</highlight></codeline>
<codeline lineno="1077"><highlight class="comment"><sp/>*<sp/>@param<sp/>acquired_signal_fence<sp/>Valid<sp/>Vulkan<sp/>fence<sp/>to<sp/>signal<sp/>upon<sp/>acquisition.</highlight></codeline>
<codeline lineno="1078"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_swapchain_image_index<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>index<sp/>of<sp/>the<sp/>acquired<sp/>swapchain<sp/>image.</highlight></codeline>
<codeline lineno="1079"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_swapchain_suboptimal<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>a<sp/>flag<sp/>indicating<sp/>if<sp/>the<sp/>swapchain<sp/>is<sp/>suboptimal.</highlight></codeline>
<codeline lineno="1080"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1081"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1082"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083" refid="shVulkan_8h_1a3d82b550f662b158986c904a1c6da096" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a3d82b550f662b158986c904a1c6da096" kindref="member">shAcquireSwapchainImage</ref>(</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSwapchainKHR<sp/>swapchain,</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout_ns,</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSemaphore<sp/><sp/><sp/><sp/>acquired_signal_semaphore,</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFence<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acquired_signal_fence,</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/><sp/><sp/><sp/><sp/><sp/>p_swapchain_image_index,</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_swapchain_suboptimal</highlight></codeline>
<codeline lineno="1091"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1093"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1094"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Begins<sp/>a<sp/>Vulkan<sp/>render<sp/>pass.</highlight></codeline>
<codeline lineno="1095"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1096"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>begins<sp/>recording<sp/>commands<sp/>for<sp/>a<sp/>render<sp/>pass<sp/>in<sp/>the<sp/>specified<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="1097"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1098"><highlight class="comment"><sp/>*<sp/>@param<sp/>graphics_cmd_buffer<sp/>Valid<sp/>Vulkan<sp/>command<sp/>buffer<sp/>to<sp/>begin<sp/>the<sp/>render<sp/>pass.</highlight></codeline>
<codeline lineno="1099"><highlight class="comment"><sp/>*<sp/>@param<sp/>renderpass<sp/>Valid<sp/>Vulkan<sp/>render<sp/>pass<sp/>to<sp/>begin.</highlight></codeline>
<codeline lineno="1100"><highlight class="comment"><sp/>*<sp/>@param<sp/>render_offset_x<sp/>X<sp/>offset<sp/>for<sp/>the<sp/>render<sp/>area.</highlight></codeline>
<codeline lineno="1101"><highlight class="comment"><sp/>*<sp/>@param<sp/>render_offset_y<sp/>Y<sp/>offset<sp/>for<sp/>the<sp/>render<sp/>area.</highlight></codeline>
<codeline lineno="1102"><highlight class="comment"><sp/>*<sp/>@param<sp/>render_size_x<sp/>Width<sp/>of<sp/>the<sp/>render<sp/>area.</highlight></codeline>
<codeline lineno="1103"><highlight class="comment"><sp/>*<sp/>@param<sp/>render_size_y<sp/>Height<sp/>of<sp/>the<sp/>render<sp/>area.</highlight></codeline>
<codeline lineno="1104"><highlight class="comment"><sp/>*<sp/>@param<sp/>clear_value_count<sp/>Number<sp/>of<sp/>clear<sp/>values.</highlight></codeline>
<codeline lineno="1105"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_clear_values<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>clear<sp/>values.</highlight></codeline>
<codeline lineno="1106"><highlight class="comment"><sp/>*<sp/>@param<sp/>framebuffer<sp/>Valid<sp/>Vulkan<sp/>framebuffer<sp/>to<sp/>use<sp/>for<sp/>the<sp/>render<sp/>pass.</highlight></codeline>
<codeline lineno="1107"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1108"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1109"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110" refid="shVulkan_8h_1a5889c0098b69fbc2c3fe5df27c4fddc9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a5889c0098b69fbc2c3fe5df27c4fddc9" kindref="member">shBeginRenderpass</ref>(</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/><sp/><sp/><sp/>graphics_cmd_buffer,</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>VkRenderPass<sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderpass,</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>render_offset_x,</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>render_offset_y,</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>render_size_x,</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>render_size_y,</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clear_value_count,</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>VkClearValue*<sp/><sp/><sp/><sp/><sp/><sp/>p_clear_values,</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFramebuffer<sp/><sp/><sp/><sp/><sp/><sp/>framebuffer</highlight></codeline>
<codeline lineno="1120"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1122"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1123"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Ends<sp/>a<sp/>Vulkan<sp/>render<sp/>pass.</highlight></codeline>
<codeline lineno="1124"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1125"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>ends<sp/>the<sp/>recording<sp/>of<sp/>commands<sp/>for<sp/>a<sp/>render<sp/>pass<sp/>in<sp/>the<sp/>specified<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="1126"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1127"><highlight class="comment"><sp/>*<sp/>@param<sp/>graphics_cmd_buffer<sp/>Valid<sp/>Vulkan<sp/>command<sp/>buffer<sp/>to<sp/>end<sp/>the<sp/>render<sp/>pass.</highlight></codeline>
<codeline lineno="1128"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1129"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1130"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131" refid="shVulkan_8h_1a14f8d9475ccb027ba58437108db87fa4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a14f8d9475ccb027ba58437108db87fa4" kindref="member">shEndRenderpass</ref>(</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/>graphics_cmd_buffer</highlight></codeline>
<codeline lineno="1133"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1135"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1136"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Records<sp/>a<sp/>draw<sp/>command<sp/>into<sp/>a<sp/>Vulkan<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="1137"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1138"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>records<sp/>a<sp/>draw<sp/>command<sp/>into<sp/>the<sp/>specified<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="1139"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1140"><highlight class="comment"><sp/>*<sp/>@param<sp/>graphics_cmd_buffer<sp/>Valid<sp/>Vulkan<sp/>command<sp/>buffer<sp/>to<sp/>record<sp/>the<sp/>draw<sp/>command.</highlight></codeline>
<codeline lineno="1141"><highlight class="comment"><sp/>*<sp/>@param<sp/>vertex_count<sp/>Number<sp/>of<sp/>vertices<sp/>to<sp/>draw.</highlight></codeline>
<codeline lineno="1142"><highlight class="comment"><sp/>*<sp/>@param<sp/>first_vertex<sp/>Index<sp/>of<sp/>the<sp/>first<sp/>vertex<sp/>to<sp/>draw.</highlight></codeline>
<codeline lineno="1143"><highlight class="comment"><sp/>*<sp/>@param<sp/>instance_count<sp/>Number<sp/>of<sp/>instances<sp/>to<sp/>draw.</highlight></codeline>
<codeline lineno="1144"><highlight class="comment"><sp/>*<sp/>@param<sp/>first_instance<sp/>Index<sp/>of<sp/>the<sp/>first<sp/>instance<sp/>to<sp/>draw.</highlight></codeline>
<codeline lineno="1145"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1146"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1147"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148" refid="shVulkan_8h_1a24a57e0a73cc90e2a1c099f8042b4ef1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a24a57e0a73cc90e2a1c099f8042b4ef1" kindref="member">shDraw</ref>(</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/>graphics_cmd_buffer,</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertex_count,</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_vertex,</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance_count,</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_instance</highlight></codeline>
<codeline lineno="1154"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1156"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1157"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Records<sp/>an<sp/>indexed<sp/>draw<sp/>command<sp/>into<sp/>a<sp/>Vulkan<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="1158"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1159"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>records<sp/>an<sp/>indexed<sp/>draw<sp/>command<sp/>into<sp/>the<sp/>specified<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="1160"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1161"><highlight class="comment"><sp/>*<sp/>@param<sp/>graphics_cmd_buffer<sp/>Valid<sp/>Vulkan<sp/>command<sp/>buffer<sp/>to<sp/>record<sp/>the<sp/>draw<sp/>command.</highlight></codeline>
<codeline lineno="1162"><highlight class="comment"><sp/>*<sp/>@param<sp/>index_count<sp/>Number<sp/>of<sp/>indices<sp/>to<sp/>draw.</highlight></codeline>
<codeline lineno="1163"><highlight class="comment"><sp/>*<sp/>@param<sp/>instance_count<sp/>Number<sp/>of<sp/>instances<sp/>to<sp/>draw.</highlight></codeline>
<codeline lineno="1164"><highlight class="comment"><sp/>*<sp/>@param<sp/>first_index<sp/>Index<sp/>of<sp/>the<sp/>first<sp/>index<sp/>to<sp/>draw.</highlight></codeline>
<codeline lineno="1165"><highlight class="comment"><sp/>*<sp/>@param<sp/>vertex_offset<sp/>Offset<sp/>added<sp/>to<sp/>each<sp/>index<sp/>to<sp/>obtain<sp/>the<sp/>vertex<sp/>index.</highlight></codeline>
<codeline lineno="1166"><highlight class="comment"><sp/>*<sp/>@param<sp/>first_instance<sp/>Index<sp/>of<sp/>the<sp/>first<sp/>instance<sp/>to<sp/>draw.</highlight></codeline>
<codeline lineno="1167"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1168"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1169"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170" refid="shVulkan_8h_1a0b30f274286f7d3f9feeb898a22d9320" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a0b30f274286f7d3f9feeb898a22d9320" kindref="member">shDrawIndexed</ref>(</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/>graphics_cmd_buffer,</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_count,</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance_count,</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_index,</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertex_offset,</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_instance</highlight></codeline>
<codeline lineno="1177"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1179"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1180"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Presents<sp/>an<sp/>image<sp/>from<sp/>a<sp/>Vulkan<sp/>swapchain<sp/>to<sp/>the<sp/>screen.</highlight></codeline>
<codeline lineno="1181"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1182"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>presents<sp/>an<sp/>image<sp/>from<sp/>the<sp/>specified<sp/>swapchain<sp/>using<sp/>the<sp/>provided<sp/>queue.</highlight></codeline>
<codeline lineno="1183"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1184"><highlight class="comment"><sp/>*<sp/>@param<sp/>present_queue<sp/>Valid<sp/>Vulkan<sp/>queue<sp/>to<sp/>present<sp/>the<sp/>image.</highlight></codeline>
<codeline lineno="1185"><highlight class="comment"><sp/>*<sp/>@param<sp/>semaphores_to_wait_for_count<sp/>Number<sp/>of<sp/>semaphores<sp/>to<sp/>wait<sp/>for<sp/>before<sp/>presenting.</highlight></codeline>
<codeline lineno="1186"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_semaphores_to_wait_for<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>semaphores<sp/>to<sp/>wait<sp/>for.</highlight></codeline>
<codeline lineno="1187"><highlight class="comment"><sp/>*<sp/>@param<sp/>swapchain<sp/>Valid<sp/>Vulkan<sp/>swapchain<sp/>containing<sp/>the<sp/>image<sp/>to<sp/>present.</highlight></codeline>
<codeline lineno="1188"><highlight class="comment"><sp/>*<sp/>@param<sp/>swapchain_image_idx<sp/>Index<sp/>of<sp/>the<sp/>swapchain<sp/>image<sp/>to<sp/>present.</highlight></codeline>
<codeline lineno="1189"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1190"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1191"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192" refid="shVulkan_8h_1a1ebf776806cb2ee99ab0a86b075da8ac" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a1ebf776806cb2ee99ab0a86b075da8ac" kindref="member">shQueuePresentSwapchainImage</ref>(</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>VkQueue<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>present_queue,</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>semaphores_to_wait_for_count,</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSemaphore*<sp/><sp/><sp/>p_semaphores_to_wait_for,</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSwapchainKHR<sp/>swapchain,</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>swapchain_image_idx</highlight></codeline>
<codeline lineno="1198"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202" refid="shVulkan_8h_1af5b3da538ae24e044689f28fe523a42a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_VEC1_SIGNED_FLOAT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_FORMAT_R32_SFLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203" refid="shVulkan_8h_1ae4499e0115203b2c721bfbc53176d35a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_VEC2_SIGNED_FLOAT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_FORMAT_R32G32_SFLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204" refid="shVulkan_8h_1a929ba4d5d4ae88889ff14a262d5ac887" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_VEC3_SIGNED_FLOAT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_FORMAT_R32G32B32_SFLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205" refid="shVulkan_8h_1a46252a0e328f725b1ec724a70d273550" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_VEC4_SIGNED_FLOAT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_FORMAT_R32G32B32A32_SFLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207" refid="shVulkan_8h_1a1b119c02978356e404ef7b56f735d45e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_VEC1_SIGNED_DOUBLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_FORMAT_R64_SFLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208" refid="shVulkan_8h_1acc71d2945b9cffcf4ca604d40ab4fb7a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_VEC2_SIGNED_DOUBLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_FORMAT_R64G64_SFLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209" refid="shVulkan_8h_1a71dcc53dda823ce72126717fb19f3de9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_VEC3_SIGNED_DOUBLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_FORMAT_R64G64B64_SFLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210" refid="shVulkan_8h_1aa4df58eba0840a5b9337779861fb6000" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_VEC4_SIGNED_DOUBLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_FORMAT_R64G64B64A64_SFLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212" refid="shVulkan_8h_1a3ece1ee5bc23c10f269f51e18694e8a3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_VEC1_SIGNED_INT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_FORMAT_R32_SINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213" refid="shVulkan_8h_1aada6c6ed20fea872700b1f4363a734a6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_VEC2_SIGNED_INT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_FORMAT_R32G32_SINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214" refid="shVulkan_8h_1a129e6896cacf696df6178fd16446d712" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_VEC3_SIGNED_INT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_FORMAT_R32G32B32_SINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215" refid="shVulkan_8h_1a6ad0039c5e5894ac26a305d703e2d68f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_VEC4_SIGNED_INT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_FORMAT_R32G32B32A32_SINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217" refid="shVulkan_8h_1a8d88110d9c717a0e20e04430248a7e01" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_VEC1_UNSIGNED_INT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_FORMAT_R32_UINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218" refid="shVulkan_8h_1a409b9943400664388340a3caec93a312" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_VEC2_UNSIGNED_INT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_FORMAT_R32G32_UINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219" refid="shVulkan_8h_1ae2bc14332982a606ddc247cfe10b022d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_VEC3_UNSIGNED_INT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_FORMAT_R32G32B32_UINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220" refid="shVulkan_8h_1aa3cc5d5fcfb8f5e437957939b75f2940" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_VEC4_UNSIGNED_INT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_FORMAT_R32G32B32A32_UINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222" refid="shVulkan_8h_1a0b14c396b38b2d7c69ecfe8728516203" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_VEC1_UNSIGNED_LONG<sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_FORMAT_R64_UINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223" refid="shVulkan_8h_1acca44d5469689461dee1111ff1bec388" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_VEC2_UNSIGNED_LONG<sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_FORMAT_R64G64_UINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224" refid="shVulkan_8h_1a3d262f8a5f1f9ac1cba54ca21d86e3d5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_VEC3_UNSIGNED_LONG<sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_FORMAT_R64G64B64_UINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225" refid="shVulkan_8h_1aa8f38bc72a2e0f7fd1720cf986bbcf1d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_VEC4_UNSIGNED_LONG<sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_FORMAT_R64G64B64A64_UINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1228"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1229"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>Vulkan<sp/>buffer.</highlight></codeline>
<codeline lineno="1230"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1231"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>a<sp/>Vulkan<sp/>buffer<sp/>with<sp/>the<sp/>specified<sp/>size<sp/>and<sp/>usage.</highlight></codeline>
<codeline lineno="1232"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1233"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="1234"><highlight class="comment"><sp/>*<sp/>@param<sp/>size<sp/>Size<sp/>of<sp/>the<sp/>buffer<sp/>in<sp/>bytes.</highlight></codeline>
<codeline lineno="1235"><highlight class="comment"><sp/>*<sp/>@param<sp/>usage<sp/>Vulkan<sp/>buffer<sp/>usage<sp/>flags<sp/>indicating<sp/>how<sp/>the<sp/>buffer<sp/>will<sp/>be<sp/>used.</highlight></codeline>
<codeline lineno="1236"><highlight class="comment"><sp/>*<sp/>@param<sp/>sharing_mode<sp/>Vulkan<sp/>sharing<sp/>mode<sp/>specifying<sp/>how<sp/>the<sp/>buffer<sp/>is<sp/>shared<sp/>between<sp/>queues.</highlight></codeline>
<codeline lineno="1237"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_buffer<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>newly<sp/>created<sp/>Vulkan<sp/>buffer.</highlight></codeline>
<codeline lineno="1238"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1239"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1240"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241" refid="shVulkan_8h_1a8f8a64418cda82169cdd2978899e1f98" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a8f8a64418cda82169cdd2978899e1f98" kindref="member">shCreateBuffer</ref>(</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size,</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBufferUsageFlags<sp/>usage,</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSharingMode<sp/><sp/><sp/><sp/><sp/><sp/>sharing_mode,</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBuffer*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_buffer</highlight></codeline>
<codeline lineno="1247"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1249"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1250"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Retrieves<sp/>the<sp/>memory<sp/>type<sp/>index<sp/>that<sp/>supports<sp/>the<sp/>specified<sp/>memory<sp/>properties.</highlight></codeline>
<codeline lineno="1251"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1252"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>finds<sp/>the<sp/>index<sp/>of<sp/>a<sp/>memory<sp/>type<sp/>that<sp/>matches<sp/>the<sp/>specified<sp/>memory<sp/>property<sp/>flags.</highlight></codeline>
<codeline lineno="1253"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1254"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="1255"><highlight class="comment"><sp/>*<sp/>@param<sp/>physical_device<sp/>Valid<sp/>Vulkan<sp/>physical<sp/>device.</highlight></codeline>
<codeline lineno="1256"><highlight class="comment"><sp/>*<sp/>@param<sp/>property_flags<sp/>Vulkan<sp/>memory<sp/>property<sp/>flags<sp/>to<sp/>match.</highlight></codeline>
<codeline lineno="1257"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_memory_type_index<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>index<sp/>of<sp/>the<sp/>memory<sp/>type.</highlight></codeline>
<codeline lineno="1258"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1259"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1260"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261" refid="shVulkan_8h_1a2a807a098afaf45caff7964250e912f5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a2a807a098afaf45caff7964250e912f5" kindref="member">shGetMemoryType</ref>(</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPhysicalDevice<sp/><sp/><sp/><sp/><sp/><sp/>physical_device,</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>VkMemoryPropertyFlags<sp/>property_flags,</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_memory_type_index</highlight></codeline>
<codeline lineno="1266"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1268"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1269"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Allocates<sp/>memory<sp/>for<sp/>a<sp/>Vulkan<sp/>buffer.</highlight></codeline>
<codeline lineno="1270"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1271"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>allocates<sp/>memory<sp/>for<sp/>a<sp/>specified<sp/>Vulkan<sp/>buffer<sp/>with<sp/>the<sp/>desired<sp/>memory<sp/>properties.</highlight></codeline>
<codeline lineno="1272"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1273"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="1274"><highlight class="comment"><sp/>*<sp/>@param<sp/>physical_device<sp/>Valid<sp/>Vulkan<sp/>physical<sp/>device.</highlight></codeline>
<codeline lineno="1275"><highlight class="comment"><sp/>*<sp/>@param<sp/>buffer<sp/>Valid<sp/>Vulkan<sp/>buffer<sp/>for<sp/>which<sp/>memory<sp/>is<sp/>to<sp/>be<sp/>allocated.</highlight></codeline>
<codeline lineno="1276"><highlight class="comment"><sp/>*<sp/>@param<sp/>property_flags<sp/>Vulkan<sp/>memory<sp/>property<sp/>flags<sp/>for<sp/>the<sp/>allocated<sp/>memory.</highlight></codeline>
<codeline lineno="1277"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_memory<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>newly<sp/>allocated<sp/>Vulkan<sp/>device<sp/>memory.</highlight></codeline>
<codeline lineno="1278"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1279"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1280"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281" refid="shVulkan_8h_1ab059596a5bf5ae02d5063cf821b506e5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1ab059596a5bf5ae02d5063cf821b506e5" kindref="member">shAllocateBufferMemory</ref>(</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPhysicalDevice<sp/><sp/><sp/><sp/><sp/><sp/>physical_device,</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBuffer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer,</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>VkMemoryPropertyFlags<sp/>property_flags,</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceMemory*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_memory</highlight></codeline>
<codeline lineno="1287"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1289"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1290"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Copies<sp/>data<sp/>from<sp/>one<sp/>Vulkan<sp/>buffer<sp/>to<sp/>another.</highlight></codeline>
<codeline lineno="1291"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1292"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>copies<sp/>data<sp/>from<sp/>a<sp/>source<sp/>buffer<sp/>to<sp/>a<sp/>destination<sp/>buffer.</highlight></codeline>
<codeline lineno="1293"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1294"><highlight class="comment"><sp/>*<sp/>@param<sp/>transfer_cmd_buffer<sp/>Valid<sp/>Vulkan<sp/>command<sp/>buffer<sp/>for<sp/>the<sp/>copy<sp/>operation.</highlight></codeline>
<codeline lineno="1295"><highlight class="comment"><sp/>*<sp/>@param<sp/>src_buffer<sp/>Valid<sp/>Vulkan<sp/>source<sp/>buffer.</highlight></codeline>
<codeline lineno="1296"><highlight class="comment"><sp/>*<sp/>@param<sp/>src_offset<sp/>Offset<sp/>in<sp/>the<sp/>source<sp/>buffer<sp/>to<sp/>start<sp/>copying<sp/>from.</highlight></codeline>
<codeline lineno="1297"><highlight class="comment"><sp/>*<sp/>@param<sp/>dst_offset<sp/>Offset<sp/>in<sp/>the<sp/>destination<sp/>buffer<sp/>to<sp/>start<sp/>copying<sp/>to.</highlight></codeline>
<codeline lineno="1298"><highlight class="comment"><sp/>*<sp/>@param<sp/>size<sp/>Number<sp/>of<sp/>bytes<sp/>to<sp/>copy.</highlight></codeline>
<codeline lineno="1299"><highlight class="comment"><sp/>*<sp/>@param<sp/>dst_buffer<sp/>Valid<sp/>Vulkan<sp/>destination<sp/>buffer.</highlight></codeline>
<codeline lineno="1300"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1301"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1302"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303" refid="shVulkan_8h_1a88908f30187bab0ff08d3afbc84458cc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a88908f30187bab0ff08d3afbc84458cc" kindref="member">shCopyBuffer</ref>(</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/>transfer_cmd_buffer,</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBuffer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_buffer,</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_offset,</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_offset,</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size,</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBuffer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_buffer</highlight></codeline>
<codeline lineno="1310"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312" refid="shVulkan_8h_1ad386ce3d06b9300c9d6cbcb221ec1ee9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_MAX_STACK_BUFFER_REGION_COUNT<sp/>256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1314"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1315"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Copies<sp/>multiple<sp/>regions<sp/>of<sp/>data<sp/>from<sp/>one<sp/>Vulkan<sp/>buffer<sp/>to<sp/>another.</highlight></codeline>
<codeline lineno="1316"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1317"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>copies<sp/>multiple<sp/>regions<sp/>of<sp/>data<sp/>from<sp/>a<sp/>source<sp/>buffer<sp/>to<sp/>a<sp/>destination<sp/>buffer.</highlight></codeline>
<codeline lineno="1318"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1319"><highlight class="comment"><sp/>*<sp/>@param<sp/>transfer_cmd_buffer<sp/>Valid<sp/>Vulkan<sp/>command<sp/>buffer<sp/>for<sp/>the<sp/>copy<sp/>operation.</highlight></codeline>
<codeline lineno="1320"><highlight class="comment"><sp/>*<sp/>@param<sp/>src_buffer<sp/>Valid<sp/>Vulkan<sp/>source<sp/>buffer.</highlight></codeline>
<codeline lineno="1321"><highlight class="comment"><sp/>*<sp/>@param<sp/>region_count<sp/>Number<sp/>of<sp/>regions<sp/>to<sp/>copy.</highlight></codeline>
<codeline lineno="1322"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_src_offsets<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>offsets<sp/>in<sp/>the<sp/>source<sp/>buffer.</highlight></codeline>
<codeline lineno="1323"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_dst_offsets<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>offsets<sp/>in<sp/>the<sp/>destination<sp/>buffer.</highlight></codeline>
<codeline lineno="1324"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_sizes<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>sizes<sp/>for<sp/>each<sp/>region<sp/>to<sp/>copy.</highlight></codeline>
<codeline lineno="1325"><highlight class="comment"><sp/>*<sp/>@param<sp/>dst_buffer<sp/>Valid<sp/>Vulkan<sp/>destination<sp/>buffer.</highlight></codeline>
<codeline lineno="1326"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1327"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1328"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329" refid="shVulkan_8h_1a1758a4d7503f4ea20d470d189edb8e3b" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="shVulkan_8h_1a1758a4d7503f4ea20d470d189edb8e3b" kindref="member">shCopyBufferRegions</ref>(</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/>transfer_cmd_buffer,</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBuffer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_buffer,</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>region_count,</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_src_offsets,</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_dst_offsets,</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_sizes,</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBuffer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_buffer</highlight></codeline>
<codeline lineno="1337"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight><highlight class="comment">//TODO<sp/>DOCUMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340" refid="shVulkan_8h_1ac3bf1d2ca1b1ce2cf8673df951fb2bf6" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="shVulkan_8h_1ac3bf1d2ca1b1ce2cf8673df951fb2bf6" kindref="member">shCopyImage</ref>(</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/><sp/><sp/><sp/>transfer_cmd_buffer,</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>height,</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageAspectFlags<sp/>src_image_aspect,</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageAspectFlags<sp/>dst_image_aspect,</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_image,</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_image</highlight></codeline>
<codeline lineno="1348"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1350"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1351"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Binds<sp/>a<sp/>Vulkan<sp/>buffer<sp/>to<sp/>a<sp/>specified<sp/>memory<sp/>offset.</highlight></codeline>
<codeline lineno="1352"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1353"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>binds<sp/>a<sp/>Vulkan<sp/>buffer<sp/>to<sp/>a<sp/>specific<sp/>memory<sp/>offset.</highlight></codeline>
<codeline lineno="1354"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1355"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="1356"><highlight class="comment"><sp/>*<sp/>@param<sp/>buffer<sp/>Valid<sp/>Vulkan<sp/>buffer<sp/>to<sp/>bind.</highlight></codeline>
<codeline lineno="1357"><highlight class="comment"><sp/>*<sp/>@param<sp/>offset<sp/>Offset<sp/>in<sp/>the<sp/>memory<sp/>where<sp/>the<sp/>buffer<sp/>will<sp/>be<sp/>bound.</highlight></codeline>
<codeline lineno="1358"><highlight class="comment"><sp/>*<sp/>@param<sp/>buffer_memory<sp/>Valid<sp/>Vulkan<sp/>device<sp/>memory<sp/>to<sp/>bind<sp/>to<sp/>the<sp/>buffer.</highlight></codeline>
<codeline lineno="1359"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1360"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1361"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362" refid="shVulkan_8h_1af810507ba72a2201519c71fc1a1f2125" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1af810507ba72a2201519c71fc1a1f2125" kindref="member">shBindBufferMemory</ref>(</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBuffer<sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer,</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset,</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceMemory<sp/>buffer_memory</highlight></codeline>
<codeline lineno="1367"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight><highlight class="comment">//TODO</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1371"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1372"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Reads<sp/>data<sp/>from<sp/>a<sp/>Vulkan<sp/>memory<sp/>object.</highlight></codeline>
<codeline lineno="1373"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1374"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>reads<sp/>data<sp/>from<sp/>a<sp/>specified<sp/>offset<sp/>in<sp/>a<sp/>Vulkan<sp/>memory<sp/>object<sp/>into<sp/>a<sp/>user-provided<sp/>buffer.</highlight></codeline>
<codeline lineno="1375"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1376"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="1377"><highlight class="comment"><sp/>*<sp/>@param<sp/>memory<sp/>Valid<sp/>Vulkan<sp/>device<sp/>memory<sp/>to<sp/>read<sp/>from.</highlight></codeline>
<codeline lineno="1378"><highlight class="comment"><sp/>*<sp/>@param<sp/>offset<sp/>Offset<sp/>in<sp/>the<sp/>memory<sp/>to<sp/>start<sp/>reading<sp/>from.</highlight></codeline>
<codeline lineno="1379"><highlight class="comment"><sp/>*<sp/>@param<sp/>data_size<sp/>Number<sp/>of<sp/>bytes<sp/>to<sp/>read.</highlight></codeline>
<codeline lineno="1380"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_data<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>a<sp/>buffer<sp/>to<sp/>store<sp/>the<sp/>read<sp/>data.</highlight></codeline>
<codeline lineno="1381"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1382"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1383"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384" refid="shVulkan_8h_1aa823fb95bcc1b79a23394046e2566d41" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1aa823fb95bcc1b79a23394046e2566d41" kindref="member">shReadMemory</ref>(</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceMemory<sp/>memory,</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset,</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_size,</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp_map_data,</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_dst_data</highlight></codeline>
<codeline lineno="1391"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight><highlight class="comment">//TODO<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394" refid="shVulkan_8h_1a1907762caa24a7af9c85a0a511b004f2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a1907762caa24a7af9c85a0a511b004f2" kindref="member">shUnmapMemory</ref>(</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceMemory<sp/>memory</highlight></codeline>
<codeline lineno="1397"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1399"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1400"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Writes<sp/>data<sp/>to<sp/>a<sp/>Vulkan<sp/>memory<sp/>object.</highlight></codeline>
<codeline lineno="1401"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1402"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>writes<sp/>data<sp/>from<sp/>a<sp/>user-provided<sp/>buffer<sp/>to<sp/>a<sp/>specified<sp/>offset<sp/>in<sp/>a<sp/>Vulkan<sp/>memory<sp/>object.</highlight></codeline>
<codeline lineno="1403"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1404"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="1405"><highlight class="comment"><sp/>*<sp/>@param<sp/>memory<sp/>Valid<sp/>Vulkan<sp/>device<sp/>memory<sp/>to<sp/>write<sp/>to.</highlight></codeline>
<codeline lineno="1406"><highlight class="comment"><sp/>*<sp/>@param<sp/>offset<sp/>Offset<sp/>in<sp/>the<sp/>memory<sp/>to<sp/>start<sp/>writing<sp/>to.</highlight></codeline>
<codeline lineno="1407"><highlight class="comment"><sp/>*<sp/>@param<sp/>data_size<sp/>Number<sp/>of<sp/>bytes<sp/>to<sp/>write.</highlight></codeline>
<codeline lineno="1408"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_data<sp/>Valid<sp/>pointer<sp/>to<sp/>a<sp/>buffer<sp/>containing<sp/>the<sp/>data<sp/>to<sp/>write.</highlight></codeline>
<codeline lineno="1409"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1410"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1411"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412" refid="shVulkan_8h_1a2e99eee8a784324373dac95ff82580bc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a2e99eee8a784324373dac95ff82580bc" kindref="member">shWriteMemory</ref>(</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceMemory<sp/>memory,</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset,</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_size,</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_data</highlight></codeline>
<codeline lineno="1418"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1420"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1421"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Clears<sp/>memory<sp/>associated<sp/>with<sp/>a<sp/>Vulkan<sp/>buffer.</highlight></codeline>
<codeline lineno="1422"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1423"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>clears<sp/>the<sp/>memory<sp/>bound<sp/>to<sp/>a<sp/>Vulkan<sp/>buffer.</highlight></codeline>
<codeline lineno="1424"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1425"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="1426"><highlight class="comment"><sp/>*<sp/>@param<sp/>buffer<sp/>Valid<sp/>Vulkan<sp/>buffer.</highlight></codeline>
<codeline lineno="1427"><highlight class="comment"><sp/>*<sp/>@param<sp/>memory<sp/>Valid<sp/>Vulkan<sp/>device<sp/>memory<sp/>bound<sp/>to<sp/>the<sp/>buffer.</highlight></codeline>
<codeline lineno="1428"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1429"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1430"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431" refid="shVulkan_8h_1aed51494291a04145494c15eb5531f09d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1aed51494291a04145494c15eb5531f09d" kindref="member">shClearBufferMemory</ref>(</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBuffer<sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer,</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceMemory<sp/>memory</highlight></codeline>
<codeline lineno="1435"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1437"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1438"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>Vulkan<sp/>image.</highlight></codeline>
<codeline lineno="1439"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1440"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>a<sp/>Vulkan<sp/>image<sp/>with<sp/>the<sp/>specified<sp/>parameters.</highlight></codeline>
<codeline lineno="1441"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1442"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="1443"><highlight class="comment"><sp/>*<sp/>@param<sp/>type<sp/>Vulkan<sp/>image<sp/>type.</highlight></codeline>
<codeline lineno="1444"><highlight class="comment"><sp/>*<sp/>@param<sp/>x<sp/>Width<sp/>of<sp/>the<sp/>image.</highlight></codeline>
<codeline lineno="1445"><highlight class="comment"><sp/>*<sp/>@param<sp/>y<sp/>Height<sp/>of<sp/>the<sp/>image.</highlight></codeline>
<codeline lineno="1446"><highlight class="comment"><sp/>*<sp/>@param<sp/>z<sp/>Depth<sp/>of<sp/>the<sp/>image.</highlight></codeline>
<codeline lineno="1447"><highlight class="comment"><sp/>*<sp/>@param<sp/>format<sp/>Vulkan<sp/>image<sp/>format.</highlight></codeline>
<codeline lineno="1448"><highlight class="comment"><sp/>*<sp/>@param<sp/>mip_levels<sp/>Number<sp/>of<sp/>mipmap<sp/>levels.</highlight></codeline>
<codeline lineno="1449"><highlight class="comment"><sp/>*<sp/>@param<sp/>sample_count<sp/>Vulkan<sp/>sample<sp/>count<sp/>flag<sp/>bits.</highlight></codeline>
<codeline lineno="1450"><highlight class="comment"><sp/>*<sp/>@param<sp/>image_tiling<sp/>Vulkan<sp/>image<sp/>tiling<sp/>mode.</highlight></codeline>
<codeline lineno="1451"><highlight class="comment"><sp/>*<sp/>@param<sp/>usage<sp/>Vulkan<sp/>image<sp/>usage<sp/>flags.</highlight></codeline>
<codeline lineno="1452"><highlight class="comment"><sp/>*<sp/>@param<sp/>sharing_mode<sp/>Vulkan<sp/>sharing<sp/>mode.</highlight></codeline>
<codeline lineno="1453"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_image<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>newly<sp/>created<sp/>Vulkan<sp/>image.</highlight></codeline>
<codeline lineno="1454"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1455"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1456"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457" refid="shVulkan_8h_1a94fdd493b11aa6605d0e7d138facf2dd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a94fdd493b11aa6605d0e7d138facf2dd" kindref="member">shCreateImage</ref>(</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type,</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x,</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y,</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z,</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFormat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format,</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mip_levels,</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSampleCountFlagBits<sp/>sample_count,</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageTiling<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image_tiling,</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageUsageFlags<sp/><sp/><sp/><sp/><sp/>usage,</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSharingMode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sharing_mode,</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImage*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_image</highlight></codeline>
<codeline lineno="1470"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1472"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1473"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Allocates<sp/>memory<sp/>for<sp/>a<sp/>Vulkan<sp/>image.</highlight></codeline>
<codeline lineno="1474"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1475"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>allocates<sp/>memory<sp/>for<sp/>a<sp/>specified<sp/>Vulkan<sp/>image<sp/>with<sp/>the<sp/>desired<sp/>memory<sp/>properties.</highlight></codeline>
<codeline lineno="1476"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1477"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="1478"><highlight class="comment"><sp/>*<sp/>@param<sp/>physical_device<sp/>Valid<sp/>Vulkan<sp/>physical<sp/>device.</highlight></codeline>
<codeline lineno="1479"><highlight class="comment"><sp/>*<sp/>@param<sp/>image<sp/>Valid<sp/>Vulkan<sp/>image<sp/>for<sp/>which<sp/>memory<sp/>is<sp/>to<sp/>be<sp/>allocated.</highlight></codeline>
<codeline lineno="1480"><highlight class="comment"><sp/>*<sp/>@param<sp/>memory_property_flags<sp/>Vulkan<sp/>memory<sp/>property<sp/>flags<sp/>for<sp/>the<sp/>allocated<sp/>memory.</highlight></codeline>
<codeline lineno="1481"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_image_memory<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>newly<sp/>allocated<sp/>Vulkan<sp/>device<sp/>memory.</highlight></codeline>
<codeline lineno="1482"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1483"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1484"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485" refid="shVulkan_8h_1ac05cd94a0e91ce7b4cfc81f596b45795" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1ac05cd94a0e91ce7b4cfc81f596b45795" kindref="member">shAllocateImageMemory</ref>(</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPhysicalDevice<sp/><sp/><sp/><sp/><sp/><sp/>physical_device,</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image,</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>VkMemoryPropertyFlags<sp/>memory_property_flags,</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceMemory*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_image_memory</highlight></codeline>
<codeline lineno="1491"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1493"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1494"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Binds<sp/>a<sp/>Vulkan<sp/>image<sp/>to<sp/>a<sp/>specified<sp/>memory<sp/>offset.</highlight></codeline>
<codeline lineno="1495"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1496"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>binds<sp/>a<sp/>Vulkan<sp/>image<sp/>to<sp/>a<sp/>specific<sp/>memory<sp/>offset.</highlight></codeline>
<codeline lineno="1497"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1498"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="1499"><highlight class="comment"><sp/>*<sp/>@param<sp/>image<sp/>Valid<sp/>Vulkan<sp/>image<sp/>to<sp/>bind.</highlight></codeline>
<codeline lineno="1500"><highlight class="comment"><sp/>*<sp/>@param<sp/>offset<sp/>Offset<sp/>in<sp/>the<sp/>memory<sp/>where<sp/>the<sp/>image<sp/>will<sp/>be<sp/>bound.</highlight></codeline>
<codeline lineno="1501"><highlight class="comment"><sp/>*<sp/>@param<sp/>image_memory<sp/>Valid<sp/>Vulkan<sp/>device<sp/>memory<sp/>to<sp/>bind<sp/>to<sp/>the<sp/>image.</highlight></codeline>
<codeline lineno="1502"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1503"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1504"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505" refid="shVulkan_8h_1a915b19160bec4ae84922a6faad52f53c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a915b19160bec4ae84922a6faad52f53c" kindref="member">shBindImageMemory</ref>(</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image,</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset,</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceMemory<sp/>image_memory</highlight></codeline>
<codeline lineno="1510"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1512"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1513"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Clears<sp/>memory<sp/>associated<sp/>with<sp/>a<sp/>Vulkan<sp/>image.</highlight></codeline>
<codeline lineno="1514"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1515"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>clears<sp/>the<sp/>memory<sp/>bound<sp/>to<sp/>a<sp/>Vulkan<sp/>image.</highlight></codeline>
<codeline lineno="1516"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1517"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="1518"><highlight class="comment"><sp/>*<sp/>@param<sp/>image<sp/>Valid<sp/>Vulkan<sp/>image.</highlight></codeline>
<codeline lineno="1519"><highlight class="comment"><sp/>*<sp/>@param<sp/>image_memory<sp/>Valid<sp/>Vulkan<sp/>device<sp/>memory<sp/>bound<sp/>to<sp/>the<sp/>image.</highlight></codeline>
<codeline lineno="1520"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1521"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1522"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1523" refid="shVulkan_8h_1ad4fdc1d058c2e8566b99c570a8eb8915" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1ad4fdc1d058c2e8566b99c570a8eb8915" kindref="member">shClearImageMemory</ref>(</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image,</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceMemory<sp/>image_memory</highlight></codeline>
<codeline lineno="1527"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight><highlight class="comment">//TODO<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530" refid="shVulkan_8h_1a49de1107c7467d37458ba5c127a6d479" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a49de1107c7467d37458ba5c127a6d479" kindref="member">shGetImageSubresourceLayout</ref>(</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image,</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageAspectFlags<sp/><sp/><sp/>image_aspect_mask,</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSubresourceLayout*<sp/>p_subresource_layout</highlight></codeline>
<codeline lineno="1535"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1537"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1538"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>buffer<sp/>memory<sp/>barrier</highlight></codeline>
<codeline lineno="1539"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1540"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>a<sp/>buffer<sp/>memory<sp/>barrier<sp/>to<sp/>synchronize<sp/>buffer<sp/>memory<sp/>access<sp/>(e.g.<sp/>read,<sp/>write,<sp/>transfer).</highlight></codeline>
<codeline lineno="1541"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1542"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="1543"><highlight class="comment"><sp/>*<sp/>@param<sp/>cmd_buffer<sp/>Valid<sp/>Vulkan<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="1544"><highlight class="comment"><sp/>*<sp/>@param<sp/>buffer<sp/>Valid<sp/>Vulkan<sp/>buffer<sp/>(target<sp/>of<sp/>the<sp/>barrier).</highlight></codeline>
<codeline lineno="1545"><highlight class="comment"><sp/>*<sp/>@param<sp/>access_before_barrier<sp/>Memory<sp/>access<sp/>flag<sp/>before<sp/>the<sp/>barrier.</highlight></codeline>
<codeline lineno="1546"><highlight class="comment"><sp/>*<sp/>@param<sp/>access_after_barrier<sp/>Memory<sp/>access<sp/>flag<sp/>sfter<sp/>the<sp/>barrier.</highlight></codeline>
<codeline lineno="1547"><highlight class="comment"><sp/>*<sp/>@param<sp/>performing_queue_family_index_before_barrier<sp/>Performing<sp/>queue<sp/>family<sp/>index<sp/>before<sp/>the<sp/>barrier.</highlight></codeline>
<codeline lineno="1548"><highlight class="comment"><sp/>*<sp/>@param<sp/>performing_queue_family_index_after_barrier<sp/>Performing<sp/>queue<sp/>family<sp/>index<sp/>before<sp/>the<sp/>barrier.</highlight></codeline>
<codeline lineno="1549"><highlight class="comment"><sp/>*<sp/>@param<sp/>pipeline_stage_before_barrier<sp/>Pipeline<sp/>stage<sp/>flag<sp/>before<sp/>the<sp/>barrier.</highlight></codeline>
<codeline lineno="1550"><highlight class="comment"><sp/>*<sp/>@param<sp/>pipeline_stage_after_barrier<sp/>Pipeline<sp/>stage<sp/>flag<sp/>after<sp/>the<sp/>barrier.</highlight></codeline>
<codeline lineno="1551"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1552"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1553"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1554" refid="shVulkan_8h_1a7526501d7f3603d2cb7b091903e4ef9c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a7526501d7f3603d2cb7b091903e4ef9c" kindref="member">shSetBufferMemoryBarrier</ref>(</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/><sp/><sp/><sp/><sp/><sp/>cmd_buffer,</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBuffer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer,</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/>VkAccessFlags<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>access_before_barrier,</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/>VkAccessFlags<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>access_after_barrier,</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>performing_queue_family_index_before_barrier,</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>performing_queue_family_index_after_barrier,</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineStageFlags<sp/>pipeline_stage_before_barrier,</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineStageFlags<sp/>pipeline_stage_after_barrier</highlight></codeline>
<codeline lineno="1564"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1566"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1567"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>an<sp/>image<sp/>memory<sp/>barrier</highlight></codeline>
<codeline lineno="1568"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1569"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>an<sp/>image<sp/>memory<sp/>barrier<sp/>to<sp/>synchronize<sp/>image<sp/>memory<sp/>access<sp/>(e.g.<sp/>read,<sp/>write,<sp/>transfer).</highlight></codeline>
<codeline lineno="1570"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1571"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="1572"><highlight class="comment"><sp/>*<sp/>@param<sp/>cmd_buffer<sp/>Valid<sp/>Vulkan<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="1573"><highlight class="comment"><sp/>*<sp/>@param<sp/>image<sp/>Valid<sp/>Vulkan<sp/>image<sp/>(target<sp/>of<sp/>the<sp/>barrier).</highlight></codeline>
<codeline lineno="1574"><highlight class="comment"><sp/>*<sp/>@param<sp/>image_aspect_mask<sp/>Target<sp/>image<sp/>aspect<sp/>mask.</highlight></codeline>
<codeline lineno="1575"><highlight class="comment"><sp/>*<sp/>@param<sp/>access_before_barrier<sp/>Memory<sp/>access<sp/>flag<sp/>before<sp/>the<sp/>barrier.</highlight></codeline>
<codeline lineno="1576"><highlight class="comment"><sp/>*<sp/>@param<sp/>access_after_barrier<sp/>Memory<sp/>access<sp/>flag<sp/>sfter<sp/>the<sp/>barrier.</highlight></codeline>
<codeline lineno="1577"><highlight class="comment"><sp/>*<sp/>@param<sp/>image_layout_before_barrier<sp/>Image<sp/>layout<sp/>before<sp/>the<sp/>barrier.</highlight></codeline>
<codeline lineno="1578"><highlight class="comment"><sp/>*<sp/>@param<sp/>image_layout_after_barrier<sp/>Image<sp/>layout<sp/>before<sp/>the<sp/>barrier.</highlight></codeline>
<codeline lineno="1579"><highlight class="comment"><sp/>*<sp/>@param<sp/>performing_queue_family_index_before_barrier<sp/>Performing<sp/>queue<sp/>family<sp/>index<sp/>before<sp/>the<sp/>barrier.</highlight></codeline>
<codeline lineno="1580"><highlight class="comment"><sp/>*<sp/>@param<sp/>performing_queue_family_index_after_barrier<sp/>Performing<sp/>queue<sp/>family<sp/>index<sp/>before<sp/>the<sp/>barrier.</highlight></codeline>
<codeline lineno="1581"><highlight class="comment"><sp/>*<sp/>@param<sp/>pipeline_stage_before_barrier<sp/>Pipeline<sp/>stage<sp/>flag<sp/>before<sp/>the<sp/>barrier.</highlight></codeline>
<codeline lineno="1582"><highlight class="comment"><sp/>*<sp/>@param<sp/>pipeline_stage_after_barrier<sp/>Pipeline<sp/>stage<sp/>flag<sp/>after<sp/>the<sp/>barrier.</highlight></codeline>
<codeline lineno="1583"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1584"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1585"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586" refid="shVulkan_8h_1a7fd95337f254d38f196f61644502efb4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a7fd95337f254d38f196f61644502efb4" kindref="member">shSetImageMemoryBarrier</ref>(</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/><sp/><sp/><sp/><sp/><sp/>cmd_buffer,</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image,</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageAspectFlags<sp/><sp/><sp/>image_aspect_mask,</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/>VkAccessFlags<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>access_before_barrier,</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/>VkAccessFlags<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>access_after_barrier,</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageLayout<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image_layout_before_barrier,</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageLayout<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image_layout_after_barrier,</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>performing_queue_family_index_before_barrier,</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>performing_queue_family_index_after_barrier,</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineStageFlags<sp/>pipeline_stage_before_barrier,</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineStageFlags<sp/>pipeline_stage_after_barrier</highlight></codeline>
<codeline lineno="1599"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1601"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1602"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Retrieves<sp/>memory<sp/>budget<sp/>properties<sp/>for<sp/>a<sp/>Vulkan<sp/>physical<sp/>device.</highlight></codeline>
<codeline lineno="1603"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1604"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>retrieves<sp/>memory<sp/>budget<sp/>properties<sp/>for<sp/>a<sp/>Vulkan<sp/>physical<sp/>device.</highlight></codeline>
<codeline lineno="1605"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1606"><highlight class="comment"><sp/>*<sp/>@param<sp/>physical_device<sp/>Valid<sp/>Vulkan<sp/>physical<sp/>device.</highlight></codeline>
<codeline lineno="1607"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_memory_budget_properties<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>Vulkan<sp/>memory<sp/>budget<sp/>properties.</highlight></codeline>
<codeline lineno="1608"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1609"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1610"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1611" refid="shVulkan_8h_1a7a7a14e234bf694e7c36e180f87bef56" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a7a7a14e234bf694e7c36e180f87bef56" kindref="member">shGetMemoryBudgetProperties</ref>(</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPhysicalDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>physical_device,</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPhysicalDeviceMemoryBudgetPropertiesEXT*<sp/>p_memory_budget_properties</highlight></codeline>
<codeline lineno="1614"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1616"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1617"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Binds<sp/>vertex<sp/>buffers<sp/>to<sp/>a<sp/>Vulkan<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="1618"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1619"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>binds<sp/>one<sp/>or<sp/>more<sp/>vertex<sp/>buffers<sp/>to<sp/>a<sp/>Vulkan<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="1620"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1621"><highlight class="comment"><sp/>*<sp/>@param<sp/>graphics_cmd_buffer<sp/>Valid<sp/>Vulkan<sp/>command<sp/>buffer<sp/>to<sp/>bind<sp/>vertex<sp/>buffers<sp/>to.</highlight></codeline>
<codeline lineno="1622"><highlight class="comment"><sp/>*<sp/>@param<sp/>first_binding<sp/>Binding<sp/>index<sp/>to<sp/>start<sp/>from.</highlight></codeline>
<codeline lineno="1623"><highlight class="comment"><sp/>*<sp/>@param<sp/>binding_count<sp/>Number<sp/>of<sp/>vertex<sp/>buffers<sp/>to<sp/>bind.</highlight></codeline>
<codeline lineno="1624"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_vertex_buffers<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>vertex<sp/>buffers.</highlight></codeline>
<codeline lineno="1625"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_vertex_offsets<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>offsets<sp/>for<sp/>each<sp/>vertex<sp/>buffer.</highlight></codeline>
<codeline lineno="1626"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1627"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1628"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629" refid="shVulkan_8h_1a745c59da40b16dd65f5758131b0f9c93" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a745c59da40b16dd65f5758131b0f9c93" kindref="member">shBindVertexBuffers</ref>(</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/>graphics_cmd_buffer,</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_binding,</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binding_count,</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBuffer*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_vertex_buffers,</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceSize*<sp/><sp/><sp/>p_vertex_offsets</highlight></codeline>
<codeline lineno="1635"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1637"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1638"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Binds<sp/>an<sp/>index<sp/>buffer<sp/>to<sp/>a<sp/>Vulkan<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="1639"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1640"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>binds<sp/>an<sp/>index<sp/>buffer<sp/>to<sp/>a<sp/>Vulkan<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="1641"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1642"><highlight class="comment"><sp/>*<sp/>@param<sp/>graphics_cmd_buffer<sp/>Valid<sp/>Vulkan<sp/>command<sp/>buffer<sp/>to<sp/>bind<sp/>the<sp/>index<sp/>buffer<sp/>to.</highlight></codeline>
<codeline lineno="1643"><highlight class="comment"><sp/>*<sp/>@param<sp/>index_offset<sp/>Offset<sp/>in<sp/>the<sp/>index<sp/>buffer.</highlight></codeline>
<codeline lineno="1644"><highlight class="comment"><sp/>*<sp/>@param<sp/>index_buffer<sp/>Valid<sp/>Vulkan<sp/>index<sp/>buffer<sp/>to<sp/>bind.</highlight></codeline>
<codeline lineno="1645"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1646"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1647"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1648" refid="shVulkan_8h_1a3165c83fc15953d791d54657e409ecbe" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a3165c83fc15953d791d54657e409ecbe" kindref="member">shBindIndexBuffer</ref>(</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/>graphics_cmd_buffer,</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_offset,</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBuffer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_buffer</highlight></codeline>
<codeline lineno="1652"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1654"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1655"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Sets<sp/>the<sp/>vertex<sp/>input<sp/>binding<sp/>description.</highlight></codeline>
<codeline lineno="1656"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1657"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>sets<sp/>the<sp/>vertex<sp/>input<sp/>binding<sp/>description<sp/>with<sp/>the<sp/>specified<sp/>parameters.</highlight></codeline>
<codeline lineno="1658"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1659"><highlight class="comment"><sp/>*<sp/>@param<sp/>binding<sp/>Binding<sp/>index<sp/>for<sp/>the<sp/>vertex<sp/>input<sp/>binding.</highlight></codeline>
<codeline lineno="1660"><highlight class="comment"><sp/>*<sp/>@param<sp/>size<sp/>Size<sp/>of<sp/>the<sp/>vertex<sp/>buffer<sp/>in<sp/>bytes.</highlight></codeline>
<codeline lineno="1661"><highlight class="comment"><sp/>*<sp/>@param<sp/>input_rate<sp/>Vertex<sp/>input<sp/>rate<sp/>(e.g.,<sp/>per<sp/>vertex<sp/>or<sp/>per<sp/>instance).</highlight></codeline>
<codeline lineno="1662"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_vertex_input_binding<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>Vulkan<sp/>vertex<sp/>input<sp/>binding<sp/>description.</highlight></codeline>
<codeline lineno="1663"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1664"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1665"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666" refid="shVulkan_8h_1a8dea157965ef7c15756861378f365a32" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a8dea157965ef7c15756861378f365a32" kindref="member">shSetVertexBinding</ref>(</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binding,</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size,</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/>VkVertexInputRate<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_rate,</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/>VkVertexInputBindingDescription*<sp/><sp/><sp/>p_vertex_input_binding</highlight></codeline>
<codeline lineno="1671"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1673"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1674"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Sets<sp/>the<sp/>vertex<sp/>attribute<sp/>description.</highlight></codeline>
<codeline lineno="1675"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1676"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>sets<sp/>the<sp/>vertex<sp/>attribute<sp/>description<sp/>with<sp/>the<sp/>specified<sp/>parameters.</highlight></codeline>
<codeline lineno="1677"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1678"><highlight class="comment"><sp/>*<sp/>@param<sp/>location<sp/>Location<sp/>of<sp/>the<sp/>vertex<sp/>attribute.</highlight></codeline>
<codeline lineno="1679"><highlight class="comment"><sp/>*<sp/>@param<sp/>binding<sp/>Binding<sp/>index<sp/>of<sp/>the<sp/>vertex<sp/>attribute.</highlight></codeline>
<codeline lineno="1680"><highlight class="comment"><sp/>*<sp/>@param<sp/>format<sp/>Vulkan<sp/>format<sp/>of<sp/>the<sp/>vertex<sp/>attribute.</highlight></codeline>
<codeline lineno="1681"><highlight class="comment"><sp/>*<sp/>@param<sp/>offset<sp/>Offset<sp/>in<sp/>the<sp/>vertex<sp/>buffer<sp/>where<sp/>the<sp/>attribute<sp/>starts.</highlight></codeline>
<codeline lineno="1682"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_vertex_input_attribute<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>Vulkan<sp/>vertex<sp/>input<sp/>attribute<sp/>description.</highlight></codeline>
<codeline lineno="1683"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1684"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1685"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686" refid="shVulkan_8h_1a0e42de138dec02dde8a7d4ed461f1ddd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a0e42de138dec02dde8a7d4ed461f1ddd" kindref="member">shSetVertexAttribute</ref>(</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>location,</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binding,</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFormat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format,</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset,</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>VkVertexInputAttributeDescription*<sp/>p_vertex_input_attribute</highlight></codeline>
<codeline lineno="1692"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1694"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1695"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Sets<sp/>the<sp/>vertex<sp/>input<sp/>state<sp/>for<sp/>a<sp/>pipeline.</highlight></codeline>
<codeline lineno="1696"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1697"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>sets<sp/>the<sp/>vertex<sp/>input<sp/>state,<sp/>including<sp/>bindings<sp/>and<sp/>attributes,<sp/>for<sp/>a<sp/>Vulkan<sp/>pipeline.</highlight></codeline>
<codeline lineno="1698"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1699"><highlight class="comment"><sp/>*<sp/>@param<sp/>vertex_binding_count<sp/>Number<sp/>of<sp/>vertex<sp/>input<sp/>bindings.</highlight></codeline>
<codeline lineno="1700"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_vertex_bindings<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>vertex<sp/>input<sp/>binding<sp/>descriptions.</highlight></codeline>
<codeline lineno="1701"><highlight class="comment"><sp/>*<sp/>@param<sp/>vertex_attribute_count<sp/>Number<sp/>of<sp/>vertex<sp/>input<sp/>attributes.</highlight></codeline>
<codeline lineno="1702"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_vertex_attributes<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>vertex<sp/>input<sp/>attribute<sp/>descriptions.</highlight></codeline>
<codeline lineno="1703"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_vertex_input_state<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>Vulkan<sp/>pipeline<sp/>vertex<sp/>input<sp/>state<sp/>create<sp/>info.</highlight></codeline>
<codeline lineno="1704"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1705"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1706"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1707" refid="shVulkan_8h_1afd3c6410a22fbd6e6d4f70cc6e26cc88" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1afd3c6410a22fbd6e6d4f70cc6e26cc88" kindref="member">shSetVertexInputState</ref>(</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertex_binding_count,</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>VkVertexInputBindingDescription*<sp/><sp/><sp/><sp/><sp/><sp/>p_vertex_bindings,</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertex_attribute_count,</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/>VkVertexInputAttributeDescription*<sp/><sp/><sp/><sp/>p_vertex_attributes,</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineVertexInputStateCreateInfo*<sp/>p_vertex_input_state</highlight></codeline>
<codeline lineno="1713"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1715"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1716"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>the<sp/>input<sp/>assembly<sp/>state<sp/>for<sp/>a<sp/>pipeline.</highlight></codeline>
<codeline lineno="1717"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1718"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>the<sp/>input<sp/>assembly<sp/>state<sp/>with<sp/>the<sp/>specified<sp/>topology<sp/>and<sp/>restart<sp/>enable<sp/>flag.</highlight></codeline>
<codeline lineno="1719"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1720"><highlight class="comment"><sp/>*<sp/>@param<sp/>primitive_topology<sp/>Vulkan<sp/>primitive<sp/>topology<sp/>type.</highlight></codeline>
<codeline lineno="1721"><highlight class="comment"><sp/>*<sp/>@param<sp/>primitive_restart_enable<sp/>Boolean<sp/>flag<sp/>to<sp/>enable<sp/>or<sp/>disable<sp/>primitive<sp/>restart.</highlight></codeline>
<codeline lineno="1722"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_input_assembly<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>Vulkan<sp/>pipeline<sp/>input<sp/>assembly<sp/>state<sp/>create<sp/>info.</highlight></codeline>
<codeline lineno="1723"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1724"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1725"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1726" refid="shVulkan_8h_1abc592ad965aba075719deba78df655f2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1abc592ad965aba075719deba78df655f2" kindref="member">shCreateInputAssembly</ref>(</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPrimitiveTopology<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primitive_topology,</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBool32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primitive_restart_enable,</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineInputAssemblyStateCreateInfo*<sp/>p_input_assembly</highlight></codeline>
<codeline lineno="1730"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1732"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1733"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>the<sp/>rasterization<sp/>state<sp/>for<sp/>a<sp/>pipeline.</highlight></codeline>
<codeline lineno="1734"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1735"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>the<sp/>rasterization<sp/>state<sp/>with<sp/>the<sp/>specified<sp/>polygon<sp/>mode<sp/>and<sp/>cull<sp/>mode.</highlight></codeline>
<codeline lineno="1736"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1737"><highlight class="comment"><sp/>*<sp/>@param<sp/>polygon_mode<sp/>Vulkan<sp/>polygon<sp/>mode<sp/>for<sp/>rasterization.</highlight></codeline>
<codeline lineno="1738"><highlight class="comment"><sp/>*<sp/>@param<sp/>cull_mode<sp/>Vulkan<sp/>cull<sp/>mode<sp/>flag<sp/>bits.</highlight></codeline>
<codeline lineno="1739"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_rasterizer<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>Vulkan<sp/>pipeline<sp/>rasterization<sp/>state<sp/>create<sp/>info.</highlight></codeline>
<codeline lineno="1740"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1741"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1742"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1743" refid="shVulkan_8h_1a4a26ddd78725c18aa6ebe67e499dae93" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a4a26ddd78725c18aa6ebe67e499dae93" kindref="member">shCreateRasterizer</ref>(</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPolygonMode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polygon_mode,</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCullModeFlagBits<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cull_mode,</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineRasterizationStateCreateInfo*<sp/>p_rasterizer</highlight></codeline>
<codeline lineno="1747"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1749"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1750"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Sets<sp/>the<sp/>multisample<sp/>state<sp/>for<sp/>a<sp/>pipeline.</highlight></codeline>
<codeline lineno="1751"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1752"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>sets<sp/>the<sp/>multisample<sp/>state,<sp/>including<sp/>sample<sp/>count<sp/>and<sp/>minimum<sp/>sample<sp/>shading,<sp/>for<sp/>a<sp/>Vulkan<sp/>pipeline.</highlight></codeline>
<codeline lineno="1753"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1754"><highlight class="comment"><sp/>*<sp/>@param<sp/>sample_count<sp/>Vulkan<sp/>sample<sp/>count<sp/>flag<sp/>bits.</highlight></codeline>
<codeline lineno="1755"><highlight class="comment"><sp/>*<sp/>@param<sp/>min_sample_shading_size<sp/>Minimum<sp/>sample<sp/>shading<sp/>size.</highlight></codeline>
<codeline lineno="1756"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_multisample_state<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>Vulkan<sp/>pipeline<sp/>multisample<sp/>state<sp/>create<sp/>info.</highlight></codeline>
<codeline lineno="1757"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1758"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1759"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1760" refid="shVulkan_8h_1a8a64121d076fb62d995e3c5255490a0c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a8a64121d076fb62d995e3c5255490a0c" kindref="member">shSetMultisampleState</ref>(</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSampleCountFlagBits<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample_count,</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_sample_shading_size,</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineMultisampleStateCreateInfo*<sp/>p_multisample_state</highlight></codeline>
<codeline lineno="1764"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1766"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1767"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Sets<sp/>the<sp/>viewport<sp/>and<sp/>scissor<sp/>state<sp/>for<sp/>a<sp/>pipeline.</highlight></codeline>
<codeline lineno="1768"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1769"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>sets<sp/>the<sp/>viewport<sp/>and<sp/>scissor<sp/>parameters<sp/>for<sp/>a<sp/>Vulkan<sp/>pipeline.</highlight></codeline>
<codeline lineno="1770"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1771"><highlight class="comment"><sp/>*<sp/>@param<sp/>viewport_pos_x<sp/>X<sp/>position<sp/>of<sp/>the<sp/>viewport.</highlight></codeline>
<codeline lineno="1772"><highlight class="comment"><sp/>*<sp/>@param<sp/>viewport_pos_y<sp/>Y<sp/>position<sp/>of<sp/>the<sp/>viewport.</highlight></codeline>
<codeline lineno="1773"><highlight class="comment"><sp/>*<sp/>@param<sp/>viewport_width<sp/>Width<sp/>of<sp/>the<sp/>viewport.</highlight></codeline>
<codeline lineno="1774"><highlight class="comment"><sp/>*<sp/>@param<sp/>viewport_height<sp/>Height<sp/>of<sp/>the<sp/>viewport.</highlight></codeline>
<codeline lineno="1775"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_viewport<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>Vulkan<sp/>viewport.</highlight></codeline>
<codeline lineno="1776"><highlight class="comment"><sp/>*<sp/>@param<sp/>scissors_pos_x<sp/>X<sp/>position<sp/>of<sp/>the<sp/>scissor.</highlight></codeline>
<codeline lineno="1777"><highlight class="comment"><sp/>*<sp/>@param<sp/>scissors_pos_y<sp/>Y<sp/>position<sp/>of<sp/>the<sp/>scissor.</highlight></codeline>
<codeline lineno="1778"><highlight class="comment"><sp/>*<sp/>@param<sp/>scissors_width<sp/>Width<sp/>of<sp/>the<sp/>scissor.</highlight></codeline>
<codeline lineno="1779"><highlight class="comment"><sp/>*<sp/>@param<sp/>scissors_height<sp/>Height<sp/>of<sp/>the<sp/>scissor.</highlight></codeline>
<codeline lineno="1780"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_scissors<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>Vulkan<sp/>scissor<sp/>rectangle.</highlight></codeline>
<codeline lineno="1781"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_viewport_state<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>Vulkan<sp/>pipeline<sp/>viewport<sp/>state<sp/>create<sp/>info.</highlight></codeline>
<codeline lineno="1782"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1783"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1784"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1785" refid="shVulkan_8h_1a81ecc375fe999c39151dcf33c7e08bc5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a81ecc375fe999c39151dcf33c7e08bc5" kindref="member">shSetViewport</ref>(</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>viewport_pos_x,</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>viewport_pos_y,</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>viewport_width,</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>viewport_height,</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/>VkViewport*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_viewport,</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scissors_pos_x,</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scissors_pos_y,</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scissors_width,</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scissors_height,</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/>VkRect2D*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_scissors,</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineViewportStateCreateInfo*<sp/>p_viewport_state</highlight></codeline>
<codeline lineno="1797"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1799"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1800"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Configures<sp/>color<sp/>blending<sp/>and<sp/>alpha<sp/>blending<sp/>states.</highlight></codeline>
<codeline lineno="1801"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1802"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>configures<sp/>the<sp/>color<sp/>blending<sp/>and<sp/>alpha<sp/>blending<sp/>states<sp/>for<sp/>a<sp/>Vulkan<sp/>pipeline.</highlight></codeline>
<codeline lineno="1803"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1804"><highlight class="comment"><sp/>*<sp/>@param<sp/>enable_color_blending<sp/>Boolean<sp/>flag<sp/>to<sp/>enable<sp/>or<sp/>disable<sp/>color<sp/>blending.</highlight></codeline>
<codeline lineno="1805"><highlight class="comment"><sp/>*<sp/>@param<sp/>enable_alpha_blending<sp/>Boolean<sp/>flag<sp/>to<sp/>enable<sp/>or<sp/>disable<sp/>alpha<sp/>blending.</highlight></codeline>
<codeline lineno="1806"><highlight class="comment"><sp/>*<sp/>@param<sp/>subpass_color_attachment_count<sp/>Number<sp/>of<sp/>color<sp/>attachments<sp/>in<sp/>the<sp/>subpass.</highlight></codeline>
<codeline lineno="1807"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_color_blend_attachment_states<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>color<sp/>blend<sp/>attachment<sp/>states.</highlight></codeline>
<codeline lineno="1808"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_color_blend_state<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>Vulkan<sp/>pipeline<sp/>color<sp/>blend<sp/>state<sp/>create<sp/>info.</highlight></codeline>
<codeline lineno="1809"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1810"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1811"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1812" refid="shVulkan_8h_1add573bacc9913a1f3f3ec051847be17f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1add573bacc9913a1f3f3ec051847be17f" kindref="member">shColorBlendSettings</ref>(</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_color_blending,</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_alpha_blending,</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subpass_color_attachment_count,</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineColorBlendAttachmentState*<sp/>p_color_blend_attachment_states,</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineColorBlendStateCreateInfo*<sp/>p_color_blend_state</highlight></codeline>
<codeline lineno="1818"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1820"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1821"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>Vulkan<sp/>shader<sp/>module.</highlight></codeline>
<codeline lineno="1822"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1823"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>a<sp/>shader<sp/>module<sp/>from<sp/>the<sp/>provided<sp/>shader<sp/>code.</highlight></codeline>
<codeline lineno="1824"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1825"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="1826"><highlight class="comment"><sp/>*<sp/>@param<sp/>size<sp/>Size<sp/>of<sp/>the<sp/>shader<sp/>code<sp/>in<sp/>bytes.</highlight></codeline>
<codeline lineno="1827"><highlight class="comment"><sp/>*<sp/>@param<sp/>code<sp/>Pointer<sp/>to<sp/>the<sp/>shader<sp/>code.</highlight></codeline>
<codeline lineno="1828"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_shader_module<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>newly<sp/>created<sp/>Vulkan<sp/>shader<sp/>module.</highlight></codeline>
<codeline lineno="1829"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1830"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1831"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1832" refid="shVulkan_8h_1ab476e60d13e9dc556c9f3731e08b0f2b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1ab476e60d13e9dc556c9f3731e08b0f2b" kindref="member">shCreateShaderModule</ref>(</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size,</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code,</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/>VkShaderModule*<sp/>p_shader_module</highlight></codeline>
<codeline lineno="1837"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1839"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1840"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>Vulkan<sp/>shader<sp/>stage.</highlight></codeline>
<codeline lineno="1841"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1842"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>a<sp/>shader<sp/>stage<sp/>using<sp/>the<sp/>provided<sp/>shader<sp/>module<sp/>and<sp/>stage<sp/>flag.</highlight></codeline>
<codeline lineno="1843"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1844"><highlight class="comment"><sp/>*<sp/>@param<sp/>shader_module<sp/>Valid<sp/>Vulkan<sp/>shader<sp/>module.</highlight></codeline>
<codeline lineno="1845"><highlight class="comment"><sp/>*<sp/>@param<sp/>shader_stage_flag<sp/>Vulkan<sp/>shader<sp/>stage<sp/>flag<sp/>(e.g.,<sp/>vertex,<sp/>fragment).</highlight></codeline>
<codeline lineno="1846"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_shader_stage<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>Vulkan<sp/>pipeline<sp/>shader<sp/>stage<sp/>create<sp/>info.</highlight></codeline>
<codeline lineno="1847"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1848"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1849"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850" refid="shVulkan_8h_1a8b60f182c3ba1ef5aebfc5bb94e6b092" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a8b60f182c3ba1ef5aebfc5bb94e6b092" kindref="member">shCreateShaderStage</ref>(</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/>VkShaderModule<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shader_module,</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/>VkShaderStageFlags<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shader_stage_flag,</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineShaderStageCreateInfo*<sp/>p_shader_stage</highlight></codeline>
<codeline lineno="1854"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1856"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1857"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Sets<sp/>push<sp/>constants<sp/>for<sp/>a<sp/>shader<sp/>stage.</highlight></codeline>
<codeline lineno="1858"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1859"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>sets<sp/>push<sp/>constants<sp/>for<sp/>a<sp/>specified<sp/>shader<sp/>stage.</highlight></codeline>
<codeline lineno="1860"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1861"><highlight class="comment"><sp/>*<sp/>@param<sp/>shader_stage<sp/>Vulkan<sp/>shader<sp/>stage<sp/>flags<sp/>(e.g.,<sp/>vertex,<sp/>fragment).</highlight></codeline>
<codeline lineno="1862"><highlight class="comment"><sp/>*<sp/>@param<sp/>offset<sp/>Offset<sp/>in<sp/>bytes<sp/>from<sp/>the<sp/>start<sp/>of<sp/>the<sp/>push<sp/>constant<sp/>range.</highlight></codeline>
<codeline lineno="1863"><highlight class="comment"><sp/>*<sp/>@param<sp/>size<sp/>Size<sp/>of<sp/>the<sp/>push<sp/>constants<sp/>in<sp/>bytes.</highlight></codeline>
<codeline lineno="1864"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_push_constant_range<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>Vulkan<sp/>push<sp/>constant<sp/>range.</highlight></codeline>
<codeline lineno="1865"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1866"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1867"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1868" refid="shVulkan_8h_1a37c2f43e5d40ef599a5191b41731c1fe" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a37c2f43e5d40ef599a5191b41731c1fe" kindref="member">shSetPushConstants</ref>(</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/>VkShaderStageFlags<sp/><sp/><sp/>shader_stage,</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset,</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size,</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPushConstantRange*<sp/>p_push_constant_range</highlight></codeline>
<codeline lineno="1873"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1875"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1876"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>descriptor<sp/>set<sp/>layout<sp/>binding.</highlight></codeline>
<codeline lineno="1877"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1878"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>a<sp/>descriptor<sp/>set<sp/>layout<sp/>binding<sp/>with<sp/>the<sp/>specified<sp/>parameters.</highlight></codeline>
<codeline lineno="1879"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1880"><highlight class="comment"><sp/>*<sp/>@param<sp/>binding<sp/>Binding<sp/>index<sp/>for<sp/>the<sp/>descriptor<sp/>set<sp/>layout.</highlight></codeline>
<codeline lineno="1881"><highlight class="comment"><sp/>*<sp/>@param<sp/>descriptor_type<sp/>Vulkan<sp/>descriptor<sp/>type<sp/>(e.g.,<sp/>uniform<sp/>buffer,<sp/>sampled<sp/>image).</highlight></codeline>
<codeline lineno="1882"><highlight class="comment"><sp/>*<sp/>@param<sp/>descriptor_set_count<sp/>Number<sp/>of<sp/>descriptors<sp/>in<sp/>the<sp/>set.</highlight></codeline>
<codeline lineno="1883"><highlight class="comment"><sp/>*<sp/>@param<sp/>shader_stage<sp/>Vulkan<sp/>shader<sp/>stage<sp/>flags<sp/>that<sp/>use<sp/>this<sp/>descriptor.</highlight></codeline>
<codeline lineno="1884"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_binding<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>Vulkan<sp/>descriptor<sp/>set<sp/>layout<sp/>binding.</highlight></codeline>
<codeline lineno="1885"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1886"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1887"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1888" refid="shVulkan_8h_1a2db25bc95c340c14063103bd71c831e5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a2db25bc95c340c14063103bd71c831e5" kindref="member">shCreateDescriptorSetLayoutBinding</ref>(</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binding,</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptor_type,</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptor_set_count,</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/>VkShaderStageFlags<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shader_stage,</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSetLayoutBinding*<sp/>p_binding</highlight></codeline>
<codeline lineno="1894"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1896"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1897"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>descriptor<sp/>set<sp/>layout.</highlight></codeline>
<codeline lineno="1898"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1899"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>a<sp/>descriptor<sp/>set<sp/>layout<sp/>with<sp/>the<sp/>specified<sp/>bindings.</highlight></codeline>
<codeline lineno="1900"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1901"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="1902"><highlight class="comment"><sp/>*<sp/>@param<sp/>binding_count<sp/>Number<sp/>of<sp/>descriptor<sp/>set<sp/>layout<sp/>bindings.</highlight></codeline>
<codeline lineno="1903"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_bindings<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>descriptor<sp/>set<sp/>layout<sp/>bindings.</highlight></codeline>
<codeline lineno="1904"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_descriptor_set_layout<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>newly<sp/>created<sp/>Vulkan<sp/>descriptor<sp/>set<sp/>layout.</highlight></codeline>
<codeline lineno="1905"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1906"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1907"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1908" refid="shVulkan_8h_1afb91ea9f9819414ce5f3af63c76e5039" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1afb91ea9f9819414ce5f3af63c76e5039" kindref="member">shCreateDescriptorSetLayout</ref>(</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binding_count,</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSetLayoutBinding*<sp/>p_bindings,</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSetLayout*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_descriptor_set_layout</highlight></codeline>
<codeline lineno="1913"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1915"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1916"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>descriptor<sp/>pool.</highlight></codeline>
<codeline lineno="1917"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1918"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>a<sp/>descriptor<sp/>pool<sp/>with<sp/>the<sp/>specified<sp/>pool<sp/>sizes.</highlight></codeline>
<codeline lineno="1919"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1920"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="1921"><highlight class="comment"><sp/>*<sp/>@param<sp/>pool_size_count<sp/>Number<sp/>of<sp/>pool<sp/>sizes.</highlight></codeline>
<codeline lineno="1922"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_pool_sizes<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>descriptor<sp/>pool<sp/>sizes.</highlight></codeline>
<codeline lineno="1923"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_descriptor_pool<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>newly<sp/>created<sp/>Vulkan<sp/>descriptor<sp/>pool.</highlight></codeline>
<codeline lineno="1924"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1925"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1926"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1927" refid="shVulkan_8h_1a1c2c35ec1695abf9f1269fda64b15f67" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a1c2c35ec1695abf9f1269fda64b15f67" kindref="member">shCreateDescriptorPool</ref>(</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool_size_count,</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorPoolSize*<sp/>p_pool_sizes,</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorPool*<sp/><sp/><sp/><sp/><sp/>p_descriptor_pool</highlight></codeline>
<codeline lineno="1932"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1934"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1935"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Sets<sp/>buffer<sp/>information<sp/>for<sp/>a<sp/>descriptor<sp/>buffer.</highlight></codeline>
<codeline lineno="1936"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1937"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>sets<sp/>buffer<sp/>information<sp/>for<sp/>a<sp/>descriptor<sp/>buffer.</highlight></codeline>
<codeline lineno="1938"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1939"><highlight class="comment"><sp/>*<sp/>@param<sp/>buffer<sp/>Valid<sp/>Vulkan<sp/>buffer.</highlight></codeline>
<codeline lineno="1940"><highlight class="comment"><sp/>*<sp/>@param<sp/>buffer_offset<sp/>Offset<sp/>in<sp/>the<sp/>buffer.</highlight></codeline>
<codeline lineno="1941"><highlight class="comment"><sp/>*<sp/>@param<sp/>buffer_size<sp/>Size<sp/>of<sp/>the<sp/>buffer.</highlight></codeline>
<codeline lineno="1942"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_buffer_info<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>Vulkan<sp/>descriptor<sp/>buffer<sp/>info.</highlight></codeline>
<codeline lineno="1943"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1944"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1945"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1946" refid="shVulkan_8h_1a30575079b2b0f495e5b9723769d5f400" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a30575079b2b0f495e5b9723769d5f400" kindref="member">shSetDescriptorBufferInfo</ref>(</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBuffer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer,</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_offset,</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_size,</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorBufferInfo*<sp/>p_buffer_info</highlight></codeline>
<codeline lineno="1951"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1953"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1954"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Allocates<sp/>descriptor<sp/>sets<sp/>from<sp/>a<sp/>descriptor<sp/>pool.</highlight></codeline>
<codeline lineno="1955"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1956"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>allocates<sp/>descriptor<sp/>sets<sp/>of<sp/>the<sp/>specified<sp/>type<sp/>from<sp/>the<sp/>given<sp/>descriptor<sp/>pool.</highlight></codeline>
<codeline lineno="1957"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1958"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="1959"><highlight class="comment"><sp/>*<sp/>@param<sp/>descriptor_pool<sp/>Valid<sp/>Vulkan<sp/>descriptor<sp/>pool<sp/>from<sp/>which<sp/>to<sp/>allocate<sp/>descriptor<sp/>sets.</highlight></codeline>
<codeline lineno="1960"><highlight class="comment"><sp/>*<sp/>@param<sp/>descriptor_type<sp/>Vulkan<sp/>descriptor<sp/>type<sp/>(e.g.,<sp/>uniform<sp/>buffer,<sp/>sampled<sp/>image).</highlight></codeline>
<codeline lineno="1961"><highlight class="comment"><sp/>*<sp/>@param<sp/>binding<sp/>Binding<sp/>index<sp/>for<sp/>the<sp/>descriptor<sp/>sets.</highlight></codeline>
<codeline lineno="1962"><highlight class="comment"><sp/>*<sp/>@param<sp/>descriptor_set_unit_count<sp/>Number<sp/>of<sp/>descriptor<sp/>sets<sp/>to<sp/>allocate.</highlight></codeline>
<codeline lineno="1963"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_descriptor_set_layouts<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>descriptor<sp/>set<sp/>layouts.</highlight></codeline>
<codeline lineno="1964"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_descriptor_sets<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>descriptor<sp/>sets.</highlight></codeline>
<codeline lineno="1965"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_buffer_infos<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>descriptor<sp/>buffer<sp/>info<sp/>structures.</highlight></codeline>
<codeline lineno="1966"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_write_descriptor_sets<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>write<sp/>descriptor<sp/>set<sp/>structures.</highlight></codeline>
<codeline lineno="1967"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1968"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1969"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1970" refid="shVulkan_8h_1a6473b6e9dbfd903423d3123ecd99a368" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a6473b6e9dbfd903423d3123ecd99a368" kindref="member">shAllocateDescriptorSetUnits</ref>(</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorPool<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptor_pool,</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptor_type,</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binding,</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptor_set_unit_count,</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSetLayout*<sp/><sp/>p_descriptor_set_layouts,</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSet*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_descriptor_sets,</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorBufferInfo*<sp/>p_buffer_infos,</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/>VkWriteDescriptorSet*<sp/><sp/><sp/>p_write_descriptor_sets</highlight></codeline>
<codeline lineno="1980"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1982"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1983"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>pipeline<sp/>layout.</highlight></codeline>
<codeline lineno="1984"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1985"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>a<sp/>Vulkan<sp/>pipeline<sp/>layout<sp/>with<sp/>the<sp/>specified<sp/>push<sp/>constant<sp/>ranges<sp/>and<sp/>descriptor<sp/>set<sp/>layouts.</highlight></codeline>
<codeline lineno="1986"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1987"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="1988"><highlight class="comment"><sp/>*<sp/>@param<sp/>push_constant_range_count<sp/>Number<sp/>of<sp/>push<sp/>constant<sp/>ranges.</highlight></codeline>
<codeline lineno="1989"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_push_constants_range<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>push<sp/>constant<sp/>ranges.</highlight></codeline>
<codeline lineno="1990"><highlight class="comment"><sp/>*<sp/>@param<sp/>src_descriptor_set_layout_count<sp/>Number<sp/>of<sp/>descriptor<sp/>set<sp/>layouts.</highlight></codeline>
<codeline lineno="1991"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_src_descriptor_set_layouts<sp/>Valid<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>Vulkan<sp/>descriptor<sp/>set<sp/>layouts.</highlight></codeline>
<codeline lineno="1992"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_pipeline_layout<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>newly<sp/>created<sp/>Vulkan<sp/>pipeline<sp/>layout.</highlight></codeline>
<codeline lineno="1993"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1994"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="1995"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1996" refid="shVulkan_8h_1a6ecd476f729741cf79f4717faaf254fd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a6ecd476f729741cf79f4717faaf254fd" kindref="member">shCreatePipelineLayout</ref>(</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>push_constant_range_count,</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPushConstantRange*<sp/><sp/><sp/>p_push_constants_range,</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_descriptor_set_layout_count,</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSetLayout*<sp/>p_src_descriptor_set_layouts,</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineLayout*<sp/><sp/><sp/><sp/><sp/><sp/>p_pipeline_layout</highlight></codeline>
<codeline lineno="2003"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2005"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2006"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Destroys<sp/>a<sp/>Vulkan<sp/>descriptor<sp/>pool.</highlight></codeline>
<codeline lineno="2007"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2008"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>destroys<sp/>the<sp/>specified<sp/>Vulkan<sp/>descriptor<sp/>pool.</highlight></codeline>
<codeline lineno="2009"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2010"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="2011"><highlight class="comment"><sp/>*<sp/>@param<sp/>descriptor_pool<sp/>Vulkan<sp/>descriptor<sp/>pool<sp/>to<sp/>destroy.</highlight></codeline>
<codeline lineno="2012"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2013"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2014"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2015" refid="shVulkan_8h_1aacca6c63e8d9eca4f1b614dcddfe1175" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1aacca6c63e8d9eca4f1b614dcddfe1175" kindref="member">shDestroyDescriptorPool</ref>(</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorPool<sp/>descriptor_pool</highlight></codeline>
<codeline lineno="2018"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2020"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2021"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Destroys<sp/>a<sp/>Vulkan<sp/>descriptor<sp/>set<sp/>layout.</highlight></codeline>
<codeline lineno="2022"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2023"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>destroys<sp/>the<sp/>specified<sp/>Vulkan<sp/>descriptor<sp/>set<sp/>layout.</highlight></codeline>
<codeline lineno="2024"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2025"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="2026"><highlight class="comment"><sp/>*<sp/>@param<sp/>descriptor_set_layout<sp/>Vulkan<sp/>descriptor<sp/>set<sp/>layout<sp/>to<sp/>destroy.</highlight></codeline>
<codeline lineno="2027"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2028"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2029"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2030" refid="shVulkan_8h_1a0daea4207984dc19a6b543434bd7c914" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a0daea4207984dc19a6b543434bd7c914" kindref="member">shDestroyDescriptorSetLayout</ref>(</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSetLayout<sp/>descriptor_set_layout</highlight></codeline>
<codeline lineno="2033"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2035"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2036"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Destroys<sp/>a<sp/>Vulkan<sp/>shader<sp/>module.</highlight></codeline>
<codeline lineno="2037"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2038"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>destroys<sp/>the<sp/>specified<sp/>Vulkan<sp/>shader<sp/>module.</highlight></codeline>
<codeline lineno="2039"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2040"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="2041"><highlight class="comment"><sp/>*<sp/>@param<sp/>shader_module<sp/>Vulkan<sp/>shader<sp/>module<sp/>to<sp/>destroy.</highlight></codeline>
<codeline lineno="2042"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2043"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2044"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2045" refid="shVulkan_8h_1aa06684f677c30ac2cf9ec0b3fdf01141" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1aa06684f677c30ac2cf9ec0b3fdf01141" kindref="member">shDestroyShaderModule</ref>(</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/>VkShaderModule<sp/>shader_module</highlight></codeline>
<codeline lineno="2048"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2050"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2051"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Destroys<sp/>a<sp/>Vulkan<sp/>pipeline<sp/>layout.</highlight></codeline>
<codeline lineno="2052"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2053"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>destroys<sp/>the<sp/>specified<sp/>Vulkan<sp/>pipeline<sp/>layout.</highlight></codeline>
<codeline lineno="2054"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2055"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="2056"><highlight class="comment"><sp/>*<sp/>@param<sp/>pipeline_layout<sp/>Vulkan<sp/>pipeline<sp/>layout<sp/>to<sp/>destroy.</highlight></codeline>
<codeline lineno="2057"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2058"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2059"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2060" refid="shVulkan_8h_1a9cafdf7d71914ed332e3f924fa8859dd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a9cafdf7d71914ed332e3f924fa8859dd" kindref="member">shDestroyPipelineLayout</ref>(</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineLayout<sp/>pipeline_layout</highlight></codeline>
<codeline lineno="2063"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2065"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2066"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Destroys<sp/>a<sp/>Vulkan<sp/>pipeline.</highlight></codeline>
<codeline lineno="2067"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2068"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>destroys<sp/>the<sp/>specified<sp/>Vulkan<sp/>pipeline.</highlight></codeline>
<codeline lineno="2069"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2070"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="2071"><highlight class="comment"><sp/>*<sp/>@param<sp/>pipeline<sp/>Vulkan<sp/>pipeline<sp/>to<sp/>destroy.</highlight></codeline>
<codeline lineno="2072"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2073"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2074"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2075" refid="shVulkan_8h_1aad21ff1c031b22232fa2c0144c09ec23" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1aad21ff1c031b22232fa2c0144c09ec23" kindref="member">shDestroyPipeline</ref>(</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipeline<sp/>pipeline</highlight></codeline>
<codeline lineno="2078"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight></codeline>
<codeline lineno="2082" refid="shVulkan_8h_1af673c20336c080a49187acd6fa18cf84" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_MAX_PIPELINE_VERTEX_BINDING_COUNT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2083" refid="shVulkan_8h_1a091b1cecf2c3862ae534b7c1300282a9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_MAX_PIPELINE_VERTEX_ATTRIBUTE_COUNT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2085" refid="shVulkan_8h_1aee56f29993961649cc353e2cfeafe8f8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_MAX_PIPELINE_SHADER_STAGE_COUNT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight></codeline>
<codeline lineno="2087" refid="shVulkan_8h_1a379e54073774df0b0209554206c0c3e4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_MAX_PIPELINE_SUBPASS_COLOR_ATTACHMENT_COUNT<sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2090"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2091"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Structure<sp/>representing<sp/>a<sp/>Vulkan<sp/>pipeline.</highlight></codeline>
<codeline lineno="2092"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2093"><highlight class="comment"><sp/>*<sp/>This<sp/>structure<sp/>holds<sp/>all<sp/>the<sp/>necessary<sp/>state<sp/>and<sp/>configuration<sp/>for<sp/>creating<sp/>and<sp/>managing<sp/>a<sp/>Vulkan<sp/>pipeline.</highlight></codeline>
<codeline lineno="2094"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2095" refid="structShVkPipeline" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref><sp/>{</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Vertex<sp/>inputs*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2097" refid="structShVkPipeline_1ab15f5afcb70bd5de3bd81864f91e6696" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline_1ab15f5afcb70bd5de3bd81864f91e6696" kindref="member">vertex_binding_count</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>Number<sp/>of<sp/>vertex<sp/>bindings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2098" refid="structShVkPipeline_1aa84cc8e3346535780ed784f1b1e3eff0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VkVertexInputBindingDescription<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline_1aa84cc8e3346535780ed784f1b1e3eff0" kindref="member">vertex_bindings</ref>[<ref refid="shVulkan_8h_1af673c20336c080a49187acd6fa18cf84" kindref="member">SH_MAX_PIPELINE_VERTEX_BINDING_COUNT</ref>];<sp/></highlight><highlight class="comment">///&lt;<sp/>Array<sp/>of<sp/>vertex<sp/>input<sp/>bindings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2099" refid="structShVkPipeline_1a4bf1195a1791c2f791d4e53e8c027a4a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline_1a4bf1195a1791c2f791d4e53e8c027a4a" kindref="member">vertex_attribute_count</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>Number<sp/>of<sp/>vertex<sp/>attributes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2100" refid="structShVkPipeline_1a8f91185da88f6d227a68f78f1bafdcc6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VkVertexInputAttributeDescription<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline_1a8f91185da88f6d227a68f78f1bafdcc6" kindref="member">vertex_attributes</ref>[<ref refid="shVulkan_8h_1a091b1cecf2c3862ae534b7c1300282a9" kindref="member">SH_MAX_PIPELINE_VERTEX_ATTRIBUTE_COUNT</ref>];<sp/></highlight><highlight class="comment">///&lt;<sp/>Array<sp/>of<sp/>vertex<sp/>input<sp/>attributes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2101" refid="structShVkPipeline_1a7d4ad01c7eaeb9c39e97af0cee13a27f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineVertexInputStateCreateInfo<sp/><sp/><sp/><sp/><ref refid="structShVkPipeline_1a7d4ad01c7eaeb9c39e97af0cee13a27f" kindref="member">vertex_input_state_info</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>Vertex<sp/>input<sp/>state<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2102" refid="structShVkPipeline_1a3ba1efefe5508c9d32cca9255b639880" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineInputAssemblyStateCreateInfo<sp/><sp/><ref refid="structShVkPipeline_1a3ba1efefe5508c9d32cca9255b639880" kindref="member">input_assembly</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>Input<sp/>assembly<sp/>state<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Shaders*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2104" refid="structShVkPipeline_1abf55b198ee4e8f6a9a151f2f3b267ed0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline_1abf55b198ee4e8f6a9a151f2f3b267ed0" kindref="member">shader_module_count</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>Number<sp/>of<sp/>shader<sp/>modules.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2105" refid="structShVkPipeline_1a639990891b28c27427634459eae4bff1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VkShaderModule<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline_1a639990891b28c27427634459eae4bff1" kindref="member">shader_modules</ref>[<ref refid="shVulkan_8h_1aee56f29993961649cc353e2cfeafe8f8" kindref="member">SH_MAX_PIPELINE_SHADER_STAGE_COUNT</ref>];<sp/></highlight><highlight class="comment">///&lt;<sp/>Array<sp/>of<sp/>shader<sp/>modules.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2106" refid="structShVkPipeline_1ad9cae3ad8a53d8f40d1014e464515131" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline_1ad9cae3ad8a53d8f40d1014e464515131" kindref="member">shader_stage_count</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>Number<sp/>of<sp/>shader<sp/>stages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2107" refid="structShVkPipeline_1a9a99c1efbbf1990be7adc2a90707c3c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineShaderStageCreateInfo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline_1a9a99c1efbbf1990be7adc2a90707c3c0" kindref="member">shader_stages</ref>[<ref refid="shVulkan_8h_1aee56f29993961649cc353e2cfeafe8f8" kindref="member">SH_MAX_PIPELINE_SHADER_STAGE_COUNT</ref>];<sp/></highlight><highlight class="comment">///&lt;<sp/>Array<sp/>of<sp/>shader<sp/>stage<sp/>create<sp/>info.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Push<sp/>constants*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2109" refid="structShVkPipeline_1a31ff7de998830c8719bd291ab456df28" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPushConstantRange<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline_1a31ff7de998830c8719bd291ab456df28" kindref="member">push_constant_range</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>Push<sp/>constant<sp/>range<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Rasterizer*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2111" refid="structShVkPipeline_1ad7da5701d508803f048e09b182963bbc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineRasterizationStateCreateInfo<sp/><sp/><ref refid="structShVkPipeline_1ad7da5701d508803f048e09b182963bbc" kindref="member">rasterizer</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>Rasterizer<sp/>state<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Viewport*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2113" refid="structShVkPipeline_1aad91d82a780898fc535f4e05855d275c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VkViewport<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline_1aad91d82a780898fc535f4e05855d275c" kindref="member">viewport</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>Viewport<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2114" refid="structShVkPipeline_1a58e92f5c9b13ee41f0d7b31ec5f17b56" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VkRect2D<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline_1a58e92f5c9b13ee41f0d7b31ec5f17b56" kindref="member">scissors</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>Scissor<sp/>rectangle<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2115" refid="structShVkPipeline_1a992e59e59ca02700bda9f894b8ccc594" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineViewportStateCreateInfo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline_1a992e59e59ca02700bda9f894b8ccc594" kindref="member">viewport_state</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>Viewport<sp/>state<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Color<sp/>blending*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2117" refid="structShVkPipeline_1adb2024e7d365784112d5d2b71151045b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineColorBlendAttachmentState<sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline_1adb2024e7d365784112d5d2b71151045b" kindref="member">color_blend_attachment_states</ref>[<ref refid="shVulkan_8h_1a379e54073774df0b0209554206c0c3e4" kindref="member">SH_MAX_PIPELINE_SUBPASS_COLOR_ATTACHMENT_COUNT</ref>];<sp/></highlight><highlight class="comment">///&lt;<sp/>Array<sp/>of<sp/>color<sp/>blend<sp/>attachment<sp/>states.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2118" refid="structShVkPipeline_1a550bf5819b0e2e89a5698b10bddda680" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineColorBlendStateCreateInfo<sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline_1a550bf5819b0e2e89a5698b10bddda680" kindref="member">color_blend_state</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>Color<sp/>blend<sp/>state<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Multisample<sp/>state*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2120" refid="structShVkPipeline_1acc77818ae1d69bfb4661d128194f450e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineMultisampleStateCreateInfo<sp/><sp/><sp/><sp/><ref refid="structShVkPipeline_1acc77818ae1d69bfb4661d128194f450e" kindref="member">multisample_state_info</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>Multisample<sp/>state<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Pipeline*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2122" refid="structShVkPipeline_1ae7fc91a99f5fb3c8a5a286d2b3e503a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineLayout<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline_1ae7fc91a99f5fb3c8a5a286d2b3e503a9" kindref="member">pipeline_layout</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>Vulkan<sp/>pipeline<sp/>layout.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2123" refid="structShVkPipeline_1a3c654e3648932d192409fda6a2ed376e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipeline<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline_1a3c654e3648932d192409fda6a2ed376e" kindref="member">pipeline</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>Vulkan<sp/>pipeline.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2124" refid="shVulkan_8h_1adaa31bc1ed7627ffa2cd0a8415230dfa" refkind="member"><highlight class="normal">}<sp/><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref>;</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"></highlight></codeline>
<codeline lineno="2128" refid="shVulkan_8h_1a50e29521dee75adcd4c4007570df5103" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref><sp/><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref>;</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2132"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2133"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Clears<sp/>the<sp/>pipeline<sp/>structure.</highlight></codeline>
<codeline lineno="2134"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2135"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>resets<sp/>all<sp/>fields<sp/>of<sp/>the<sp/>ShVkPipeline<sp/>structure<sp/>to<sp/>their<sp/>default<sp/>values.</highlight></codeline>
<codeline lineno="2136"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2137"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_pipeline<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipeline<sp/>structure<sp/>to<sp/>be<sp/>cleared.</highlight></codeline>
<codeline lineno="2138"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2139"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2140"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2141" refid="shVulkan_8h_1accfddf1bd263be71d7c1443e8fccb46d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1accfddf1bd263be71d7c1443e8fccb46d" kindref="member">shClearPipeline</ref>(</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref>*<sp/>p_pipeline</highlight></codeline>
<codeline lineno="2143"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2145"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2146"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Sets<sp/>vertex<sp/>binding<sp/>information<sp/>in<sp/>the<sp/>pipeline.</highlight></codeline>
<codeline lineno="2147"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2148"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>sets<sp/>the<sp/>vertex<sp/>binding<sp/>description<sp/>for<sp/>a<sp/>specific<sp/>binding<sp/>index<sp/>in<sp/>the<sp/>ShVkPipeline<sp/>structure.</highlight></codeline>
<codeline lineno="2149"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2150"><highlight class="comment"><sp/>*<sp/>@param<sp/>binding<sp/>Binding<sp/>index.</highlight></codeline>
<codeline lineno="2151"><highlight class="comment"><sp/>*<sp/>@param<sp/>size<sp/>Size<sp/>of<sp/>the<sp/>vertex<sp/>binding.</highlight></codeline>
<codeline lineno="2152"><highlight class="comment"><sp/>*<sp/>@param<sp/>input_rate<sp/>Vertex<sp/>input<sp/>rate.</highlight></codeline>
<codeline lineno="2153"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_pipeline<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipeline<sp/>structure<sp/>to<sp/>update.</highlight></codeline>
<codeline lineno="2154"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2155"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2156"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2157" refid="shVulkan_8h_1a03ada39e7867acde1679ce5539217748" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a03ada39e7867acde1679ce5539217748" kindref="member">shPipelineSetVertexBinding</ref>(</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binding,</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size,</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/>VkVertexInputRate<sp/>input_rate,</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref>*<sp/><sp/><sp/><sp/><sp/>p_pipeline</highlight></codeline>
<codeline lineno="2162"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2164"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2165"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Sets<sp/>vertex<sp/>attribute<sp/>information<sp/>in<sp/>the<sp/>pipeline.</highlight></codeline>
<codeline lineno="2166"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2167"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>sets<sp/>the<sp/>vertex<sp/>attribute<sp/>description<sp/>for<sp/>a<sp/>specific<sp/>location<sp/>in<sp/>the<sp/>ShVkPipeline<sp/>structure.</highlight></codeline>
<codeline lineno="2168"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2169"><highlight class="comment"><sp/>*<sp/>@param<sp/>location<sp/>Location<sp/>index.</highlight></codeline>
<codeline lineno="2170"><highlight class="comment"><sp/>*<sp/>@param<sp/>binding<sp/>Binding<sp/>index.</highlight></codeline>
<codeline lineno="2171"><highlight class="comment"><sp/>*<sp/>@param<sp/>format<sp/>Vertex<sp/>attribute<sp/>format.</highlight></codeline>
<codeline lineno="2172"><highlight class="comment"><sp/>*<sp/>@param<sp/>offset<sp/>Offset<sp/>of<sp/>the<sp/>vertex<sp/>attribute.</highlight></codeline>
<codeline lineno="2173"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_pipeline<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipeline<sp/>structure<sp/>to<sp/>update.</highlight></codeline>
<codeline lineno="2174"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2175"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2176"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2177" refid="shVulkan_8h_1ae90245e6e6ff5b8b4863823baa989669" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1ae90245e6e6ff5b8b4863823baa989669" kindref="member">shPipelineSetVertexAttribute</ref>(</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/>location,</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/>binding,</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFormat<sp/><sp/><sp/><sp/><sp/><sp/>format,</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/>offset,</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref>*<sp/>p_pipeline</highlight></codeline>
<codeline lineno="2183"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2185"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2186"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Sets<sp/>vertex<sp/>input<sp/>state<sp/>information<sp/>in<sp/>the<sp/>pipeline.</highlight></codeline>
<codeline lineno="2187"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2188"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>sets<sp/>the<sp/>vertex<sp/>input<sp/>state<sp/>information<sp/>in<sp/>the<sp/>ShVkPipeline<sp/>structure.</highlight></codeline>
<codeline lineno="2189"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2190"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_pipeline<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipeline<sp/>structure<sp/>to<sp/>update.</highlight></codeline>
<codeline lineno="2191"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2192"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2193"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2194" refid="shVulkan_8h_1a969ece0688800efffd597ff7516d3c7b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a969ece0688800efffd597ff7516d3c7b" kindref="member">shPipelineSetVertexInputState</ref>(</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref>*<sp/>p_pipeline</highlight></codeline>
<codeline lineno="2196"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2198"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2199"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>input<sp/>assembly<sp/>state<sp/>information<sp/>for<sp/>the<sp/>pipeline.</highlight></codeline>
<codeline lineno="2200"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2201"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>sets<sp/>the<sp/>input<sp/>assembly<sp/>state<sp/>information<sp/>in<sp/>the<sp/>ShVkPipeline<sp/>structure.</highlight></codeline>
<codeline lineno="2202"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2203"><highlight class="comment"><sp/>*<sp/>@param<sp/>primitive_topology<sp/>Primitive<sp/>topology<sp/>used<sp/>in<sp/>the<sp/>input<sp/>assembly.</highlight></codeline>
<codeline lineno="2204"><highlight class="comment"><sp/>*<sp/>@param<sp/>primitive_restart_enable<sp/>Flag<sp/>indicating<sp/>if<sp/>primitive<sp/>restart<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="2205"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_pipeline<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipeline<sp/>structure<sp/>to<sp/>update.</highlight></codeline>
<codeline lineno="2206"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2207"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2208"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2209" refid="shVulkan_8h_1a2dced04d99a306fb094c16394fdb3681" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a2dced04d99a306fb094c16394fdb3681" kindref="member">shPipelineCreateInputAssembly</ref>(</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPrimitiveTopology<sp/>primitive_topology,</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBool32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primitive_restart_enable,</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_pipeline</highlight></codeline>
<codeline lineno="2213"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2215"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2216"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>rasterizer<sp/>state<sp/>information<sp/>for<sp/>the<sp/>pipeline.</highlight></codeline>
<codeline lineno="2217"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2218"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>sets<sp/>the<sp/>rasterizer<sp/>state<sp/>information<sp/>in<sp/>the<sp/>ShVkPipeline<sp/>structure.</highlight></codeline>
<codeline lineno="2219"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2220"><highlight class="comment"><sp/>*<sp/>@param<sp/>polygon_mode<sp/>Polygon<sp/>mode<sp/>used<sp/>in<sp/>rasterization.</highlight></codeline>
<codeline lineno="2221"><highlight class="comment"><sp/>*<sp/>@param<sp/>cull_mode<sp/>Culling<sp/>mode<sp/>used<sp/>in<sp/>rasterization.</highlight></codeline>
<codeline lineno="2222"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_pipeline<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipeline<sp/>structure<sp/>to<sp/>update.</highlight></codeline>
<codeline lineno="2223"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2224"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2225"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2226" refid="shVulkan_8h_1ab10ea59844b6c8721f338d08ee00d904" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1ab10ea59844b6c8721f338d08ee00d904" kindref="member">shPipelineCreateRasterizer</ref>(</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPolygonMode<sp/><sp/><sp/><sp/><sp/><sp/>polygon_mode,</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCullModeFlagBits<sp/>cull_mode,</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>p_pipeline</highlight></codeline>
<codeline lineno="2230"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2232"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2233"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Sets<sp/>multisample<sp/>state<sp/>information<sp/>in<sp/>the<sp/>pipeline.</highlight></codeline>
<codeline lineno="2234"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2235"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>sets<sp/>the<sp/>multisample<sp/>state<sp/>information<sp/>in<sp/>the<sp/>ShVkPipeline<sp/>structure.</highlight></codeline>
<codeline lineno="2236"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2237"><highlight class="comment"><sp/>*<sp/>@param<sp/>sample_count<sp/>Number<sp/>of<sp/>samples<sp/>used<sp/>in<sp/>multisampling.</highlight></codeline>
<codeline lineno="2238"><highlight class="comment"><sp/>*<sp/>@param<sp/>min_sample_shading_size<sp/>Minimum<sp/>sample<sp/>shading<sp/>size.</highlight></codeline>
<codeline lineno="2239"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_pipeline<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipeline<sp/>structure<sp/>to<sp/>update.</highlight></codeline>
<codeline lineno="2240"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2241"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2242"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2243" refid="shVulkan_8h_1ad434628a85b50f5d67dfafec0d396716" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1ad434628a85b50f5d67dfafec0d396716" kindref="member">shPipelineSetMultisampleState</ref>(</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSampleCountFlagBits<sp/>sample_count,</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_sample_shading_size,</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_pipeline</highlight></codeline>
<codeline lineno="2247"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2249"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2250"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Sets<sp/>viewport<sp/>and<sp/>scissor<sp/>information<sp/>in<sp/>the<sp/>pipeline.</highlight></codeline>
<codeline lineno="2251"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2252"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>sets<sp/>the<sp/>viewport<sp/>and<sp/>scissor<sp/>information<sp/>in<sp/>the<sp/>ShVkPipeline<sp/>structure.</highlight></codeline>
<codeline lineno="2253"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2254"><highlight class="comment"><sp/>*<sp/>@param<sp/>viewport_pos_x<sp/>X<sp/>position<sp/>of<sp/>the<sp/>viewport.</highlight></codeline>
<codeline lineno="2255"><highlight class="comment"><sp/>*<sp/>@param<sp/>viewport_pos_y<sp/>Y<sp/>position<sp/>of<sp/>the<sp/>viewport.</highlight></codeline>
<codeline lineno="2256"><highlight class="comment"><sp/>*<sp/>@param<sp/>viewport_width<sp/>Width<sp/>of<sp/>the<sp/>viewport.</highlight></codeline>
<codeline lineno="2257"><highlight class="comment"><sp/>*<sp/>@param<sp/>viewport_height<sp/>Height<sp/>of<sp/>the<sp/>viewport.</highlight></codeline>
<codeline lineno="2258"><highlight class="comment"><sp/>*<sp/>@param<sp/>scissors_pos_x<sp/>X<sp/>position<sp/>of<sp/>the<sp/>scissors<sp/>rectangle.</highlight></codeline>
<codeline lineno="2259"><highlight class="comment"><sp/>*<sp/>@param<sp/>scissors_pos_y<sp/>Y<sp/>position<sp/>of<sp/>the<sp/>scissors<sp/>rectangle.</highlight></codeline>
<codeline lineno="2260"><highlight class="comment"><sp/>*<sp/>@param<sp/>scissors_width<sp/>Width<sp/>of<sp/>the<sp/>scissors<sp/>rectangle.</highlight></codeline>
<codeline lineno="2261"><highlight class="comment"><sp/>*<sp/>@param<sp/>scissors_height<sp/>Height<sp/>of<sp/>the<sp/>scissors<sp/>rectangle.</highlight></codeline>
<codeline lineno="2262"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_pipeline<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipeline<sp/>structure<sp/>to<sp/>update.</highlight></codeline>
<codeline lineno="2263"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2264"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2265"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2266" refid="shVulkan_8h_1a26da8e1e1cf3811793e575adfb6d4c65" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a26da8e1e1cf3811793e575adfb6d4c65" kindref="member">shPipelineSetViewport</ref>(</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/>viewport_pos_x,</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/>viewport_pos_y,</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/>viewport_width,</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/>viewport_height,</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/>scissors_pos_x,</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/>scissors_pos_y,</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/>scissors_width,</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/>scissors_height,</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref>*<sp/>p_pipeline</highlight></codeline>
<codeline lineno="2276"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2278"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2279"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Configures<sp/>color<sp/>blending<sp/>settings<sp/>in<sp/>the<sp/>pipeline.</highlight></codeline>
<codeline lineno="2280"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2281"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>sets<sp/>color<sp/>blending<sp/>and<sp/>alpha<sp/>blending<sp/>settings<sp/>in<sp/>the<sp/>ShVkPipeline<sp/>structure.</highlight></codeline>
<codeline lineno="2282"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2283"><highlight class="comment"><sp/>*<sp/>@param<sp/>enable_color_blending<sp/>Flag<sp/>indicating<sp/>if<sp/>color<sp/>blending<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="2284"><highlight class="comment"><sp/>*<sp/>@param<sp/>enable_alpha_blending<sp/>Flag<sp/>indicating<sp/>if<sp/>alpha<sp/>blending<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="2285"><highlight class="comment"><sp/>*<sp/>@param<sp/>subpass_color_attachment_count<sp/>Number<sp/>of<sp/>color<sp/>attachments<sp/>for<sp/>the<sp/>subpass.</highlight></codeline>
<codeline lineno="2286"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_pipeline<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipeline<sp/>structure<sp/>to<sp/>update.</highlight></codeline>
<codeline lineno="2287"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2288"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2289"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2290" refid="shVulkan_8h_1a2a91f52a5861799e19e633b407c595de" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a2a91f52a5861799e19e633b407c595de" kindref="member">shPipelineColorBlendSettings</ref>(</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_color_blending,</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_alpha_blending,</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/>subpass_color_attachment_count,</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref>*<sp/>p_pipeline</highlight></codeline>
<codeline lineno="2295"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2297"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2298"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>shader<sp/>module<sp/>and<sp/>adds<sp/>it<sp/>to<sp/>the<sp/>pipeline.</highlight></codeline>
<codeline lineno="2299"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2300"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>a<sp/>Vulkan<sp/>shader<sp/>module<sp/>and<sp/>updates<sp/>the<sp/>ShVkPipeline<sp/>structure.</highlight></codeline>
<codeline lineno="2301"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2302"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="2303"><highlight class="comment"><sp/>*<sp/>@param<sp/>size<sp/>Size<sp/>of<sp/>the<sp/>shader<sp/>code.</highlight></codeline>
<codeline lineno="2304"><highlight class="comment"><sp/>*<sp/>@param<sp/>code<sp/>Pointer<sp/>to<sp/>the<sp/>shader<sp/>code.</highlight></codeline>
<codeline lineno="2305"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_pipeline<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipeline<sp/>structure<sp/>to<sp/>update.</highlight></codeline>
<codeline lineno="2306"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2307"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2308"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2309" refid="shVulkan_8h_1a40c30c864957c9a6db42cdf33a8c713d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a40c30c864957c9a6db42cdf33a8c713d" kindref="member">shPipelineCreateShaderModule</ref>(</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/>size,</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code,</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref>*<sp/>p_pipeline</highlight></codeline>
<codeline lineno="2314"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2316"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2317"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>shader<sp/>stage<sp/>and<sp/>adds<sp/>it<sp/>to<sp/>the<sp/>pipeline.</highlight></codeline>
<codeline lineno="2318"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2319"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>a<sp/>Vulkan<sp/>shader<sp/>stage<sp/>and<sp/>updates<sp/>the<sp/>ShVkPipeline<sp/>structure.</highlight></codeline>
<codeline lineno="2320"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2321"><highlight class="comment"><sp/>*<sp/>@param<sp/>shader_stage<sp/>Vulkan<sp/>shader<sp/>stage<sp/>flags<sp/>(e.g.,<sp/>vertex,<sp/>fragment).</highlight></codeline>
<codeline lineno="2322"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_pipeline<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipeline<sp/>structure<sp/>to<sp/>update.</highlight></codeline>
<codeline lineno="2323"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2324"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2325"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2326" refid="shVulkan_8h_1a16517098e1929c8c9aed82a32215e59f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a16517098e1929c8c9aed82a32215e59f" kindref="member">shPipelineCreateShaderStage</ref>(</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/>VkShaderStageFlags<sp/>shader_stage,</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>p_pipeline</highlight></codeline>
<codeline lineno="2329"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2331"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2332"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Sets<sp/>push<sp/>constants<sp/>in<sp/>the<sp/>pipeline.</highlight></codeline>
<codeline lineno="2333"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2334"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>sets<sp/>the<sp/>push<sp/>constant<sp/>range<sp/>for<sp/>a<sp/>specific<sp/>shader<sp/>stage<sp/>in<sp/>the<sp/>ShVkPipeline<sp/>structure.</highlight></codeline>
<codeline lineno="2335"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2336"><highlight class="comment"><sp/>*<sp/>@param<sp/>shader_stage<sp/>Vulkan<sp/>shader<sp/>stage<sp/>flags<sp/>(e.g.,<sp/>vertex,<sp/>fragment).</highlight></codeline>
<codeline lineno="2337"><highlight class="comment"><sp/>*<sp/>@param<sp/>offset<sp/>Offset<sp/>of<sp/>the<sp/>push<sp/>constants.</highlight></codeline>
<codeline lineno="2338"><highlight class="comment"><sp/>*<sp/>@param<sp/>size<sp/>Size<sp/>of<sp/>the<sp/>push<sp/>constants.</highlight></codeline>
<codeline lineno="2339"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_pipeline<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipeline<sp/>structure<sp/>to<sp/>update.</highlight></codeline>
<codeline lineno="2340"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2341"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2342"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2343" refid="shVulkan_8h_1a2d54f31a8d660c249ad8aaf6dc9387a9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a2d54f31a8d660c249ad8aaf6dc9387a9" kindref="member">shPipelineSetPushConstants</ref>(</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/>VkShaderStageFlags<sp/>shader_stage,</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset,</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size,</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>p_pipeline</highlight></codeline>
<codeline lineno="2348"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2350"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2351"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>pipeline<sp/>layout<sp/>and<sp/>updates<sp/>the<sp/>pipeline<sp/>structure.</highlight></codeline>
<codeline lineno="2352"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2353"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>creates<sp/>a<sp/>Vulkan<sp/>pipeline<sp/>layout<sp/>using<sp/>the<sp/>specified<sp/>descriptor<sp/>set<sp/>layouts<sp/>and<sp/>updates<sp/>the<sp/>ShVkPipeline<sp/>structure.</highlight></codeline>
<codeline lineno="2354"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2355"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="2356"><highlight class="comment"><sp/>*<sp/>@param<sp/>first_descriptor_set_layout<sp/>Index<sp/>of<sp/>the<sp/>first<sp/>descriptor<sp/>set<sp/>layout.</highlight></codeline>
<codeline lineno="2357"><highlight class="comment"><sp/>*<sp/>@param<sp/>descriptor_set_layout_count<sp/>Number<sp/>of<sp/>descriptor<sp/>set<sp/>layouts.</highlight></codeline>
<codeline lineno="2358"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_pipeline_pool<sp/>Valid<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipelinePool<sp/>structure.</highlight></codeline>
<codeline lineno="2359"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_pipeline<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipeline<sp/>structure<sp/>to<sp/>update.</highlight></codeline>
<codeline lineno="2360"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2361"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2362"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2363" refid="shVulkan_8h_1a58630d16e24d088a665b11dafb24b580" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a58630d16e24d088a665b11dafb24b580" kindref="member">shPipelineCreateLayout</ref>(</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_descriptor_set_layout,</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptor_set_layout_count,</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref>*<sp/>p_pipeline_pool,</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref>*<sp/><sp/><sp/><sp/><sp/>p_pipeline</highlight></codeline>
<codeline lineno="2369"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2371"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2372"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Sets<sp/>up<sp/>a<sp/>compute<sp/>pipeline.</highlight></codeline>
<codeline lineno="2373"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2374"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>sets<sp/>up<sp/>a<sp/>Vulkan<sp/>compute<sp/>pipeline<sp/>using<sp/>the<sp/>ShVkPipeline<sp/>structure.</highlight></codeline>
<codeline lineno="2375"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2376"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="2377"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_pipeline<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipeline<sp/>structure<sp/>to<sp/>setup.</highlight></codeline>
<codeline lineno="2378"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2379"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2380"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2381" refid="shVulkan_8h_1a2def89aedf1649c0101e6e0bd222cc9f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a2def89aedf1649c0101e6e0bd222cc9f" kindref="member">shSetupComputePipeline</ref>(</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref>*<sp/>p_pipeline</highlight></codeline>
<codeline lineno="2384"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2386"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2387"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Sets<sp/>up<sp/>a<sp/>graphics<sp/>pipeline.</highlight></codeline>
<codeline lineno="2388"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2389"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>sets<sp/>up<sp/>a<sp/>Vulkan<sp/>graphics<sp/>pipeline<sp/>using<sp/>the<sp/>ShVkPipeline<sp/>structure<sp/>and<sp/>the<sp/>specified<sp/>render<sp/>pass.</highlight></codeline>
<codeline lineno="2390"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2391"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="2392"><highlight class="comment"><sp/>*<sp/>@param<sp/>render_pass<sp/>Valid<sp/>Vulkan<sp/>render<sp/>pass.</highlight></codeline>
<codeline lineno="2393"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_pipeline<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipeline<sp/>structure<sp/>to<sp/>setup.</highlight></codeline>
<codeline lineno="2394"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2395"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2396"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2397" refid="shVulkan_8h_1a06203a29c7b28da913af4c6fc007135a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a06203a29c7b28da913af4c6fc007135a" kindref="member">shSetupGraphicsPipeline</ref>(</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/>VkRenderPass<sp/><sp/>render_pass,</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref>*<sp/>p_pipeline</highlight></codeline>
<codeline lineno="2401"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2403"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2404"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Pushes<sp/>constants<sp/>to<sp/>a<sp/>pipeline<sp/>using<sp/>the<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="2405"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2406"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>updates<sp/>the<sp/>push<sp/>constants<sp/>for<sp/>a<sp/>pipeline<sp/>within<sp/>a<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="2407"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2408"><highlight class="comment"><sp/>*<sp/>@param<sp/>cmd_buffer<sp/>Valid<sp/>Vulkan<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="2409"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_data<sp/>Pointer<sp/>to<sp/>the<sp/>data<sp/>to<sp/>be<sp/>pushed<sp/>to<sp/>the<sp/>constants.</highlight></codeline>
<codeline lineno="2410"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_pipeline<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipeline<sp/>structure<sp/>containing<sp/>push<sp/>constants<sp/>information.</highlight></codeline>
<codeline lineno="2411"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2412"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2413"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2414" refid="shVulkan_8h_1a25a42e29b5ccc4c171f14ea43686c06c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a25a42e29b5ccc4c171f14ea43686c06c" kindref="member">shPipelinePushConstants</ref>(</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/>cmd_buffer,</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_data,</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref>*<sp/><sp/><sp/>p_pipeline</highlight></codeline>
<codeline lineno="2418"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2420"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2421"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Binds<sp/>a<sp/>pipeline<sp/>to<sp/>a<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="2422"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2423"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>binds<sp/>a<sp/>pipeline<sp/>(graphics<sp/>or<sp/>compute)<sp/>to<sp/>the<sp/>command<sp/>buffer<sp/>for<sp/>subsequent<sp/>commands.</highlight></codeline>
<codeline lineno="2424"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2425"><highlight class="comment"><sp/>*<sp/>@param<sp/>cmd_buffer<sp/>Valid<sp/>Vulkan<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="2426"><highlight class="comment"><sp/>*<sp/>@param<sp/>bind_point<sp/>Pipeline<sp/>bind<sp/>point<sp/>(e.g.,<sp/>VK_PIPELINE_BIND_POINT_GRAPHICS).</highlight></codeline>
<codeline lineno="2427"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_pipeline<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipeline<sp/>structure<sp/>to<sp/>be<sp/>bound.</highlight></codeline>
<codeline lineno="2428"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2429"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2430"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2431" refid="shVulkan_8h_1ab50dff5db70f602423d2f2ac4f3b69f6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1ab50dff5db70f602423d2f2ac4f3b69f6" kindref="member">shBindPipeline</ref>(</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/><sp/><sp/><sp/><sp/>cmd_buffer,</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineBindPoint<sp/>bind_point,</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_pipeline</highlight></codeline>
<codeline lineno="2435"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2437"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2438"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Binds<sp/>descriptor<sp/>set<sp/>units<sp/>to<sp/>a<sp/>pipeline<sp/>within<sp/>a<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="2439"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2440"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>binds<sp/>descriptor<sp/>set<sp/>units<sp/>to<sp/>a<sp/>pipeline<sp/>and<sp/>command<sp/>buffer,<sp/>specifying<sp/>dynamic<sp/>offsets<sp/>if<sp/>needed.</highlight></codeline>
<codeline lineno="2441"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2442"><highlight class="comment"><sp/>*<sp/>@param<sp/>cmd_buffer<sp/>Valid<sp/>Vulkan<sp/>command<sp/>buffer.</highlight></codeline>
<codeline lineno="2443"><highlight class="comment"><sp/>*<sp/>@param<sp/>first_descriptor_set<sp/>Index<sp/>of<sp/>the<sp/>first<sp/>descriptor<sp/>set.</highlight></codeline>
<codeline lineno="2444"><highlight class="comment"><sp/>*<sp/>@param<sp/>first_descriptor_set_unit_idx<sp/>Index<sp/>of<sp/>the<sp/>first<sp/>descriptor<sp/>set<sp/>unit.</highlight></codeline>
<codeline lineno="2445"><highlight class="comment"><sp/>*<sp/>@param<sp/>descriptor_set_unit_count<sp/>Number<sp/>of<sp/>descriptor<sp/>set<sp/>units<sp/>to<sp/>bind.</highlight></codeline>
<codeline lineno="2446"><highlight class="comment"><sp/>*<sp/>@param<sp/>bind_point<sp/>Pipeline<sp/>bind<sp/>point<sp/>(e.g.,<sp/>VK_PIPELINE_BIND_POINT_GRAPHICS).</highlight></codeline>
<codeline lineno="2447"><highlight class="comment"><sp/>*<sp/>@param<sp/>dynamic_descriptors_count<sp/>Number<sp/>of<sp/>dynamic<sp/>descriptors.</highlight></codeline>
<codeline lineno="2448"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_dynamic_offsets<sp/>Array<sp/>of<sp/>dynamic<sp/>offsets<sp/>for<sp/>the<sp/>descriptors.</highlight></codeline>
<codeline lineno="2449"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_pipeline_pool<sp/>Valid<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipelinePool<sp/>structure.</highlight></codeline>
<codeline lineno="2450"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_pipeline<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipeline<sp/>structure.</highlight></codeline>
<codeline lineno="2451"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2452"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2453"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2454" refid="shVulkan_8h_1ae521fee6b7010640e7b4cc2f9be8670b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1ae521fee6b7010640e7b4cc2f9be8670b" kindref="member">shPipelineBindDescriptorSetUnits</ref>(</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/><sp/><sp/><sp/><sp/>cmd_buffer,</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_descriptor_set,</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_descriptor_set_unit_idx,</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipelinePool_1a570b3e878163a4413defd7cf4ddd627b" kindref="member">descriptor_set_unit_count</ref>,</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineBindPoint<sp/>bind_point,</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamic_descriptors_count,</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_dynamic_offsets,</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref>*<sp/><sp/><sp/>p_pipeline_pool,</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_pipeline</highlight></codeline>
<codeline lineno="2464"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2466"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2467"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Destroys<sp/>shader<sp/>modules<sp/>associated<sp/>with<sp/>the<sp/>pipeline.</highlight></codeline>
<codeline lineno="2468"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2469"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>destroys<sp/>a<sp/>range<sp/>of<sp/>shader<sp/>modules<sp/>that<sp/>are<sp/>part<sp/>of<sp/>the<sp/>ShVkPipeline<sp/>structure.</highlight></codeline>
<codeline lineno="2470"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2471"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="2472"><highlight class="comment"><sp/>*<sp/>@param<sp/>first_module<sp/>Index<sp/>of<sp/>the<sp/>first<sp/>shader<sp/>module<sp/>to<sp/>destroy.</highlight></codeline>
<codeline lineno="2473"><highlight class="comment"><sp/>*<sp/>@param<sp/>module_count<sp/>Number<sp/>of<sp/>shader<sp/>modules<sp/>to<sp/>destroy.</highlight></codeline>
<codeline lineno="2474"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_pipeline<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipeline<sp/>structure.</highlight></codeline>
<codeline lineno="2475"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2476"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2477"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2478" refid="shVulkan_8h_1a5a2d1666d635e1fedbc6a2f39b26fe21" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a5a2d1666d635e1fedbc6a2f39b26fe21" kindref="member">shPipelineDestroyShaderModules</ref>(</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/>first_module,</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/>module_count,</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref>*<sp/>p_pipeline</highlight></codeline>
<codeline lineno="2483"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2485"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2486"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Destroys<sp/>the<sp/>pipeline<sp/>layout<sp/>associated<sp/>with<sp/>the<sp/>pipeline.</highlight></codeline>
<codeline lineno="2487"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2488"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>destroys<sp/>the<sp/>pipeline<sp/>layout<sp/>used<sp/>by<sp/>the<sp/>ShVkPipeline<sp/>structure.</highlight></codeline>
<codeline lineno="2489"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2490"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="2491"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_pipeline<sp/>Valid<sp/>destination<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipeline<sp/>structure.</highlight></codeline>
<codeline lineno="2492"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2493"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2494"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2495" refid="shVulkan_8h_1a910f2e68388bb2620f5173aef5f470f1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a910f2e68388bb2620f5173aef5f470f1" kindref="member">shPipelineDestroyLayout</ref>(</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref>*<sp/>p_pipeline</highlight></codeline>
<codeline lineno="2498"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"></highlight></codeline>
<codeline lineno="2500"><highlight class="normal"></highlight></codeline>
<codeline lineno="2501"><highlight class="normal"></highlight></codeline>
<codeline lineno="2502" refid="shVulkan_8h_1ae192b45b4a12b020b42e796770fc4f63" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_PIPELINE_POOL_MAX_PIPELINE_COUNT<sp/><sp/><sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2503" refid="shVulkan_8h_1a43176634bb725eea98ba3eb733bbcd7d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SH_MAX_PIPELINE_POOL_DESCRIPTOR_COUNT<sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2504"><highlight class="normal"></highlight></codeline>
<codeline lineno="2505"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2506"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2507"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Represents<sp/>a<sp/>collection<sp/>of<sp/>Vulkan<sp/>pipeline<sp/>objects<sp/>and<sp/>their<sp/>related<sp/>resources.</highlight></codeline>
<codeline lineno="2508"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2509"><highlight class="comment"><sp/>*<sp/>This<sp/>structure<sp/>holds<sp/>arrays<sp/>of<sp/>Vulkan<sp/>pipelines,<sp/>descriptor<sp/>set<sp/>layouts,<sp/>descriptor<sp/>pools,</highlight></codeline>
<codeline lineno="2510"><highlight class="comment"><sp/>*<sp/>and<sp/>other<sp/>related<sp/>resources<sp/>required<sp/>to<sp/>manage<sp/>and<sp/>use<sp/>Vulkan<sp/>pipelines<sp/>in<sp/>a<sp/>pipeline<sp/>pool.</highlight></codeline>
<codeline lineno="2511"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2512" refid="structShVkPipelinePool" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref><sp/>{</highlight></codeline>
<codeline lineno="2513" refid="structShVkPipelinePool_1a2962a50ebae3d5528ea23495226bae09" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipeline" kindref="compound">ShVkPipeline</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipelinePool_1a2962a50ebae3d5528ea23495226bae09" kindref="member">pipelines</ref>[<ref refid="shVulkan_8h_1ae192b45b4a12b020b42e796770fc4f63" kindref="member">SH_PIPELINE_POOL_MAX_PIPELINE_COUNT</ref>];<sp/></highlight><highlight class="comment">///&lt;<sp/>Array<sp/>of<sp/>Vulkan<sp/>pipelines<sp/>managed<sp/>by<sp/>the<sp/>pool.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"></highlight></codeline>
<codeline lineno="2515" refid="structShVkPipelinePool_1a3480c44626bf99b7acfe53b665d36d31" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipelinePool_1a3480c44626bf99b7acfe53b665d36d31" kindref="member">descriptor_set_layout_binding_count</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>Total<sp/>number<sp/>of<sp/>descriptor<sp/>set<sp/>layout<sp/>bindings<sp/>in<sp/>the<sp/>pool.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2516" refid="structShVkPipelinePool_1a9447ed40daae9c9da08931c9b629c89d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipelinePool_1a9447ed40daae9c9da08931c9b629c89d" kindref="member">src_descriptor_set_layout_count</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>Number<sp/>of<sp/>source<sp/>descriptor<sp/>set<sp/>layouts<sp/>for<sp/>copying<sp/>or<sp/>setup.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2517" refid="structShVkPipelinePool_1a33fa4229ab2a3dbfa87f02a4340e9d46" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipelinePool_1a33fa4229ab2a3dbfa87f02a4340e9d46" kindref="member">descriptor_pool_count</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>Total<sp/>number<sp/>of<sp/>descriptor<sp/>pools<sp/>created<sp/>and<sp/>managed<sp/>by<sp/>the<sp/>pool.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2518" refid="structShVkPipelinePool_1a1f5f31efc7c51baeecdb481f70604a3d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipelinePool_1a1f5f31efc7c51baeecdb481f70604a3d" kindref="member">descriptor_count</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>Combined<sp/>total<sp/>of<sp/>all<sp/>descriptors<sp/>in<sp/>the<sp/>descriptor<sp/>pools.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2519" refid="structShVkPipelinePool_1a44913df897a0de7876e3bf6d3415387a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipelinePool_1a44913df897a0de7876e3bf6d3415387a" kindref="member">write_descriptor_set_count</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>Total<sp/>number<sp/>of<sp/>write<sp/>descriptor<sp/>sets<sp/>used<sp/>for<sp/>updates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2520" refid="structShVkPipelinePool_1a570b3e878163a4413defd7cf4ddd627b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipelinePool_1a570b3e878163a4413defd7cf4ddd627b" kindref="member">descriptor_set_unit_count</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>Number<sp/>of<sp/>descriptor<sp/>set<sp/>units,<sp/>equal<sp/>to<sp/>write_descriptor_set_count.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2522" refid="structShVkPipelinePool_1ab9fca16ebe9b204799c6c9e964b801a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSetLayoutBinding<sp/><ref refid="structShVkPipelinePool_1ab9fca16ebe9b204799c6c9e964b801a9" kindref="member">descriptor_set_layout_bindings</ref>[<ref refid="shVulkan_8h_1a43176634bb725eea98ba3eb733bbcd7d" kindref="member">SH_MAX_PIPELINE_POOL_DESCRIPTOR_COUNT</ref>];<sp/></highlight><highlight class="comment">///&lt;<sp/>Descriptor<sp/>set<sp/>layout<sp/>bindings.<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="normal"></highlight></codeline>
<codeline lineno="2524" refid="structShVkPipelinePool_1a0df46032ec731978c983a8956bbcdb86" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSetLayout<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipelinePool_1a0df46032ec731978c983a8956bbcdb86" kindref="member">descriptor_set_layouts</ref>[<ref refid="shVulkan_8h_1a43176634bb725eea98ba3eb733bbcd7d" kindref="member">SH_MAX_PIPELINE_POOL_DESCRIPTOR_COUNT</ref>];<sp/></highlight><highlight class="comment">///&lt;<sp/>Descriptor<sp/>set<sp/>layouts.<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2525"><highlight class="normal"></highlight></codeline>
<codeline lineno="2526" refid="structShVkPipelinePool_1a2b3928a1b4a6082ad92413632adbd896" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorPool<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipelinePool_1a2b3928a1b4a6082ad92413632adbd896" kindref="member">descriptor_pools</ref>[<ref refid="shVulkan_8h_1a43176634bb725eea98ba3eb733bbcd7d" kindref="member">SH_MAX_PIPELINE_POOL_DESCRIPTOR_COUNT</ref>];<sp/></highlight><highlight class="comment">///&lt;<sp/>Descriptor<sp/>pools.<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2528" refid="structShVkPipelinePool_1a9b14e9cc6fbff4a1fc2aea96c21b8c98" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSet<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipelinePool_1a9b14e9cc6fbff4a1fc2aea96c21b8c98" kindref="member">descriptor_sets</ref>[<ref refid="shVulkan_8h_1a43176634bb725eea98ba3eb733bbcd7d" kindref="member">SH_MAX_PIPELINE_POOL_DESCRIPTOR_COUNT</ref>];<sp/></highlight><highlight class="comment">///&lt;<sp/>Descriptor<sp/>sets.<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2529"><highlight class="normal"></highlight></codeline>
<codeline lineno="2530" refid="structShVkPipelinePool_1adc616b02e045ac43a6a3fae274a84cc5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorBufferInfo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipelinePool_1adc616b02e045ac43a6a3fae274a84cc5" kindref="member">descriptor_buffer_infos</ref>[<ref refid="shVulkan_8h_1a43176634bb725eea98ba3eb733bbcd7d" kindref="member">SH_MAX_PIPELINE_POOL_DESCRIPTOR_COUNT</ref>];<sp/></highlight><highlight class="comment">///&lt;<sp/>Descriptor<sp/>buffer<sp/>info.<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2532" refid="structShVkPipelinePool_1abcd4de99b9f4e7101819f61932ebd256" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VkWriteDescriptorSet<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShVkPipelinePool_1abcd4de99b9f4e7101819f61932ebd256" kindref="member">write_descriptor_sets</ref>[<ref refid="shVulkan_8h_1a43176634bb725eea98ba3eb733bbcd7d" kindref="member">SH_MAX_PIPELINE_POOL_DESCRIPTOR_COUNT</ref>];<sp/></highlight><highlight class="comment">///&lt;<sp/>Write<sp/>descriptor<sp/>sets.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2533"><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal">}<sp/><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref>;</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2539"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2540"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Allocates<sp/>a<sp/>new<sp/>ShVkPipelinePool<sp/>structure.</highlight></codeline>
<codeline lineno="2541"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2542"><highlight class="comment"><sp/>*<sp/>This<sp/>macro<sp/>allocates<sp/>heap<sp/>memory<sp/>for<sp/>a<sp/>new<sp/>ShVkPipelinePool<sp/>structure<sp/>and<sp/>initializes<sp/>it<sp/>to<sp/>zero.</highlight></codeline>
<codeline lineno="2543"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2544"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>newly<sp/>allocated<sp/>ShVkPipelinePool<sp/>structure,<sp/>or<sp/>NULL<sp/>if<sp/>allocation<sp/>fails.</highlight></codeline>
<codeline lineno="2545"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2546" refid="shVulkan_8h_1a9d9930a12e5728bf56b05fcbef6f9a0c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>shAllocatePipelinePool()<sp/>((ShVkPipelinePool*)calloc(1,<sp/>sizeof(ShVkPipelinePool)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2547"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2548"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2549"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Frees<sp/>the<sp/>memory<sp/>of<sp/>an<sp/>ShVkPipelinePool<sp/>structure.</highlight></codeline>
<codeline lineno="2550"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2551"><highlight class="comment"><sp/>*<sp/>This<sp/>macro<sp/>frees<sp/>the<sp/>memory<sp/>allocated<sp/>on<sp/>the<sp/>heap<sp/>for<sp/>an<sp/>ShVkPipelinePool<sp/>structure.</highlight></codeline>
<codeline lineno="2552"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2553"><highlight class="comment"><sp/>*<sp/>@param<sp/>ptr<sp/>Pointer<sp/>to<sp/>the<sp/>ShVkPipelinePool<sp/>structure<sp/>to<sp/>be<sp/>freed.</highlight></codeline>
<codeline lineno="2554"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2555" refid="shVulkan_8h_1a7dcc542b5415675c48a7196d3ae241f2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>shFreePipelinePool<sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2556"><highlight class="normal"></highlight></codeline>
<codeline lineno="2557"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2558"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2559"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>descriptor<sp/>set<sp/>layout<sp/>binding<sp/>for<sp/>the<sp/>pipeline<sp/>pool.</highlight></codeline>
<codeline lineno="2560"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2561"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>initializes<sp/>a<sp/>descriptor<sp/>set<sp/>layout<sp/>binding<sp/>in<sp/>the<sp/>pipeline<sp/>pool.</highlight></codeline>
<codeline lineno="2562"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2563"><highlight class="comment"><sp/>*<sp/>@param<sp/>binding<sp/>Binding<sp/>index<sp/>in<sp/>the<sp/>descriptor<sp/>set<sp/>layout.</highlight></codeline>
<codeline lineno="2564"><highlight class="comment"><sp/>*<sp/>@param<sp/>descriptor_type<sp/>Type<sp/>of<sp/>the<sp/>descriptor<sp/>(e.g.,<sp/>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER).</highlight></codeline>
<codeline lineno="2565"><highlight class="comment"><sp/>*<sp/>@param<sp/>descriptor_set_count<sp/>Number<sp/>of<sp/>descriptor<sp/>sets.</highlight></codeline>
<codeline lineno="2566"><highlight class="comment"><sp/>*<sp/>@param<sp/>shader_stage<sp/>Shader<sp/>stages<sp/>that<sp/>use<sp/>this<sp/>descriptor.</highlight></codeline>
<codeline lineno="2567"><highlight class="comment"><sp/>*<sp/>@param[in,out]<sp/>p_pipeline_pool<sp/>Valid<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipelinePool<sp/>structure.</highlight></codeline>
<codeline lineno="2568"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2569"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2570"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2571" refid="shVulkan_8h_1a69bc1e4c6dd7f51afee92a76983b52f6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a69bc1e4c6dd7f51afee92a76983b52f6" kindref="member">shPipelinePoolCreateDescriptorSetLayoutBinding</ref>(</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binding,</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorType<sp/><sp/><sp/>descriptor_type,</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptor_set_count,</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/>VkShaderStageFlags<sp/>shader_stage,</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref>*<sp/><sp/>p_pipeline_pool</highlight></codeline>
<codeline lineno="2577"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2579"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2580"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>descriptor<sp/>set<sp/>layouts<sp/>in<sp/>the<sp/>pipeline<sp/>pool.</highlight></codeline>
<codeline lineno="2581"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2582"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>initializes<sp/>descriptor<sp/>set<sp/>layouts<sp/>in<sp/>the<sp/>pipeline<sp/>pool.</highlight></codeline>
<codeline lineno="2583"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2584"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="2585"><highlight class="comment"><sp/>*<sp/>@param<sp/>first_binding_idx<sp/>Index<sp/>of<sp/>the<sp/>first<sp/>binding<sp/>in<sp/>the<sp/>layout.</highlight></codeline>
<codeline lineno="2586"><highlight class="comment"><sp/>*<sp/>@param<sp/>binding_count<sp/>Number<sp/>of<sp/>bindings.</highlight></codeline>
<codeline lineno="2587"><highlight class="comment"><sp/>*<sp/>@param<sp/>set_layout_idx<sp/>Index<sp/>of<sp/>the<sp/>set<sp/>layout<sp/>to<sp/>initialize.</highlight></codeline>
<codeline lineno="2588"><highlight class="comment"><sp/>*<sp/>@param[in,out]<sp/>p_pipeline_pool<sp/>Valid<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipelinePool<sp/>structure.</highlight></codeline>
<codeline lineno="2589"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2590"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2591"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2592" refid="shVulkan_8h_1a2cff372c4f8726b124bb4c70706af07d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a2cff372c4f8726b124bb4c70706af07d" kindref="member">shPipelinePoolCreateDescriptorSetLayout</ref>(</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_binding_idx,</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binding_count,</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_layout_idx,</highlight><highlight class="comment">//set_idx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref>*<sp/>p_pipeline_pool</highlight></codeline>
<codeline lineno="2598"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2600"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2601"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Copies<sp/>descriptor<sp/>set<sp/>layouts<sp/>within<sp/>the<sp/>pipeline<sp/>pool.</highlight></codeline>
<codeline lineno="2602"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2603"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>copies<sp/>descriptor<sp/>set<sp/>layouts<sp/>from<sp/>source<sp/>indices<sp/>to<sp/>destination<sp/>indices<sp/>in<sp/>the<sp/>pipeline<sp/>pool.</highlight></codeline>
<codeline lineno="2604"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2605"><highlight class="comment"><sp/>*<sp/>@param<sp/>src_set_layout_idx<sp/>Index<sp/>of<sp/>the<sp/>source<sp/>descriptor<sp/>set<sp/>layout.</highlight></codeline>
<codeline lineno="2606"><highlight class="comment"><sp/>*<sp/>@param<sp/>first_dst_set_layout_idx<sp/>Index<sp/>of<sp/>the<sp/>first<sp/>destination<sp/>descriptor<sp/>set<sp/>layout.</highlight></codeline>
<codeline lineno="2607"><highlight class="comment"><sp/>*<sp/>@param<sp/>dst_set_layout_count<sp/>Number<sp/>of<sp/>destination<sp/>descriptor<sp/>set<sp/>layouts.</highlight></codeline>
<codeline lineno="2608"><highlight class="comment"><sp/>*<sp/>@param[in,out]<sp/>p_pipeline_pool<sp/>Valid<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipelinePool<sp/>structure.</highlight></codeline>
<codeline lineno="2609"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2610"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2611"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2612" refid="shVulkan_8h_1ad50f750a6e479f1188d3d27d82163f4e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1ad50f750a6e479f1188d3d27d82163f4e" kindref="member">shPipelinePoolCopyDescriptorSetLayout</ref>(</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_set_layout_idx,</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_dst_set_layout_idx,</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_set_layout_count,</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref>*<sp/>p_pipeline_pool</highlight></codeline>
<codeline lineno="2617"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2619"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2620"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>descriptor<sp/>pool<sp/>in<sp/>the<sp/>pipeline<sp/>pool.</highlight></codeline>
<codeline lineno="2621"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2622"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>initializes<sp/>a<sp/>descriptor<sp/>pool<sp/>in<sp/>the<sp/>pipeline<sp/>pool.</highlight></codeline>
<codeline lineno="2623"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2624"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="2625"><highlight class="comment"><sp/>*<sp/>@param<sp/>pool_idx<sp/>Index<sp/>of<sp/>the<sp/>pool<sp/>to<sp/>initialize.</highlight></codeline>
<codeline lineno="2626"><highlight class="comment"><sp/>*<sp/>@param<sp/>descriptor_type<sp/>Type<sp/>of<sp/>the<sp/>descriptor<sp/>(e.g.,<sp/>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER).</highlight></codeline>
<codeline lineno="2627"><highlight class="comment"><sp/>*<sp/>@param<sp/>descriptor_count<sp/>Number<sp/>of<sp/>descriptors<sp/>in<sp/>the<sp/>pool.</highlight></codeline>
<codeline lineno="2628"><highlight class="comment"><sp/>*<sp/>@param[in,out]<sp/>p_pipeline_pool<sp/>Valid<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipelinePool<sp/>structure.</highlight></codeline>
<codeline lineno="2629"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2630"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2631"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2632" refid="shVulkan_8h_1ab5045b342ed0bcad88c9e95ff87df6c5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1ab5045b342ed0bcad88c9e95ff87df6c5" kindref="member">shPipelinePoolCreateDescriptorPool</ref>(</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool_idx,</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorType<sp/><sp/>descriptor_type,</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptor_count,</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref>*<sp/>p_pipeline_pool</highlight></codeline>
<codeline lineno="2638"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2640"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2641"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Allocates<sp/>descriptor<sp/>set<sp/>units<sp/>in<sp/>the<sp/>pipeline<sp/>pool.</highlight></codeline>
<codeline lineno="2642"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2643"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>allocates<sp/>descriptor<sp/>set<sp/>units<sp/>for<sp/>the<sp/>pipeline<sp/>pool.</highlight></codeline>
<codeline lineno="2644"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2645"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="2646"><highlight class="comment"><sp/>*<sp/>@param<sp/>binding<sp/>Binding<sp/>index<sp/>in<sp/>the<sp/>descriptor<sp/>set<sp/>layout.</highlight></codeline>
<codeline lineno="2647"><highlight class="comment"><sp/>*<sp/>@param<sp/>pool_idx<sp/>Index<sp/>of<sp/>the<sp/>descriptor<sp/>pool.</highlight></codeline>
<codeline lineno="2648"><highlight class="comment"><sp/>*<sp/>@param<sp/>descriptor_type<sp/>Type<sp/>of<sp/>the<sp/>descriptor<sp/>(e.g.,<sp/>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER).</highlight></codeline>
<codeline lineno="2649"><highlight class="comment"><sp/>*<sp/>@param<sp/>first_descriptor_set_unit<sp/>Index<sp/>of<sp/>the<sp/>first<sp/>descriptor<sp/>set<sp/>unit<sp/>to<sp/>allocate.</highlight></codeline>
<codeline lineno="2650"><highlight class="comment"><sp/>*<sp/>@param<sp/>descriptor_set_unit_count<sp/>Number<sp/>of<sp/>descriptor<sp/>set<sp/>units<sp/>to<sp/>allocate.</highlight></codeline>
<codeline lineno="2651"><highlight class="comment"><sp/>*<sp/>@param[in,out]<sp/>p_pipeline_pool<sp/>Valid<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipelinePool<sp/>structure.</highlight></codeline>
<codeline lineno="2652"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2653"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2654"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2655" refid="shVulkan_8h_1a47b7854828dcf2d0a8cfdbabe1e1d1c8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a47b7854828dcf2d0a8cfdbabe1e1d1c8" kindref="member">shPipelinePoolAllocateDescriptorSetUnits</ref>(</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binding,</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool_idx,</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorType<sp/><sp/>descriptor_type,</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_descriptor_set_unit,</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptor_set_unit_count,</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref>*<sp/>p_pipeline_pool</highlight></codeline>
<codeline lineno="2663"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2665"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2666"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Sets<sp/>descriptor<sp/>buffer<sp/>infos<sp/>in<sp/>the<sp/>pipeline<sp/>pool.</highlight></codeline>
<codeline lineno="2667"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2668"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>sets<sp/>the<sp/>buffer<sp/>information<sp/>for<sp/>descriptors<sp/>in<sp/>the<sp/>pipeline<sp/>pool.</highlight></codeline>
<codeline lineno="2669"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2670"><highlight class="comment"><sp/>*<sp/>@param<sp/>first_descriptor<sp/>Index<sp/>of<sp/>the<sp/>first<sp/>descriptor<sp/>to<sp/>set.</highlight></codeline>
<codeline lineno="2671"><highlight class="comment"><sp/>*<sp/>@param<sp/>descriptor_count<sp/>Number<sp/>of<sp/>descriptors<sp/>to<sp/>update.</highlight></codeline>
<codeline lineno="2672"><highlight class="comment"><sp/>*<sp/>@param<sp/>buffer<sp/>Vulkan<sp/>buffer<sp/>to<sp/>associate<sp/>with<sp/>the<sp/>descriptors.</highlight></codeline>
<codeline lineno="2673"><highlight class="comment"><sp/>*<sp/>@param<sp/>buffer_offset<sp/>Offset<sp/>into<sp/>the<sp/>buffer.</highlight></codeline>
<codeline lineno="2674"><highlight class="comment"><sp/>*<sp/>@param<sp/>buffer_size<sp/>Size<sp/>of<sp/>the<sp/>buffer.</highlight></codeline>
<codeline lineno="2675"><highlight class="comment"><sp/>*<sp/>@param[in,out]<sp/>p_pipeline_pool<sp/>Valid<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipelinePool<sp/>structure.</highlight></codeline>
<codeline lineno="2676"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2677"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2678"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2679" refid="shVulkan_8h_1a5487bb274e93182c0a8b4452479fe0d6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a5487bb274e93182c0a8b4452479fe0d6" kindref="member">shPipelinePoolSetDescriptorBufferInfos</ref>(</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_descriptor,</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptor_count,</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBuffer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer,</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_offset,</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_size,</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref>*<sp/>p_pipeline_pool</highlight></codeline>
<codeline lineno="2686"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2688"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2689"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Destroys<sp/>descriptor<sp/>set<sp/>layouts<sp/>in<sp/>the<sp/>pipeline<sp/>pool.</highlight></codeline>
<codeline lineno="2690"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2691"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>destroys<sp/>a<sp/>range<sp/>of<sp/>descriptor<sp/>set<sp/>layouts<sp/>in<sp/>the<sp/>pipeline<sp/>pool.</highlight></codeline>
<codeline lineno="2692"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2693"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="2694"><highlight class="comment"><sp/>*<sp/>@param<sp/>first_set_layout<sp/>Index<sp/>of<sp/>the<sp/>first<sp/>descriptor<sp/>set<sp/>layout<sp/>to<sp/>destroy.</highlight></codeline>
<codeline lineno="2695"><highlight class="comment"><sp/>*<sp/>@param<sp/>set_layout_count<sp/>Number<sp/>of<sp/>descriptor<sp/>set<sp/>layouts<sp/>to<sp/>destroy.</highlight></codeline>
<codeline lineno="2696"><highlight class="comment"><sp/>*<sp/>@param[in,out]<sp/>p_pipeline_pool<sp/>Valid<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipelinePool<sp/>structure.</highlight></codeline>
<codeline lineno="2697"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2698"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2699"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2700" refid="shVulkan_8h_1a3a5f03c10a589c5cef2e0eeaa8a785d0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a3a5f03c10a589c5cef2e0eeaa8a785d0" kindref="member">shPipelinePoolDestroyDescriptorSetLayouts</ref>(</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_set_layout,</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_layout_count,</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref>*<sp/>p_pipeline_pool</highlight></codeline>
<codeline lineno="2705"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2707"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2708"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Destroys<sp/>descriptor<sp/>pools<sp/>in<sp/>the<sp/>pipeline<sp/>pool.</highlight></codeline>
<codeline lineno="2709"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2710"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>destroys<sp/>a<sp/>range<sp/>of<sp/>descriptor<sp/>pools<sp/>in<sp/>the<sp/>pipeline<sp/>pool.</highlight></codeline>
<codeline lineno="2711"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2712"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="2713"><highlight class="comment"><sp/>*<sp/>@param<sp/>first_pool<sp/>Index<sp/>of<sp/>the<sp/>first<sp/>descriptor<sp/>pool<sp/>to<sp/>destroy.</highlight></codeline>
<codeline lineno="2714"><highlight class="comment"><sp/>*<sp/>@param<sp/>pool_count<sp/>Number<sp/>of<sp/>descriptor<sp/>pools<sp/>to<sp/>destroy.</highlight></codeline>
<codeline lineno="2715"><highlight class="comment"><sp/>*<sp/>@param[in,out]<sp/>p_pipeline_pool<sp/>Valid<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipelinePool<sp/>structure.</highlight></codeline>
<codeline lineno="2716"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2717"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2718"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2719" refid="shVulkan_8h_1a93419ab7fff4fbc0b26a471fa384a563" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1a93419ab7fff4fbc0b26a471fa384a563" kindref="member">shPipelinePoolDestroyDescriptorPools</ref>(</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_pool,</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool_count,</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref>*<sp/>p_pipeline_pool</highlight></codeline>
<codeline lineno="2724"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2726"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2727"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Updates<sp/>descriptor<sp/>set<sp/>units<sp/>in<sp/>the<sp/>pipeline<sp/>pool.</highlight></codeline>
<codeline lineno="2728"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2729"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>updates<sp/>the<sp/>descriptor<sp/>set<sp/>units<sp/>within<sp/>the<sp/>pipeline<sp/>pool.</highlight></codeline>
<codeline lineno="2730"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2731"><highlight class="comment"><sp/>*<sp/>@param<sp/>device<sp/>Valid<sp/>Vulkan<sp/>device.</highlight></codeline>
<codeline lineno="2732"><highlight class="comment"><sp/>*<sp/>@param<sp/>first_descriptor_set_unit<sp/>Index<sp/>of<sp/>the<sp/>first<sp/>descriptor<sp/>set<sp/>unit<sp/>to<sp/>update.</highlight></codeline>
<codeline lineno="2733"><highlight class="comment"><sp/>*<sp/>@param<sp/>descriptor_set_unit_count<sp/>Number<sp/>of<sp/>descriptor<sp/>set<sp/>units<sp/>to<sp/>update.</highlight></codeline>
<codeline lineno="2734"><highlight class="comment"><sp/>*<sp/>@param[in,out]<sp/>p_pipeline_pool<sp/>Valid<sp/>pointer<sp/>to<sp/>the<sp/>ShVkPipelinePool<sp/>structure.</highlight></codeline>
<codeline lineno="2735"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2736"><highlight class="comment"><sp/>*<sp/>@return<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="2737"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2738" refid="shVulkan_8h_1aa9fb1a7b0e06ac4543f75298c0ca4fdb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="shVulkan_8h_1aa9fb1a7b0e06ac4543f75298c0ca4fdb" kindref="member">shPipelinePoolUpdateDescriptorSetUnits</ref>(</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_descriptor_set_unit,</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptor_set_unit_count,</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShVkPipelinePool" kindref="compound">ShVkPipelinePool</ref>*<sp/>p_pipeline_pool</highlight></codeline>
<codeline lineno="2743"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"></highlight></codeline>
<codeline lineno="2745"><highlight class="normal"></highlight></codeline>
<codeline lineno="2746"><highlight class="normal"></highlight></codeline>
<codeline lineno="2747"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2748"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="comment">//__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2750"><highlight class="normal"></highlight></codeline>
<codeline lineno="2751"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="comment">//SH_VULKAN_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/sinho/Desktop/Github/shvulkan/shvulkan/include/shvulkan/shVulkan.h"/>
  </compounddef>
</doxygen>
