<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="scene__example_8md" kind="file" language="Markdown">
    <compoundname>scene_example.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>Scene<sp/>Example</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">![](https://img.shields.io/badge/shvulkan%20|%20SINHO%20SOFTWORKS-3CFADC?style=for-the-badge&amp;logo=&amp;logoColor=white&amp;labelColor=990042)</highlight></codeline>
<codeline><highlight class="normal">[![](https://img.shields.io/badge/GitHub_repository-3CFADC?style=for-the-badge&amp;logo=github&amp;logoColor=black)](https://github.com/mrsinho/shvulkan)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[TOC]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Scene</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>more<sp/>complex<sp/>example<sp/>starts<sp/>with<sp/>the<sp/>definition<sp/>of<sp/>vertex<sp/>data<sp/>for<sp/>two<sp/>shapes:<sp/>a<sp/>quadrilateral<sp/>and<sp/>a<sp/>triangle.<sp/>These<sp/>vertex<sp/>buffers<sp/>are<sp/>represented<sp/>by<sp/>arrays<sp/>of<sp/>floating-point<sp/>numbers,<sp/>where<sp/>each<sp/>vertex<sp/>is<sp/>described<sp/>by<sp/>its<sp/>position<sp/>and<sp/>texture<sp/>coordinates<sp/>(which<sp/>are<sp/>not<sp/>going<sp/>to<sp/>be<sp/>used<sp/>but<sp/>have<sp/>been<sp/>set<sp/>up<sp/>for<sp/>demonstration).<sp/>Additionally,<sp/>a<sp/>series<sp/>of<sp/>transformation<sp/>matrices<sp/>for<sp/>instancing<sp/>are<sp/>defined,<sp/>enabling<sp/>the<sp/>efficient<sp/>rendering<sp/>of<sp/>multiple<sp/>instances<sp/>of<sp/>the<sp/>same<sp/>geometry<sp/>in<sp/>different<sp/>positions<sp/>and<sp/>orientations.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">![](./../media/nixos-wayland-scene.png)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>setup<sp/>also<sp/>includes<sp/>an<sp/>array<sp/>for<sp/>indices,<sp/>which<sp/>specifies<sp/>the<sp/>order<sp/>in<sp/>which<sp/>vertices<sp/>are<sp/>used<sp/>to<sp/>form<sp/>primitives,<sp/>allowing<sp/>for<sp/>indexed<sp/>drawing<sp/>of<sp/>the<sp/>quadrilateral.<sp/>Lighting<sp/>information<sp/>is<sp/>provided,<sp/>specifying<sp/>the<sp/>light&apos;s<sp/>position<sp/>and<sp/>color.<sp/>The<sp/>code<sp/>also<sp/>includes<sp/>a<sp/>projection-view<sp/>matrix<sp/>to<sp/>handle<sp/>transformations<sp/>within<sp/>the<sp/>scene.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>main<sp/>function<sp/>initializes<sp/>the<sp/>GLFW<sp/>library,<sp/>which<sp/>provides<sp/>windowing<sp/>and<sp/>input<sp/>handling.<sp/>It<sp/>checks<sp/>for<sp/>Vulkan<sp/>support<sp/>before<sp/>creating<sp/>a<sp/>window<sp/>and<sp/>setting<sp/>up<sp/>the<sp/>Vulkan<sp/>instance,<sp/>surface,<sp/>physical<sp/>device,<sp/>and<sp/>logical<sp/>device.<sp/>It<sp/>also<sp/>establishes<sp/>queues<sp/>for<sp/>graphics<sp/>and<sp/>presentation<sp/>operations.<sp/>Swapchain<sp/>creation<sp/>follows,<sp/>setting<sp/>up<sp/>the<sp/>mechanism<sp/>that<sp/>manages<sp/>frame<sp/>presentation.<sp/>The<sp/>command<sp/>buffers<sp/>are<sp/>allocated<sp/>for<sp/>both<sp/>graphics<sp/>and<sp/>presentation<sp/>tasks,<sp/>and<sp/>synchronization<sp/>primitives<sp/>such<sp/>as<sp/>fences<sp/>and<sp/>semaphores<sp/>are<sp/>set<sp/>up<sp/>to<sp/>coordinate<sp/>rendering.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Several<sp/>Vulkan-related<sp/>functions<sp/>follow,<sp/>aimed<sp/>at<sp/>managing<sp/>resources<sp/>and<sp/>operations<sp/>essential<sp/>for<sp/>rendering.<sp/>Functions<sp/>like<sp/>writeMemory<sp/>and<sp/>releaseMemory<sp/>handle<sp/>memory<sp/>allocation<sp/>and<sp/>deallocation<sp/>for<sp/>various<sp/>buffers,<sp/>including<sp/>vertex,<sp/>index,<sp/>instance,<sp/>and<sp/>descriptor<sp/>buffers.<sp/>The<sp/>createPipelinesDataPool<sp/>and<sp/>createPipeline<sp/>functions<sp/>prepare<sp/>the<sp/>pipeline<sp/>pool<sp/>and<sp/>graphics<sp/>pipeline<sp/>configurations<sp/>necessary<sp/>for<sp/>rendering,<sp/>while<sp/>resizeWindow<sp/>manages<sp/>window<sp/>resizing,<sp/>ensuring<sp/>that<sp/>Vulkan&apos;s<sp/>swapchain<sp/>and<sp/>related<sp/>resources<sp/>are<sp/>updated<sp/>accordingly.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Finally,<sp/>the<sp/>render<sp/>pass<sp/>configuration<sp/>is<sp/>prepared,<sp/>involving<sp/>the<sp/>setup<sp/>of<sp/>attachments<sp/>for<sp/>color<sp/>and<sp/>depth,<sp/>along<sp/>with<sp/>subpass<sp/>definitions,<sp/>ensuring<sp/>that<sp/>rendering<sp/>can<sp/>proceed<sp/>with<sp/>proper<sp/>blending,<sp/>depth<sp/>testing,<sp/>and<sp/>other<sp/>graphics<sp/>operations<sp/>necessary<sp/>for<sp/>complex<sp/>rendering<sp/>tasks<sp/>like<sp/>alpha<sp/>blending<sp/>and<sp/>instancing.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Next,<sp/>the<sp/>swapchain<sp/>images<sp/>are<sp/>retrieved<sp/>and<sp/>image<sp/>views<sp/>are<sp/>created<sp/>for<sp/>each<sp/>image.<sp/>Image<sp/>views<sp/>define<sp/>how<sp/>the<sp/>swapchain<sp/>images<sp/>are<sp/>accessed<sp/>during<sp/>rendering,<sp/>and<sp/>they<sp/>are<sp/>essential<sp/>for<sp/>binding<sp/>the<sp/>images<sp/>to<sp/>framebuffers<sp/>and<sp/>render<sp/>passes.<sp/>Finally,<sp/>a<sp/>new<sp/>render<sp/>pass<sp/>and<sp/>a<sp/>corresponding<sp/>set<sp/>of<sp/>framebuffers<sp/>are<sp/>created.<sp/>This<sp/>process<sp/>illustrates<sp/>the<sp/>complexity<sp/>of<sp/>pipeline<sp/>management<sp/>in<sp/>Vulkan,<sp/>where<sp/>resources<sp/>must<sp/>be<sp/>meticulously<sp/>managed,<sp/>and<sp/>any<sp/>changes<sp/>in<sp/>the<sp/>window<sp/>dimensions<sp/>necessitate<sp/>careful<sp/>reconstruction<sp/>of<sp/>rendering<sp/>components.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Command<sp/>Buffers<sp/>and<sp/>Synchronization</highlight></codeline>
<codeline><highlight class="normal">In<sp/>Vulkan,<sp/>rendering<sp/>commands<sp/>are<sp/>recorded<sp/>in<sp/>command<sp/>buffers,<sp/>which<sp/>are<sp/>submitted<sp/>to<sp/>the<sp/>GPU<sp/>for<sp/>execution.<sp/>Command<sp/>buffers<sp/>allow<sp/>the<sp/>application<sp/>to<sp/>batch<sp/>operations,<sp/>improving<sp/>performance<sp/>by<sp/>minimizing<sp/>the<sp/>overhead<sp/>of<sp/>issuing<sp/>commands<sp/>individually.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>this<sp/>application,<sp/>command<sp/>buffers<sp/>are<sp/>reset<sp/>and<sp/>recorded<sp/>at<sp/>each<sp/>iteration<sp/>of<sp/>the<sp/>draw<sp/>loop.<sp/>The<sp/>command<sp/>buffer<sp/>for<sp/>the<sp/>current<sp/>swapchain<sp/>image<sp/>is<sp/>reset<sp/>using<sp/>`shResetFences`,<sp/>ensuring<sp/>that<sp/>any<sp/>previous<sp/>operations<sp/>have<sp/>completed.<sp/>This<sp/>is<sp/>followed<sp/>by<sp/>recording<sp/>new<sp/>commands<sp/>using<sp/>`shBeginCommandBuffer`.<sp/>The<sp/>recorded<sp/>commands<sp/>include<sp/>beginning<sp/>a<sp/>render<sp/>pass,<sp/>specifying<sp/>the<sp/>rendering<sp/>extent<sp/>and<sp/>clear<sp/>color,<sp/>and<sp/>ending<sp/>the<sp/>render<sp/>pass.<sp/>After<sp/>the<sp/>commands<sp/>are<sp/>recorded,<sp/>they<sp/>are<sp/>submitted<sp/>to<sp/>the<sp/>graphics<sp/>queue<sp/>for<sp/>execution.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Synchronization<sp/>between<sp/>the<sp/>CPU<sp/>and<sp/>GPU,<sp/>as<sp/>well<sp/>as<sp/>between<sp/>different<sp/>stages<sp/>of<sp/>the<sp/>GPU<sp/>pipeline,<sp/>is<sp/>managed<sp/>using<sp/>semaphores<sp/>and<sp/>fences.<sp/>Semaphores<sp/>are<sp/>used<sp/>to<sp/>signal<sp/>when<sp/>specific<sp/>operations<sp/>are<sp/>complete,<sp/>such<sp/>as<sp/>when<sp/>an<sp/>image<sp/>is<sp/>acquired<sp/>from<sp/>the<sp/>swapchain<sp/>or<sp/>when<sp/>the<sp/>GPU<sp/>finishes<sp/>rendering<sp/>to<sp/>a<sp/>swapchain<sp/>image.<sp/>Fences,<sp/>on<sp/>the<sp/>other<sp/>hand,<sp/>are<sp/>used<sp/>to<sp/>ensure<sp/>that<sp/>command<sp/>buffers<sp/>have<sp/>finished<sp/>executing<sp/>before<sp/>they<sp/>are<sp/>reused<sp/>or<sp/>reset.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>the<sp/>draw<sp/>loop,<sp/>a<sp/>semaphore<sp/>is<sp/>created<sp/>to<sp/>signal<sp/>when<sp/>a<sp/>swapchain<sp/>image<sp/>has<sp/>been<sp/>acquired<sp/>using<sp/>`shAcquireSwapchainImage`.<sp/>After<sp/>acquiring<sp/>an<sp/>image,<sp/>the<sp/>application<sp/>waits<sp/>for<sp/>the<sp/>corresponding<sp/>command<sp/>buffer&apos;s<sp/>fence<sp/>to<sp/>ensure<sp/>that<sp/>any<sp/>previous<sp/>rendering<sp/>operations<sp/>are<sp/>complete.<sp/>Once<sp/>the<sp/>fence<sp/>is<sp/>reset,<sp/>new<sp/>rendering<sp/>commands<sp/>are<sp/>recorded,<sp/>and<sp/>the<sp/>command<sp/>buffer<sp/>is<sp/>submitted<sp/>to<sp/>the<sp/>graphics<sp/>queue.<sp/>The<sp/>use<sp/>of<sp/>fences<sp/>and<sp/>semaphores<sp/>in<sp/>this<sp/>manner<sp/>ensures<sp/>proper<sp/>synchronization<sp/>between<sp/>the<sp/>different<sp/>stages<sp/>of<sp/>rendering,<sp/>preventing<sp/>issues<sp/>such<sp/>as<sp/>accessing<sp/>swapchain<sp/>images<sp/>before<sp/>rendering<sp/>has<sp/>completed.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Draw<sp/>Loop<sp/>Architecture</highlight></codeline>
<codeline><highlight class="normal">At<sp/>the<sp/>start<sp/>of<sp/>each<sp/>iteration,<sp/>the<sp/>application<sp/>polls<sp/>for<sp/>window<sp/>events<sp/>using<sp/>glfwPollEvents,<sp/>which<sp/>captures<sp/>user<sp/>inputs<sp/>and<sp/>other<sp/>window<sp/>events<sp/>such<sp/>as<sp/>resizing<sp/>or<sp/>closing.<sp/>It<sp/>then<sp/>retrieves<sp/>the<sp/>current<sp/>window<sp/>dimensions<sp/>using<sp/>`glfwGetWindowSize`.<sp/>If<sp/>the<sp/>window<sp/>is<sp/>minimized<sp/>(i.e.,<sp/>either<sp/>dimension<sp/>is<sp/>zero),<sp/>the<sp/>loop<sp/>skips<sp/>the<sp/>rendering<sp/>operations.<sp/>Otherwise,<sp/>if<sp/>a<sp/>resize<sp/>is<sp/>detected,<sp/>the<sp/>resizeWindow<sp/>function<sp/>is<sp/>invoked<sp/>to<sp/>recreate<sp/>the<sp/>swapchain<sp/>and<sp/>all<sp/>associated<sp/>resources,<sp/>such<sp/>as<sp/>image<sp/>views,<sp/>render<sp/>passes,<sp/>and<sp/>framebuffers.<sp/>The<sp/>pipeline&apos;s<sp/>viewport<sp/>and<sp/>scissor<sp/>rect<sp/>are<sp/>updated<sp/>as<sp/>well<sp/>to<sp/>match<sp/>the<sp/>new<sp/>window<sp/>size.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>the<sp/>swapchain<sp/>is<sp/>flagged<sp/>as<sp/>suboptimal<sp/>(e.g.,<sp/>due<sp/>to<sp/>format<sp/>changes<sp/>or<sp/>display-related<sp/>adjustments),<sp/>the<sp/>swapchain<sp/>is<sp/>recreated<sp/>again<sp/>to<sp/>ensure<sp/>optimal<sp/>presentation.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">After<sp/>handling<sp/>any<sp/>window<sp/>or<sp/>swapchain<sp/>changes,<sp/>the<sp/>rendering<sp/>process<sp/>begins.<sp/>A<sp/>semaphore<sp/>is<sp/>created<sp/>to<sp/>signal<sp/>the<sp/>acquisition<sp/>of<sp/>a<sp/>swapchain<sp/>image.<sp/>This<sp/>synchronization<sp/>primitive<sp/>ensures<sp/>that<sp/>the<sp/>GPU<sp/>completes<sp/>rendering<sp/>operations<sp/>on<sp/>the<sp/>previous<sp/>frame<sp/>before<sp/>proceeding<sp/>with<sp/>the<sp/>current<sp/>one.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>next<sp/>swapchain<sp/>image<sp/>is<sp/>acquired<sp/>using<sp/>`shAcquireSwapchainImage`,<sp/>which<sp/>returns<sp/>an<sp/>index<sp/>that<sp/>identifies<sp/>the<sp/>image<sp/>to<sp/>be<sp/>rendered.<sp/>Semaphores<sp/>and<sp/>fences<sp/>are<sp/>employed<sp/>to<sp/>synchronize<sp/>rendering<sp/>operations.<sp/>The<sp/>application<sp/>waits<sp/>for<sp/>the<sp/>fence<sp/>associated<sp/>with<sp/>the<sp/>acquired<sp/>image<sp/>to<sp/>ensure<sp/>that<sp/>any<sp/>previous<sp/>rendering<sp/>commands<sp/>have<sp/>finished<sp/>execution.<sp/>The<sp/>fence<sp/>is<sp/>then<sp/>reset<sp/>for<sp/>reuse<sp/>in<sp/>subsequent<sp/>iterations.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">With<sp/>the<sp/>acquired<sp/>image,<sp/>the<sp/>command<sp/>buffer<sp/>corresponding<sp/>to<sp/>the<sp/>swapchain<sp/>image<sp/>index<sp/>is<sp/>reset<sp/>and<sp/>re-recorded<sp/>with<sp/>new<sp/>commands.<sp/>This<sp/>includes<sp/>updating<sp/>the<sp/>vertex<sp/>data,<sp/>recording<sp/>buffer<sp/>copy<sp/>operations,<sp/>setting<sp/>up<sp/>the<sp/>render<sp/>pass,<sp/>and<sp/>issuing<sp/>draw<sp/>calls.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>this<sp/>application,<sp/>a<sp/>dynamic<sp/>triangle<sp/>is<sp/>rendered<sp/>with<sp/>a<sp/>vertex<sp/>y<sp/>coordinate<sp/>varying<sp/>over<sp/>time,<sp/>calculated<sp/>using<sp/>a<sp/>sine<sp/>wave<sp/>based<sp/>on<sp/>the<sp/>elapsed<sp/>time.<sp/>This<sp/>demonstrates<sp/>the<sp/>ability<sp/>to<sp/>modify<sp/>geometry<sp/>data<sp/>in<sp/>each<sp/>frame.<sp/>The<sp/>command<sp/>buffer<sp/>binds<sp/>vertex<sp/>and<sp/>index<sp/>buffers,<sp/>sets<sp/>up<sp/>the<sp/>graphics<sp/>pipeline,<sp/>and<sp/>pushes<sp/>constants<sp/>for<sp/>the<sp/>shader<sp/>program.<sp/>Afterward,<sp/>the<sp/>application<sp/>issues<sp/>indexed<sp/>draw<sp/>commands<sp/>for<sp/>the<sp/>scene,<sp/>and<sp/>the<sp/>render<sp/>pass<sp/>is<sp/>completed.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Once<sp/>the<sp/>command<sp/>buffer<sp/>recording<sp/>is<sp/>finished,<sp/>it<sp/>is<sp/>submitted<sp/>to<sp/>the<sp/>graphics<sp/>queue.<sp/>The<sp/>semaphore<sp/>created<sp/>earlier<sp/>ensures<sp/>that<sp/>the<sp/>command<sp/>buffer<sp/>will<sp/>only<sp/>begin<sp/>execution<sp/>after<sp/>the<sp/>swapchain<sp/>image<sp/>is<sp/>acquired.<sp/>A<sp/>second<sp/>semaphore<sp/>signals<sp/>the<sp/>completion<sp/>of<sp/>the<sp/>rendering<sp/>operation,<sp/>which<sp/>is<sp/>used<sp/>in<sp/>the<sp/>presentation<sp/>stage.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Finally,<sp/>the<sp/>rendered<sp/>image<sp/>is<sp/>presented<sp/>to<sp/>the<sp/>screen<sp/>using<sp/>`shQueuePresentSwapchainImage`,<sp/>and<sp/>the<sp/>semaphore<sp/>is<sp/>destroyed<sp/>to<sp/>free<sp/>up<sp/>resources<sp/>for<sp/>the<sp/>next<sp/>frame.<sp/>This<sp/>process<sp/>repeats<sp/>until<sp/>the<sp/>user<sp/>closes<sp/>the<sp/>window,<sp/>ensuring<sp/>smooth<sp/>rendering<sp/>and<sp/>seamless<sp/>window<sp/>resizing.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Throughout<sp/>the<sp/>loop,<sp/>Vulkan&apos;s<sp/>explicit<sp/>resource<sp/>management<sp/>ensures<sp/>that<sp/>the<sp/>application<sp/>maintains<sp/>tight<sp/>control<sp/>over<sp/>memory,<sp/>synchronization,<sp/>and<sp/>pipeline<sp/>state.<sp/>This<sp/>design<sp/>balances<sp/>flexibility<sp/>with<sp/>performance,<sp/>making<sp/>it<sp/>suitable<sp/>for<sp/>real-time<sp/>rendering<sp/>scenarios.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Memory<sp/>Management</highlight></codeline>
<codeline><highlight class="normal">Memory<sp/>management<sp/>is<sp/>a<sp/>critical<sp/>aspect<sp/>of<sp/>Vulkan<sp/>development,<sp/>as<sp/>the<sp/>application<sp/>is<sp/>responsible<sp/>for<sp/>explicitly<sp/>allocating<sp/>and<sp/>freeing<sp/>resources.<sp/>In<sp/>this<sp/>application,<sp/>memory<sp/>is<sp/>carefully<sp/>managed<sp/>throughout<sp/>the<sp/>rendering<sp/>process.<sp/>For<sp/>example,<sp/>when<sp/>the<sp/>swapchain<sp/>is<sp/>resized,<sp/>all<sp/>associated<sp/>resources<sp/>are<sp/>destroyed<sp/>and<sp/>recreated.<sp/>This<sp/>ensures<sp/>that<sp/>memory<sp/>is<sp/>not<sp/>wasted<sp/>on<sp/>resources<sp/>that<sp/>are<sp/>no<sp/>longer<sp/>valid<sp/>due<sp/>to<sp/>changes<sp/>in<sp/>the<sp/>window<sp/>size.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Additionally,<sp/>semaphores<sp/>are<sp/>created<sp/>and<sp/>destroyed<sp/>as<sp/>needed.<sp/>In<sp/>each<sp/>iteration<sp/>of<sp/>the<sp/>draw<sp/>loop,<sp/>a<sp/>semaphore<sp/>is<sp/>created<sp/>to<sp/>signal<sp/>when<sp/>a<sp/>swapchain<sp/>image<sp/>is<sp/>acquired,<sp/>and<sp/>it<sp/>is<sp/>destroyed<sp/>after<sp/>the<sp/>image<sp/>is<sp/>presented.<sp/>Fences<sp/>are<sp/>reset<sp/>after<sp/>each<sp/>use<sp/>to<sp/>ensure<sp/>that<sp/>command<sp/>buffers<sp/>can<sp/>be<sp/>reused<sp/>without<sp/>running<sp/>into<sp/>synchronization<sp/>issues.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Memory<sp/>Release</highlight></codeline>
<codeline><highlight class="normal">The<sp/>application<sp/>also<sp/>waits<sp/>for<sp/>the<sp/>device<sp/>to<sp/>become<sp/>idle<sp/>before<sp/>destroying<sp/>resources,<sp/>such<sp/>as<sp/>when<sp/>resizing<sp/>the<sp/>window<sp/>or<sp/>cleaning<sp/>up<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>program.<sp/>This<sp/>is<sp/>a<sp/>crucial<sp/>step<sp/>to<sp/>ensure<sp/>that<sp/>resources<sp/>are<sp/>not<sp/>destroyed<sp/>while<sp/>they<sp/>are<sp/>still<sp/>in<sp/>use<sp/>by<sp/>the<sp/>GPU,<sp/>which<sp/>could<sp/>lead<sp/>to<sp/>memory<sp/>corruption<sp/>or<sp/>undefined<sp/>behavior.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">![](./../media/alpha-blending.png)</highlight></codeline>
    </programlisting>
    <location file="src/scene_example.md"/>
  </compounddef>
</doxygen>
