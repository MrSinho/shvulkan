<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="md_src_2build" kind="page">
    <compoundname>md_src_2build</compoundname>
    <title>Build shvulkan</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md_src_2build_1autotoc_md9"/></para>
<para><image type="html" name="https://img.shields.io/badge/shvulkan%20|%20SINHO%20SOFTWORKS-3CFADC?style=for-the-badge&amp;logo=&amp;logoColor=white&amp;labelColor=990042" inline="yes"></image>
 <ulink url="https://github.com/mrsinho/shvulkan"><image type="html" name="https://img.shields.io/badge/GitHub_repository-3CFADC?style=for-the-badge&amp;logo=github&amp;logoColor=black" inline="yes"></image>
</ulink></para>
<sect1 id="md_src_2build_1autotoc_md10">
<title>Clone and Build</title><para>Open the terminal and run the following commands:</para>
<para><image type="html" name="https://a11ybadges.com/badge?logo=windows" alt="Windows" inline="yes"></image>
 <image type="html" name="https://a11ybadges.com/badge?logo=debian" alt="Debian" inline="yes"></image>
</para>
<para>Tested on Win32 and X11.</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">git<sp/>clone<sp/>--recursive<sp/>https://github.com/mrsinho/shvulkan.git</highlight></codeline>
<codeline><highlight class="normal">cd<sp/>shvulkan</highlight></codeline>
<codeline><highlight class="normal">mkdir<sp/>build</highlight></codeline>
<codeline><highlight class="normal">cd<sp/>build</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>-DSH_VULKAN_BUILD_EXAMPLES=ON<sp/>..</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>--build<sp/>.</highlight></codeline>
</programlisting></para>
<para><image type="html" name="https://a11ybadges.com/badge?logo=nixos" alt="NixOS" inline="yes"></image>
</para>
<para>Tested on X11 and Wayland graphics servers. The Nix flake lets the system choose the default windowing system.</para>
<para><simplesect kind="warning"><para>While testing with Wayland revealed no issues, there are some resizing issues when using X11.</para>
</simplesect>
<programlisting filename=".bash"><codeline><highlight class="normal">git<sp/>clone<sp/>--recursive<sp/>https://github.com/mrsinho/shvulkan.git</highlight></codeline>
<codeline><highlight class="normal">cd<sp/>shvulkan</highlight></codeline>
<codeline><highlight class="normal">nix<sp/>build</highlight></codeline>
<codeline><highlight class="normal">nix<sp/>develop</highlight></codeline>
<codeline><highlight class="normal">cd<sp/>result/examples/bin</highlight></codeline>
<codeline><highlight class="normal">./shvulkan-clear-color<sp/>&amp;<sp/>./shvulkan-scene<sp/>&amp;<sp/>./shvulkan-compute-power-numbers</highlight></codeline>
</programlisting></para>
<para><image type="html" name="../media/nixos-wayland-scene.png" alt="NixOS Wayland" inline="yes"></image>
</para>
<para><hruler/>
</para>
</sect1>
<sect1 id="md_src_2build_1autotoc_md12">
<title>CMake targets and variables</title><para><table rows="6" cols="3"><row>
<entry thead="yes"><para>CMake Target   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Configure Flags    </para>
</entry></row>
<row>
<entry thead="no"><para>shvulkan   </para>
</entry><entry thead="no"><para>library   </para>
</entry><entry thead="no"><para>/    </para>
</entry></row>
<row>
<entry thead="no"><para>shvulkan-docs   </para>
</entry><entry thead="no"><para>Doxygen outputs   </para>
</entry><entry thead="no"><para>/    </para>
</entry></row>
<row>
<entry thead="no"><para>shvulkan-clear-color   </para>
</entry><entry thead="no"><para>executable   </para>
</entry><entry thead="no"><para>SH_VULKAN_BUILD_EXAMPLES=ON    </para>
</entry></row>
<row>
<entry thead="no"><para>shvulkan-scene   </para>
</entry><entry thead="no"><para>executable   </para>
</entry><entry thead="no"><para>SH_VULKAN_BUILD_EXAMPLES=ON    </para>
</entry></row>
<row>
<entry thead="no"><para>shvulkan-compute-example   </para>
</entry><entry thead="no"><para>executable   </para>
</entry><entry thead="no"><para>SH_VULKAN_BUILD_EXAMPLES=ON   </para>
</entry></row>
</table>
</para>
<para>If the cmake option <computeroutput>SH_VULKAN_BUILD_EXAMPLES</computeroutput> is enabled, the additional <ulink url="https://github.com/glfw/glfw"><computeroutput>glfw</computeroutput></ulink> target will be generated as a static library.</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para>CMake Variable   </para>
</entry><entry thead="yes"><para>About    </para>
</entry></row>
<row>
<entry thead="no"><para>SH_VULKAN_VERSION   </para>
</entry><entry thead="no"><para>Version of the <computeroutput>shvulkan</computeroutput> library    </para>
</entry></row>
<row>
<entry thead="no"><para>SH_VULKAN_ROOT_DIR   </para>
</entry><entry thead="no"><para>Absolute path to the root of the repository directory    </para>
</entry></row>
<row>
<entry thead="no"><para>SH_VULKAN_BINARIES_DIR   </para>
</entry><entry thead="no"><para>Absolute path to the output binaries directory   </para>
</entry></row>
</table>
</para>
<para><hruler/>
</para>
</sect1>
<sect1 id="md_src_2build_1autotoc_md14">
<title>Embed shvulkan with your C/C++ projects</title><para>To link to the <computeroutput>shvulkan</computeroutput> library with CMake:</para>
<para><programlisting filename=".cmake"><codeline><highlight class="normal">if<sp/>(NOT<sp/>TARGET<sp/>shvulkan)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">set(SH_VULKAN_ROOT_DIR<sp/><sp/><sp/><sp/><sp/>path/to/shvulkan/root/directory)</highlight></codeline>
<codeline><highlight class="normal">set(SH_VULKAN_BINARIES_DIR<sp/>path/your/binaries/directory)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">include(${SH_VULKAN_ROOT_DIR}/shvulkan/shvulkan.cmake)</highlight></codeline>
<codeline><highlight class="normal">build_shvulkan()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">endif()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>[...]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">target_link_libraries(app<sp/>PUBLIC<sp/>shvulkan)</highlight></codeline>
</programlisting></para>
<para>Then, include the <computeroutput><ref refid="shVulkan_8h" kindref="compound">shVulkan.h</ref></computeroutput> header file:</para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="shVulkan_8h" kindref="compound">shvulkan/shVulkan.h</ref>&gt;</highlight></codeline>
</programlisting> </para>
</sect1>
    </detaileddescription>
    <location file="src/build.md"/>
  </compounddef>
</doxygen>
